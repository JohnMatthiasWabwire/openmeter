// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-slog/otelslog"
	"github.com/openmeterio/openmeter/config"
	"github.com/openmeterio/openmeter/openmeter/app"
	"github.com/openmeterio/openmeter/openmeter/meter"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/sdk/resource"
	"go.opentelemetry.io/otel/semconv/v1.20.0"
	"go.opentelemetry.io/otel/trace"
	"log/slog"
	"os"
)

// Injectors from wire.go:

func initializeApplication(ctx context.Context, conf config.Configuration, logger *slog.Logger) (Application, func(), error) {
	v := conf.Meters
	inMemoryRepository := app.NewMeterRepository(v)
	telemetryConfig := conf.Telemetry
	metricsTelemetryConfig := telemetryConfig.Metrics
	health := app.NewHealthChecker(logger)
	telemetryHandler := app.NewTelemetryHandler(metricsTelemetryConfig, health)
	v2, cleanup := app.NewTelemetryServer(telemetryConfig, telemetryHandler)
	resource := NewOtelResource(conf)
	meterProvider, cleanup2, err := app.NewMeterProvider(ctx, metricsTelemetryConfig, resource, logger)
	if err != nil {
		cleanup()
		return Application{}, nil, err
	}
	meter := NewMeter(meterProvider)
	traceTelemetryConfig := telemetryConfig.Trace
	tracerProvider, cleanup3, err := app.NewTracerProvider(ctx, traceTelemetryConfig, resource, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return Application{}, nil, err
	}
	application := Application{
		MeterRepository: inMemoryRepository,
		TelemetryServer: v2,
		Meter:           meter,
		TracerProvider:  tracerProvider,
		MeterProvider:   meterProvider,
	}
	return application, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// TODO: is this necessary? Do we need a logger first?
func initializeLogger(conf config.Configuration) *slog.Logger {
	resource := NewOtelResource(conf)
	logger := NewLogger(conf, resource)
	return logger
}

// wire.go:

type Application struct {
	MeterRepository meter.Repository
	TelemetryServer app.TelemetryServer

	Meter metric.Meter

	// TODO: move to global setter
	TracerProvider trace.TracerProvider
	MeterProvider  metric.MeterProvider
}

// TODO: use the primary logger
func NewLogger(conf config.Configuration, res *resource.Resource) *slog.Logger {
	logger := slog.New(otelslog.NewHandler(conf.Telemetry.Log.NewHandler(os.Stdout)))
	logger = otelslog.WithResource(logger, res)

	return logger
}

// TODO: consider moving this to a separate package
// TODO: make sure this doesn't generate any random IDs, because it is called twice
func NewOtelResource(conf config.Configuration) *resource.Resource {
	extraResources, _ := resource.New(context.Background(), resource.WithContainer(), resource.WithAttributes(semconv.ServiceName("openmeter"), semconv.ServiceVersion(version), semconv.DeploymentEnvironment(conf.Environment)),
	)

	res, _ := resource.Merge(resource.Default(), extraResources)

	return res
}

// TODO: consider moving this to a separate package
func NewMeter(meterProvider metric.MeterProvider) metric.Meter {
	return meterProvider.Meter(otelName)
}
