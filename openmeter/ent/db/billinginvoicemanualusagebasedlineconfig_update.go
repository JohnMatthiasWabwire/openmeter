// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanualusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/plan"
)

// BillingInvoiceManualUsageBasedLineConfigUpdate is the builder for updating BillingInvoiceManualUsageBasedLineConfig entities.
type BillingInvoiceManualUsageBasedLineConfigUpdate struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceManualUsageBasedLineConfigMutation
}

// Where appends a list predicates to the BillingInvoiceManualUsageBasedLineConfigUpdate builder.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) Where(ps ...predicate.BillingInvoiceManualUsageBasedLineConfig) *BillingInvoiceManualUsageBasedLineConfigUpdate {
	bimublcu.mutation.Where(ps...)
	return bimublcu
}

// SetPriceType sets the "price_type" field.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) SetPriceType(pt plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpdate {
	bimublcu.mutation.SetPriceType(pt)
	return bimublcu
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) SetNillablePriceType(pt *plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpdate {
	if pt != nil {
		bimublcu.SetPriceType(*pt)
	}
	return bimublcu
}

// SetPrice sets the "price" field.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) SetPrice(pl *plan.Price) *BillingInvoiceManualUsageBasedLineConfigUpdate {
	bimublcu.mutation.SetPrice(pl)
	return bimublcu
}

// Mutation returns the BillingInvoiceManualUsageBasedLineConfigMutation object of the builder.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) Mutation() *BillingInvoiceManualUsageBasedLineConfigMutation {
	return bimublcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bimublcu.sqlSave, bimublcu.mutation, bimublcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := bimublcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) Exec(ctx context.Context) error {
	_, err := bimublcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) ExecX(ctx context.Context) {
	if err := bimublcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) check() error {
	if v, ok := bimublcu.mutation.PriceType(); ok {
		if err := billinginvoicemanualusagebasedlineconfig.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price_type": %w`, err)}
		}
	}
	if v, ok := bimublcu.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price": %w`, err)}
		}
	}
	return nil
}

func (bimublcu *BillingInvoiceManualUsageBasedLineConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bimublcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicemanualusagebasedlineconfig.Table, billinginvoicemanualusagebasedlineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoicemanualusagebasedlineconfig.FieldID, field.TypeString))
	if ps := bimublcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bimublcu.mutation.PriceType(); ok {
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPriceType, field.TypeEnum, value)
	}
	if value, ok := bimublcu.mutation.Price(); ok {
		vv, err := billinginvoicemanualusagebasedlineconfig.ValueScanner.Price.Value(value)
		if err != nil {
			return 0, err
		}
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPrice, field.TypeString, vv)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bimublcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicemanualusagebasedlineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bimublcu.mutation.done = true
	return n, nil
}

// BillingInvoiceManualUsageBasedLineConfigUpdateOne is the builder for updating a single BillingInvoiceManualUsageBasedLineConfig entity.
type BillingInvoiceManualUsageBasedLineConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingInvoiceManualUsageBasedLineConfigMutation
}

// SetPriceType sets the "price_type" field.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) SetPriceType(pt plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	bimublcuo.mutation.SetPriceType(pt)
	return bimublcuo
}

// SetNillablePriceType sets the "price_type" field if the given value is not nil.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) SetNillablePriceType(pt *plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	if pt != nil {
		bimublcuo.SetPriceType(*pt)
	}
	return bimublcuo
}

// SetPrice sets the "price" field.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) SetPrice(pl *plan.Price) *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	bimublcuo.mutation.SetPrice(pl)
	return bimublcuo
}

// Mutation returns the BillingInvoiceManualUsageBasedLineConfigMutation object of the builder.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) Mutation() *BillingInvoiceManualUsageBasedLineConfigMutation {
	return bimublcuo.mutation
}

// Where appends a list predicates to the BillingInvoiceManualUsageBasedLineConfigUpdate builder.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) Where(ps ...predicate.BillingInvoiceManualUsageBasedLineConfig) *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	bimublcuo.mutation.Where(ps...)
	return bimublcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) Select(field string, fields ...string) *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	bimublcuo.fields = append([]string{field}, fields...)
	return bimublcuo
}

// Save executes the query and returns the updated BillingInvoiceManualUsageBasedLineConfig entity.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) Save(ctx context.Context) (*BillingInvoiceManualUsageBasedLineConfig, error) {
	return withHooks(ctx, bimublcuo.sqlSave, bimublcuo.mutation, bimublcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) SaveX(ctx context.Context) *BillingInvoiceManualUsageBasedLineConfig {
	node, err := bimublcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := bimublcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) ExecX(ctx context.Context) {
	if err := bimublcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) check() error {
	if v, ok := bimublcuo.mutation.PriceType(); ok {
		if err := billinginvoicemanualusagebasedlineconfig.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price_type": %w`, err)}
		}
	}
	if v, ok := bimublcuo.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price": %w`, err)}
		}
	}
	return nil
}

func (bimublcuo *BillingInvoiceManualUsageBasedLineConfigUpdateOne) sqlSave(ctx context.Context) (_node *BillingInvoiceManualUsageBasedLineConfig, err error) {
	if err := bimublcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(billinginvoicemanualusagebasedlineconfig.Table, billinginvoicemanualusagebasedlineconfig.Columns, sqlgraph.NewFieldSpec(billinginvoicemanualusagebasedlineconfig.FieldID, field.TypeString))
	id, ok := bimublcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingInvoiceManualUsageBasedLineConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bimublcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billinginvoicemanualusagebasedlineconfig.FieldID)
		for _, f := range fields {
			if !billinginvoicemanualusagebasedlineconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billinginvoicemanualusagebasedlineconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bimublcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bimublcuo.mutation.PriceType(); ok {
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPriceType, field.TypeEnum, value)
	}
	if value, ok := bimublcuo.mutation.Price(); ok {
		vv, err := billinginvoicemanualusagebasedlineconfig.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, err
		}
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPrice, field.TypeString, vv)
	}
	_node = &BillingInvoiceManualUsageBasedLineConfig{config: bimublcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bimublcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billinginvoicemanualusagebasedlineconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bimublcuo.mutation.done = true
	return _node, nil
}
