// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/planratecard"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// PlanRateCardDelete is the builder for deleting a PlanRateCard entity.
type PlanRateCardDelete struct {
	config
	hooks    []Hook
	mutation *PlanRateCardMutation
}

// Where appends a list predicates to the PlanRateCardDelete builder.
func (prcd *PlanRateCardDelete) Where(ps ...predicate.PlanRateCard) *PlanRateCardDelete {
	prcd.mutation.Where(ps...)
	return prcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prcd *PlanRateCardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prcd.sqlExec, prcd.mutation, prcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prcd *PlanRateCardDelete) ExecX(ctx context.Context) int {
	n, err := prcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prcd *PlanRateCardDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(planratecard.Table, sqlgraph.NewFieldSpec(planratecard.FieldID, field.TypeString))
	if ps := prcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prcd.mutation.done = true
	return affected, err
}

// PlanRateCardDeleteOne is the builder for deleting a single PlanRateCard entity.
type PlanRateCardDeleteOne struct {
	prcd *PlanRateCardDelete
}

// Where appends a list predicates to the PlanRateCardDelete builder.
func (prcdo *PlanRateCardDeleteOne) Where(ps ...predicate.PlanRateCard) *PlanRateCardDeleteOne {
	prcdo.prcd.mutation.Where(ps...)
	return prcdo
}

// Exec executes the deletion query.
func (prcdo *PlanRateCardDeleteOne) Exec(ctx context.Context) error {
	n, err := prcdo.prcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{planratecard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prcdo *PlanRateCardDeleteOne) ExecX(ctx context.Context) {
	if err := prcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
