// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfigoverride"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingWorkflowConfigOverrideUpdate is the builder for updating BillingWorkflowConfigOverride entities.
type BillingWorkflowConfigOverrideUpdate struct {
	config
	hooks    []Hook
	mutation *BillingWorkflowConfigOverrideMutation
}

// Where appends a list predicates to the BillingWorkflowConfigOverrideUpdate builder.
func (bwcou *BillingWorkflowConfigOverrideUpdate) Where(ps ...predicate.BillingWorkflowConfigOverride) *BillingWorkflowConfigOverrideUpdate {
	bwcou.mutation.Where(ps...)
	return bwcou
}

// SetUpdatedAt sets the "updated_at" field.
func (bwcou *BillingWorkflowConfigOverrideUpdate) SetUpdatedAt(t time.Time) *BillingWorkflowConfigOverrideUpdate {
	bwcou.mutation.SetUpdatedAt(t)
	return bwcou
}

// SetDeletedAt sets the "deleted_at" field.
func (bwcou *BillingWorkflowConfigOverrideUpdate) SetDeletedAt(t time.Time) *BillingWorkflowConfigOverrideUpdate {
	bwcou.mutation.SetDeletedAt(t)
	return bwcou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bwcou *BillingWorkflowConfigOverrideUpdate) SetNillableDeletedAt(t *time.Time) *BillingWorkflowConfigOverrideUpdate {
	if t != nil {
		bwcou.SetDeletedAt(*t)
	}
	return bwcou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bwcou *BillingWorkflowConfigOverrideUpdate) ClearDeletedAt() *BillingWorkflowConfigOverrideUpdate {
	bwcou.mutation.ClearDeletedAt()
	return bwcou
}

// Mutation returns the BillingWorkflowConfigOverrideMutation object of the builder.
func (bwcou *BillingWorkflowConfigOverrideUpdate) Mutation() *BillingWorkflowConfigOverrideMutation {
	return bwcou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bwcou *BillingWorkflowConfigOverrideUpdate) Save(ctx context.Context) (int, error) {
	bwcou.defaults()
	return withHooks(ctx, bwcou.sqlSave, bwcou.mutation, bwcou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bwcou *BillingWorkflowConfigOverrideUpdate) SaveX(ctx context.Context) int {
	affected, err := bwcou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bwcou *BillingWorkflowConfigOverrideUpdate) Exec(ctx context.Context) error {
	_, err := bwcou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwcou *BillingWorkflowConfigOverrideUpdate) ExecX(ctx context.Context) {
	if err := bwcou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwcou *BillingWorkflowConfigOverrideUpdate) defaults() {
	if _, ok := bwcou.mutation.UpdatedAt(); !ok {
		v := billingworkflowconfigoverride.UpdateDefaultUpdatedAt()
		bwcou.mutation.SetUpdatedAt(v)
	}
}

func (bwcou *BillingWorkflowConfigOverrideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingworkflowconfigoverride.Table, billingworkflowconfigoverride.Columns, sqlgraph.NewFieldSpec(billingworkflowconfigoverride.FieldID, field.TypeString))
	if ps := bwcou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bwcou.mutation.UpdatedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bwcou.mutation.DeletedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bwcou.mutation.DeletedAtCleared() {
		_spec.ClearField(billingworkflowconfigoverride.FieldDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bwcou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingworkflowconfigoverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bwcou.mutation.done = true
	return n, nil
}

// BillingWorkflowConfigOverrideUpdateOne is the builder for updating a single BillingWorkflowConfigOverride entity.
type BillingWorkflowConfigOverrideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BillingWorkflowConfigOverrideMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) SetUpdatedAt(t time.Time) *BillingWorkflowConfigOverrideUpdateOne {
	bwcouo.mutation.SetUpdatedAt(t)
	return bwcouo
}

// SetDeletedAt sets the "deleted_at" field.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) SetDeletedAt(t time.Time) *BillingWorkflowConfigOverrideUpdateOne {
	bwcouo.mutation.SetDeletedAt(t)
	return bwcouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) SetNillableDeletedAt(t *time.Time) *BillingWorkflowConfigOverrideUpdateOne {
	if t != nil {
		bwcouo.SetDeletedAt(*t)
	}
	return bwcouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) ClearDeletedAt() *BillingWorkflowConfigOverrideUpdateOne {
	bwcouo.mutation.ClearDeletedAt()
	return bwcouo
}

// Mutation returns the BillingWorkflowConfigOverrideMutation object of the builder.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) Mutation() *BillingWorkflowConfigOverrideMutation {
	return bwcouo.mutation
}

// Where appends a list predicates to the BillingWorkflowConfigOverrideUpdate builder.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) Where(ps ...predicate.BillingWorkflowConfigOverride) *BillingWorkflowConfigOverrideUpdateOne {
	bwcouo.mutation.Where(ps...)
	return bwcouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) Select(field string, fields ...string) *BillingWorkflowConfigOverrideUpdateOne {
	bwcouo.fields = append([]string{field}, fields...)
	return bwcouo
}

// Save executes the query and returns the updated BillingWorkflowConfigOverride entity.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) Save(ctx context.Context) (*BillingWorkflowConfigOverride, error) {
	bwcouo.defaults()
	return withHooks(ctx, bwcouo.sqlSave, bwcouo.mutation, bwcouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) SaveX(ctx context.Context) *BillingWorkflowConfigOverride {
	node, err := bwcouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) Exec(ctx context.Context) error {
	_, err := bwcouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) ExecX(ctx context.Context) {
	if err := bwcouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) defaults() {
	if _, ok := bwcouo.mutation.UpdatedAt(); !ok {
		v := billingworkflowconfigoverride.UpdateDefaultUpdatedAt()
		bwcouo.mutation.SetUpdatedAt(v)
	}
}

func (bwcouo *BillingWorkflowConfigOverrideUpdateOne) sqlSave(ctx context.Context) (_node *BillingWorkflowConfigOverride, err error) {
	_spec := sqlgraph.NewUpdateSpec(billingworkflowconfigoverride.Table, billingworkflowconfigoverride.Columns, sqlgraph.NewFieldSpec(billingworkflowconfigoverride.FieldID, field.TypeString))
	id, ok := bwcouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "BillingWorkflowConfigOverride.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bwcouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, billingworkflowconfigoverride.FieldID)
		for _, f := range fields {
			if !billingworkflowconfigoverride.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != billingworkflowconfigoverride.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bwcouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bwcouo.mutation.UpdatedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bwcouo.mutation.DeletedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldDeletedAt, field.TypeTime, value)
	}
	if bwcouo.mutation.DeletedAtCleared() {
		_spec.ClearField(billingworkflowconfigoverride.FieldDeletedAt, field.TypeTime)
	}
	_node = &BillingWorkflowConfigOverride{config: bwcouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bwcouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{billingworkflowconfigoverride.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bwcouo.mutation.done = true
	return _node, nil
}
