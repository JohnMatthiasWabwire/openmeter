// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanualusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/plan"
)

// BillingInvoiceManualUsageBasedLineConfigCreate is the builder for creating a BillingInvoiceManualUsageBasedLineConfig entity.
type BillingInvoiceManualUsageBasedLineConfigCreate struct {
	config
	mutation *BillingInvoiceManualUsageBasedLineConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetNamespace(s string) *BillingInvoiceManualUsageBasedLineConfigCreate {
	bimublcc.mutation.SetNamespace(s)
	return bimublcc
}

// SetPriceType sets the "price_type" field.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetPriceType(pt plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigCreate {
	bimublcc.mutation.SetPriceType(pt)
	return bimublcc
}

// SetFeatureKey sets the "feature_key" field.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetFeatureKey(s string) *BillingInvoiceManualUsageBasedLineConfigCreate {
	bimublcc.mutation.SetFeatureKey(s)
	return bimublcc
}

// SetPrice sets the "price" field.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetPrice(pl *plan.Price) *BillingInvoiceManualUsageBasedLineConfigCreate {
	bimublcc.mutation.SetPrice(pl)
	return bimublcc
}

// SetID sets the "id" field.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetID(s string) *BillingInvoiceManualUsageBasedLineConfigCreate {
	bimublcc.mutation.SetID(s)
	return bimublcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SetNillableID(s *string) *BillingInvoiceManualUsageBasedLineConfigCreate {
	if s != nil {
		bimublcc.SetID(*s)
	}
	return bimublcc
}

// Mutation returns the BillingInvoiceManualUsageBasedLineConfigMutation object of the builder.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) Mutation() *BillingInvoiceManualUsageBasedLineConfigMutation {
	return bimublcc.mutation
}

// Save creates the BillingInvoiceManualUsageBasedLineConfig in the database.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) Save(ctx context.Context) (*BillingInvoiceManualUsageBasedLineConfig, error) {
	bimublcc.defaults()
	return withHooks(ctx, bimublcc.sqlSave, bimublcc.mutation, bimublcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) SaveX(ctx context.Context) *BillingInvoiceManualUsageBasedLineConfig {
	v, err := bimublcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) Exec(ctx context.Context) error {
	_, err := bimublcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) ExecX(ctx context.Context) {
	if err := bimublcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) defaults() {
	if _, ok := bimublcc.mutation.ID(); !ok {
		v := billinginvoicemanualusagebasedlineconfig.DefaultID()
		bimublcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) check() error {
	if _, ok := bimublcc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingInvoiceManualUsageBasedLineConfig.namespace"`)}
	}
	if v, ok := bimublcc.mutation.Namespace(); ok {
		if err := billinginvoicemanualusagebasedlineconfig.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.namespace": %w`, err)}
		}
	}
	if _, ok := bimublcc.mutation.PriceType(); !ok {
		return &ValidationError{Name: "price_type", err: errors.New(`db: missing required field "BillingInvoiceManualUsageBasedLineConfig.price_type"`)}
	}
	if v, ok := bimublcc.mutation.PriceType(); ok {
		if err := billinginvoicemanualusagebasedlineconfig.PriceTypeValidator(v); err != nil {
			return &ValidationError{Name: "price_type", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price_type": %w`, err)}
		}
	}
	if _, ok := bimublcc.mutation.FeatureKey(); !ok {
		return &ValidationError{Name: "feature_key", err: errors.New(`db: missing required field "BillingInvoiceManualUsageBasedLineConfig.feature_key"`)}
	}
	if v, ok := bimublcc.mutation.FeatureKey(); ok {
		if err := billinginvoicemanualusagebasedlineconfig.FeatureKeyValidator(v); err != nil {
			return &ValidationError{Name: "feature_key", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.feature_key": %w`, err)}
		}
	}
	if _, ok := bimublcc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`db: missing required field "BillingInvoiceManualUsageBasedLineConfig.price"`)}
	}
	if v, ok := bimublcc.mutation.Price(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf(`db: validator failed for field "BillingInvoiceManualUsageBasedLineConfig.price": %w`, err)}
		}
	}
	return nil
}

func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) sqlSave(ctx context.Context) (*BillingInvoiceManualUsageBasedLineConfig, error) {
	if err := bimublcc.check(); err != nil {
		return nil, err
	}
	_node, _spec, err := bimublcc.createSpec()
	if err != nil {
		return nil, err
	}
	if err := sqlgraph.CreateNode(ctx, bimublcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingInvoiceManualUsageBasedLineConfig.ID type: %T", _spec.ID.Value)
		}
	}
	bimublcc.mutation.id = &_node.ID
	bimublcc.mutation.done = true
	return _node, nil
}

func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) createSpec() (*BillingInvoiceManualUsageBasedLineConfig, *sqlgraph.CreateSpec, error) {
	var (
		_node = &BillingInvoiceManualUsageBasedLineConfig{config: bimublcc.config}
		_spec = sqlgraph.NewCreateSpec(billinginvoicemanualusagebasedlineconfig.Table, sqlgraph.NewFieldSpec(billinginvoicemanualusagebasedlineconfig.FieldID, field.TypeString))
	)
	_spec.OnConflict = bimublcc.conflict
	if id, ok := bimublcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bimublcc.mutation.Namespace(); ok {
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bimublcc.mutation.PriceType(); ok {
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPriceType, field.TypeEnum, value)
		_node.PriceType = value
	}
	if value, ok := bimublcc.mutation.FeatureKey(); ok {
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldFeatureKey, field.TypeString, value)
		_node.FeatureKey = value
	}
	if value, ok := bimublcc.mutation.Price(); ok {
		vv, err := billinginvoicemanualusagebasedlineconfig.ValueScanner.Price.Value(value)
		if err != nil {
			return nil, nil, err
		}
		_spec.SetField(billinginvoicemanualusagebasedlineconfig.FieldPrice, field.TypeString, vv)
		_node.Price = value
	}
	return _node, _spec, nil
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceManualUsageBasedLineConfigUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	bimublcc.conflict = opts
	return &BillingInvoiceManualUsageBasedLineConfigUpsertOne{
		create: bimublcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bimublcc *BillingInvoiceManualUsageBasedLineConfigCreate) OnConflictColumns(columns ...string) *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	bimublcc.conflict = append(bimublcc.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceManualUsageBasedLineConfigUpsertOne{
		create: bimublcc,
	}
}

type (
	// BillingInvoiceManualUsageBasedLineConfigUpsertOne is the builder for "upsert"-ing
	//  one BillingInvoiceManualUsageBasedLineConfig node.
	BillingInvoiceManualUsageBasedLineConfigUpsertOne struct {
		create *BillingInvoiceManualUsageBasedLineConfigCreate
	}

	// BillingInvoiceManualUsageBasedLineConfigUpsert is the "OnConflict" setter.
	BillingInvoiceManualUsageBasedLineConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetPriceType sets the "price_type" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsert) SetPriceType(v plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpsert {
	u.Set(billinginvoicemanualusagebasedlineconfig.FieldPriceType, v)
	return u
}

// UpdatePriceType sets the "price_type" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsert) UpdatePriceType() *BillingInvoiceManualUsageBasedLineConfigUpsert {
	u.SetExcluded(billinginvoicemanualusagebasedlineconfig.FieldPriceType)
	return u
}

// SetPrice sets the "price" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsert) SetPrice(v *plan.Price) *BillingInvoiceManualUsageBasedLineConfigUpsert {
	u.Set(billinginvoicemanualusagebasedlineconfig.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsert) UpdatePrice() *BillingInvoiceManualUsageBasedLineConfigUpsert {
	u.SetExcluded(billinginvoicemanualusagebasedlineconfig.FieldPrice)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) UpdateNewValues() *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldNamespace)
		}
		if _, exists := u.create.mutation.FeatureKey(); exists {
			s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldFeatureKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) Ignore() *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) DoNothing() *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceManualUsageBasedLineConfigCreate.OnConflict
// documentation for more info.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) Update(set func(*BillingInvoiceManualUsageBasedLineConfigUpsert)) *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceManualUsageBasedLineConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetPriceType sets the "price_type" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) SetPriceType(v plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.SetPriceType(v)
	})
}

// UpdatePriceType sets the "price_type" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) UpdatePriceType() *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.UpdatePriceType()
	})
}

// SetPrice sets the "price" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) SetPrice(v *plan.Price) *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) UpdatePrice() *BillingInvoiceManualUsageBasedLineConfigUpsertOne {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceManualUsageBasedLineConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingInvoiceManualUsageBasedLineConfigUpsertOne.ID is not supported by MySQL driver. Use BillingInvoiceManualUsageBasedLineConfigUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingInvoiceManualUsageBasedLineConfigCreateBulk is the builder for creating many BillingInvoiceManualUsageBasedLineConfig entities in bulk.
type BillingInvoiceManualUsageBasedLineConfigCreateBulk struct {
	config
	err      error
	builders []*BillingInvoiceManualUsageBasedLineConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingInvoiceManualUsageBasedLineConfig entities in the database.
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) Save(ctx context.Context) ([]*BillingInvoiceManualUsageBasedLineConfig, error) {
	if bimublccb.err != nil {
		return nil, bimublccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bimublccb.builders))
	nodes := make([]*BillingInvoiceManualUsageBasedLineConfig, len(bimublccb.builders))
	mutators := make([]Mutator, len(bimublccb.builders))
	for i := range bimublccb.builders {
		func(i int, root context.Context) {
			builder := bimublccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingInvoiceManualUsageBasedLineConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i], err = builder.createSpec()
				if err != nil {
					return nil, err
				}
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bimublccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bimublccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bimublccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bimublccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) SaveX(ctx context.Context) []*BillingInvoiceManualUsageBasedLineConfig {
	v, err := bimublccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := bimublccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) ExecX(ctx context.Context) {
	if err := bimublccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingInvoiceManualUsageBasedLineConfigUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	bimublccb.conflict = opts
	return &BillingInvoiceManualUsageBasedLineConfigUpsertBulk{
		create: bimublccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bimublccb *BillingInvoiceManualUsageBasedLineConfigCreateBulk) OnConflictColumns(columns ...string) *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	bimublccb.conflict = append(bimublccb.conflict, sql.ConflictColumns(columns...))
	return &BillingInvoiceManualUsageBasedLineConfigUpsertBulk{
		create: bimublccb,
	}
}

// BillingInvoiceManualUsageBasedLineConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingInvoiceManualUsageBasedLineConfig nodes.
type BillingInvoiceManualUsageBasedLineConfigUpsertBulk struct {
	create *BillingInvoiceManualUsageBasedLineConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) UpdateNewValues() *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldNamespace)
			}
			if _, exists := b.mutation.FeatureKey(); exists {
				s.SetIgnore(billinginvoicemanualusagebasedlineconfig.FieldFeatureKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingInvoiceManualUsageBasedLineConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) Ignore() *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) DoNothing() *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingInvoiceManualUsageBasedLineConfigCreateBulk.OnConflict
// documentation for more info.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) Update(set func(*BillingInvoiceManualUsageBasedLineConfigUpsert)) *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingInvoiceManualUsageBasedLineConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetPriceType sets the "price_type" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) SetPriceType(v plan.PriceType) *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.SetPriceType(v)
	})
}

// UpdatePriceType sets the "price_type" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) UpdatePriceType() *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.UpdatePriceType()
	})
}

// SetPrice sets the "price" field.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) SetPrice(v *plan.Price) *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.SetPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) UpdatePrice() *BillingInvoiceManualUsageBasedLineConfigUpsertBulk {
	return u.Update(func(s *BillingInvoiceManualUsageBasedLineConfigUpsert) {
		s.UpdatePrice()
	})
}

// Exec executes the query.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingInvoiceManualUsageBasedLineConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingInvoiceManualUsageBasedLineConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingInvoiceManualUsageBasedLineConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
