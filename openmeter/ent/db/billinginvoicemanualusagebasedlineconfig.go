// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoicemanualusagebasedlineconfig"
	"github.com/openmeterio/openmeter/openmeter/productcatalog/plan"
)

// BillingInvoiceManualUsageBasedLineConfig is the model entity for the BillingInvoiceManualUsageBasedLineConfig schema.
type BillingInvoiceManualUsageBasedLineConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Namespace holds the value of the "namespace" field.
	Namespace string `json:"namespace,omitempty"`
	// PriceType holds the value of the "price_type" field.
	PriceType plan.PriceType `json:"price_type,omitempty"`
	// FeatureKey holds the value of the "feature_key" field.
	FeatureKey string `json:"feature_key,omitempty"`
	// Price holds the value of the "price" field.
	Price        *plan.Price `json:"price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BillingInvoiceManualUsageBasedLineConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case billinginvoicemanualusagebasedlineconfig.FieldID, billinginvoicemanualusagebasedlineconfig.FieldNamespace, billinginvoicemanualusagebasedlineconfig.FieldPriceType, billinginvoicemanualusagebasedlineconfig.FieldFeatureKey:
			values[i] = new(sql.NullString)
		case billinginvoicemanualusagebasedlineconfig.FieldPrice:
			values[i] = billinginvoicemanualusagebasedlineconfig.ValueScanner.Price.ScanValue()
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BillingInvoiceManualUsageBasedLineConfig fields.
func (bimublc *BillingInvoiceManualUsageBasedLineConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case billinginvoicemanualusagebasedlineconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				bimublc.ID = value.String
			}
		case billinginvoicemanualusagebasedlineconfig.FieldNamespace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field namespace", values[i])
			} else if value.Valid {
				bimublc.Namespace = value.String
			}
		case billinginvoicemanualusagebasedlineconfig.FieldPriceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price_type", values[i])
			} else if value.Valid {
				bimublc.PriceType = plan.PriceType(value.String)
			}
		case billinginvoicemanualusagebasedlineconfig.FieldFeatureKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_key", values[i])
			} else if value.Valid {
				bimublc.FeatureKey = value.String
			}
		case billinginvoicemanualusagebasedlineconfig.FieldPrice:
			if value, err := billinginvoicemanualusagebasedlineconfig.ValueScanner.Price.FromValue(values[i]); err != nil {
				return err
			} else {
				bimublc.Price = value
			}
		default:
			bimublc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BillingInvoiceManualUsageBasedLineConfig.
// This includes values selected through modifiers, order, etc.
func (bimublc *BillingInvoiceManualUsageBasedLineConfig) Value(name string) (ent.Value, error) {
	return bimublc.selectValues.Get(name)
}

// Update returns a builder for updating this BillingInvoiceManualUsageBasedLineConfig.
// Note that you need to call BillingInvoiceManualUsageBasedLineConfig.Unwrap() before calling this method if this BillingInvoiceManualUsageBasedLineConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (bimublc *BillingInvoiceManualUsageBasedLineConfig) Update() *BillingInvoiceManualUsageBasedLineConfigUpdateOne {
	return NewBillingInvoiceManualUsageBasedLineConfigClient(bimublc.config).UpdateOne(bimublc)
}

// Unwrap unwraps the BillingInvoiceManualUsageBasedLineConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bimublc *BillingInvoiceManualUsageBasedLineConfig) Unwrap() *BillingInvoiceManualUsageBasedLineConfig {
	_tx, ok := bimublc.config.driver.(*txDriver)
	if !ok {
		panic("db: BillingInvoiceManualUsageBasedLineConfig is not a transactional entity")
	}
	bimublc.config.driver = _tx.drv
	return bimublc
}

// String implements the fmt.Stringer.
func (bimublc *BillingInvoiceManualUsageBasedLineConfig) String() string {
	var builder strings.Builder
	builder.WriteString("BillingInvoiceManualUsageBasedLineConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bimublc.ID))
	builder.WriteString("namespace=")
	builder.WriteString(bimublc.Namespace)
	builder.WriteString(", ")
	builder.WriteString("price_type=")
	builder.WriteString(fmt.Sprintf("%v", bimublc.PriceType))
	builder.WriteString(", ")
	builder.WriteString("feature_key=")
	builder.WriteString(bimublc.FeatureKey)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", bimublc.Price))
	builder.WriteByte(')')
	return builder.String()
}

// BillingInvoiceManualUsageBasedLineConfigs is a parsable slice of BillingInvoiceManualUsageBasedLineConfig.
type BillingInvoiceManualUsageBasedLineConfigs []*BillingInvoiceManualUsageBasedLineConfig
