// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billingworkflowconfigoverride"
)

// BillingWorkflowConfigOverrideCreate is the builder for creating a BillingWorkflowConfigOverride entity.
type BillingWorkflowConfigOverrideCreate struct {
	config
	mutation *BillingWorkflowConfigOverrideMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNamespace sets the "namespace" field.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetNamespace(s string) *BillingWorkflowConfigOverrideCreate {
	bwcoc.mutation.SetNamespace(s)
	return bwcoc
}

// SetCreatedAt sets the "created_at" field.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetCreatedAt(t time.Time) *BillingWorkflowConfigOverrideCreate {
	bwcoc.mutation.SetCreatedAt(t)
	return bwcoc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetNillableCreatedAt(t *time.Time) *BillingWorkflowConfigOverrideCreate {
	if t != nil {
		bwcoc.SetCreatedAt(*t)
	}
	return bwcoc
}

// SetUpdatedAt sets the "updated_at" field.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetUpdatedAt(t time.Time) *BillingWorkflowConfigOverrideCreate {
	bwcoc.mutation.SetUpdatedAt(t)
	return bwcoc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetNillableUpdatedAt(t *time.Time) *BillingWorkflowConfigOverrideCreate {
	if t != nil {
		bwcoc.SetUpdatedAt(*t)
	}
	return bwcoc
}

// SetDeletedAt sets the "deleted_at" field.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetDeletedAt(t time.Time) *BillingWorkflowConfigOverrideCreate {
	bwcoc.mutation.SetDeletedAt(t)
	return bwcoc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetNillableDeletedAt(t *time.Time) *BillingWorkflowConfigOverrideCreate {
	if t != nil {
		bwcoc.SetDeletedAt(*t)
	}
	return bwcoc
}

// SetID sets the "id" field.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetID(s string) *BillingWorkflowConfigOverrideCreate {
	bwcoc.mutation.SetID(s)
	return bwcoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SetNillableID(s *string) *BillingWorkflowConfigOverrideCreate {
	if s != nil {
		bwcoc.SetID(*s)
	}
	return bwcoc
}

// Mutation returns the BillingWorkflowConfigOverrideMutation object of the builder.
func (bwcoc *BillingWorkflowConfigOverrideCreate) Mutation() *BillingWorkflowConfigOverrideMutation {
	return bwcoc.mutation
}

// Save creates the BillingWorkflowConfigOverride in the database.
func (bwcoc *BillingWorkflowConfigOverrideCreate) Save(ctx context.Context) (*BillingWorkflowConfigOverride, error) {
	bwcoc.defaults()
	return withHooks(ctx, bwcoc.sqlSave, bwcoc.mutation, bwcoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bwcoc *BillingWorkflowConfigOverrideCreate) SaveX(ctx context.Context) *BillingWorkflowConfigOverride {
	v, err := bwcoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bwcoc *BillingWorkflowConfigOverrideCreate) Exec(ctx context.Context) error {
	_, err := bwcoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwcoc *BillingWorkflowConfigOverrideCreate) ExecX(ctx context.Context) {
	if err := bwcoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bwcoc *BillingWorkflowConfigOverrideCreate) defaults() {
	if _, ok := bwcoc.mutation.CreatedAt(); !ok {
		v := billingworkflowconfigoverride.DefaultCreatedAt()
		bwcoc.mutation.SetCreatedAt(v)
	}
	if _, ok := bwcoc.mutation.UpdatedAt(); !ok {
		v := billingworkflowconfigoverride.DefaultUpdatedAt()
		bwcoc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bwcoc.mutation.ID(); !ok {
		v := billingworkflowconfigoverride.DefaultID()
		bwcoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bwcoc *BillingWorkflowConfigOverrideCreate) check() error {
	if _, ok := bwcoc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "BillingWorkflowConfigOverride.namespace"`)}
	}
	if v, ok := bwcoc.mutation.Namespace(); ok {
		if err := billingworkflowconfigoverride.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "BillingWorkflowConfigOverride.namespace": %w`, err)}
		}
	}
	if _, ok := bwcoc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "BillingWorkflowConfigOverride.created_at"`)}
	}
	if _, ok := bwcoc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "BillingWorkflowConfigOverride.updated_at"`)}
	}
	return nil
}

func (bwcoc *BillingWorkflowConfigOverrideCreate) sqlSave(ctx context.Context) (*BillingWorkflowConfigOverride, error) {
	if err := bwcoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bwcoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bwcoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BillingWorkflowConfigOverride.ID type: %T", _spec.ID.Value)
		}
	}
	bwcoc.mutation.id = &_node.ID
	bwcoc.mutation.done = true
	return _node, nil
}

func (bwcoc *BillingWorkflowConfigOverrideCreate) createSpec() (*BillingWorkflowConfigOverride, *sqlgraph.CreateSpec) {
	var (
		_node = &BillingWorkflowConfigOverride{config: bwcoc.config}
		_spec = sqlgraph.NewCreateSpec(billingworkflowconfigoverride.Table, sqlgraph.NewFieldSpec(billingworkflowconfigoverride.FieldID, field.TypeString))
	)
	_spec.OnConflict = bwcoc.conflict
	if id, ok := bwcoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bwcoc.mutation.Namespace(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := bwcoc.mutation.CreatedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bwcoc.mutation.UpdatedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bwcoc.mutation.DeletedAt(); ok {
		_spec.SetField(billingworkflowconfigoverride.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingWorkflowConfigOverride.Create().
//		SetNamespace(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingWorkflowConfigOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bwcoc *BillingWorkflowConfigOverrideCreate) OnConflict(opts ...sql.ConflictOption) *BillingWorkflowConfigOverrideUpsertOne {
	bwcoc.conflict = opts
	return &BillingWorkflowConfigOverrideUpsertOne{
		create: bwcoc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bwcoc *BillingWorkflowConfigOverrideCreate) OnConflictColumns(columns ...string) *BillingWorkflowConfigOverrideUpsertOne {
	bwcoc.conflict = append(bwcoc.conflict, sql.ConflictColumns(columns...))
	return &BillingWorkflowConfigOverrideUpsertOne{
		create: bwcoc,
	}
}

type (
	// BillingWorkflowConfigOverrideUpsertOne is the builder for "upsert"-ing
	//  one BillingWorkflowConfigOverride node.
	BillingWorkflowConfigOverrideUpsertOne struct {
		create *BillingWorkflowConfigOverrideCreate
	}

	// BillingWorkflowConfigOverrideUpsert is the "OnConflict" setter.
	BillingWorkflowConfigOverrideUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingWorkflowConfigOverrideUpsert) SetUpdatedAt(v time.Time) *BillingWorkflowConfigOverrideUpsert {
	u.Set(billingworkflowconfigoverride.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsert) UpdateUpdatedAt() *BillingWorkflowConfigOverrideUpsert {
	u.SetExcluded(billingworkflowconfigoverride.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsert) SetDeletedAt(v time.Time) *BillingWorkflowConfigOverrideUpsert {
	u.Set(billingworkflowconfigoverride.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsert) UpdateDeletedAt() *BillingWorkflowConfigOverrideUpsert {
	u.SetExcluded(billingworkflowconfigoverride.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsert) ClearDeletedAt() *BillingWorkflowConfigOverrideUpsert {
	u.SetNull(billingworkflowconfigoverride.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingworkflowconfigoverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingWorkflowConfigOverrideUpsertOne) UpdateNewValues() *BillingWorkflowConfigOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(billingworkflowconfigoverride.FieldID)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(billingworkflowconfigoverride.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(billingworkflowconfigoverride.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BillingWorkflowConfigOverrideUpsertOne) Ignore() *BillingWorkflowConfigOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingWorkflowConfigOverrideUpsertOne) DoNothing() *BillingWorkflowConfigOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingWorkflowConfigOverrideCreate.OnConflict
// documentation for more info.
func (u *BillingWorkflowConfigOverrideUpsertOne) Update(set func(*BillingWorkflowConfigOverrideUpsert)) *BillingWorkflowConfigOverrideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingWorkflowConfigOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingWorkflowConfigOverrideUpsertOne) SetUpdatedAt(v time.Time) *BillingWorkflowConfigOverrideUpsertOne {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsertOne) UpdateUpdatedAt() *BillingWorkflowConfigOverrideUpsertOne {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsertOne) SetDeletedAt(v time.Time) *BillingWorkflowConfigOverrideUpsertOne {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsertOne) UpdateDeletedAt() *BillingWorkflowConfigOverrideUpsertOne {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsertOne) ClearDeletedAt() *BillingWorkflowConfigOverrideUpsertOne {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BillingWorkflowConfigOverrideUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingWorkflowConfigOverrideCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingWorkflowConfigOverrideUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BillingWorkflowConfigOverrideUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: BillingWorkflowConfigOverrideUpsertOne.ID is not supported by MySQL driver. Use BillingWorkflowConfigOverrideUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BillingWorkflowConfigOverrideUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BillingWorkflowConfigOverrideCreateBulk is the builder for creating many BillingWorkflowConfigOverride entities in bulk.
type BillingWorkflowConfigOverrideCreateBulk struct {
	config
	err      error
	builders []*BillingWorkflowConfigOverrideCreate
	conflict []sql.ConflictOption
}

// Save creates the BillingWorkflowConfigOverride entities in the database.
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) Save(ctx context.Context) ([]*BillingWorkflowConfigOverride, error) {
	if bwcocb.err != nil {
		return nil, bwcocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bwcocb.builders))
	nodes := make([]*BillingWorkflowConfigOverride, len(bwcocb.builders))
	mutators := make([]Mutator, len(bwcocb.builders))
	for i := range bwcocb.builders {
		func(i int, root context.Context) {
			builder := bwcocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BillingWorkflowConfigOverrideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bwcocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bwcocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bwcocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bwcocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) SaveX(ctx context.Context) []*BillingWorkflowConfigOverride {
	v, err := bwcocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) Exec(ctx context.Context) error {
	_, err := bwcocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) ExecX(ctx context.Context) {
	if err := bwcocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BillingWorkflowConfigOverride.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BillingWorkflowConfigOverrideUpsert) {
//			SetNamespace(v+v).
//		}).
//		Exec(ctx)
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) OnConflict(opts ...sql.ConflictOption) *BillingWorkflowConfigOverrideUpsertBulk {
	bwcocb.conflict = opts
	return &BillingWorkflowConfigOverrideUpsertBulk{
		create: bwcocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bwcocb *BillingWorkflowConfigOverrideCreateBulk) OnConflictColumns(columns ...string) *BillingWorkflowConfigOverrideUpsertBulk {
	bwcocb.conflict = append(bwcocb.conflict, sql.ConflictColumns(columns...))
	return &BillingWorkflowConfigOverrideUpsertBulk{
		create: bwcocb,
	}
}

// BillingWorkflowConfigOverrideUpsertBulk is the builder for "upsert"-ing
// a bulk of BillingWorkflowConfigOverride nodes.
type BillingWorkflowConfigOverrideUpsertBulk struct {
	create *BillingWorkflowConfigOverrideCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(billingworkflowconfigoverride.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BillingWorkflowConfigOverrideUpsertBulk) UpdateNewValues() *BillingWorkflowConfigOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(billingworkflowconfigoverride.FieldID)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(billingworkflowconfigoverride.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(billingworkflowconfigoverride.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BillingWorkflowConfigOverride.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BillingWorkflowConfigOverrideUpsertBulk) Ignore() *BillingWorkflowConfigOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BillingWorkflowConfigOverrideUpsertBulk) DoNothing() *BillingWorkflowConfigOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BillingWorkflowConfigOverrideCreateBulk.OnConflict
// documentation for more info.
func (u *BillingWorkflowConfigOverrideUpsertBulk) Update(set func(*BillingWorkflowConfigOverrideUpsert)) *BillingWorkflowConfigOverrideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BillingWorkflowConfigOverrideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BillingWorkflowConfigOverrideUpsertBulk) SetUpdatedAt(v time.Time) *BillingWorkflowConfigOverrideUpsertBulk {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsertBulk) UpdateUpdatedAt() *BillingWorkflowConfigOverrideUpsertBulk {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsertBulk) SetDeletedAt(v time.Time) *BillingWorkflowConfigOverrideUpsertBulk {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BillingWorkflowConfigOverrideUpsertBulk) UpdateDeletedAt() *BillingWorkflowConfigOverrideUpsertBulk {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BillingWorkflowConfigOverrideUpsertBulk) ClearDeletedAt() *BillingWorkflowConfigOverrideUpsertBulk {
	return u.Update(func(s *BillingWorkflowConfigOverrideUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *BillingWorkflowConfigOverrideUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the BillingWorkflowConfigOverrideCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for BillingWorkflowConfigOverrideCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BillingWorkflowConfigOverrideUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
