// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CustomerCreate) SetUpdatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CustomerCreate) SetDeletedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableDeletedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *CustomerCreate) SetMetadata(m map[string]string) *CustomerCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetNamespace sets the "namespace" field.
func (cc *CustomerCreate) SetNamespace(s string) *CustomerCreate {
	cc.mutation.SetNamespace(s)
	return cc
}

// SetKey sets the "key" field.
func (cc *CustomerCreate) SetKey(s string) *CustomerCreate {
	cc.mutation.SetKey(s)
	return cc
}

// SetPrimaryEmail sets the "primary_email" field.
func (cc *CustomerCreate) SetPrimaryEmail(s string) *CustomerCreate {
	cc.mutation.SetPrimaryEmail(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(s string) *CustomerCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableID(s *string) *CustomerCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := customer.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := customer.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := customer.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Customer.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Customer.updated_at"`)}
	}
	if _, ok := cc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Customer.namespace"`)}
	}
	if v, ok := cc.mutation.Namespace(); ok {
		if err := customer.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Customer.namespace": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "Customer.key"`)}
	}
	if v, ok := cc.mutation.Key(); ok {
		if err := customer.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Customer.key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PrimaryEmail(); !ok {
		return &ValidationError{Name: "primary_email", err: errors.New(`db: missing required field "Customer.primary_email"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Customer.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cc.mutation.Namespace(); ok {
		_spec.SetField(customer.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := cc.mutation.Key(); ok {
		_spec.SetField(customer.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cc.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
		_node.PrimaryEmail = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsert) SetUpdatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsert) SetDeletedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDeletedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsert) ClearDeletedAt() *CustomerUpsert {
	u.SetNull(customer.FieldDeletedAt)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsert) SetMetadata(v map[string]string) *CustomerUpsert {
	u.Set(customer.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateMetadata() *CustomerUpsert {
	u.SetExcluded(customer.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsert) ClearMetadata() *CustomerUpsert {
	u.SetNull(customer.FieldMetadata)
	return u
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsert) SetPrimaryEmail(v string) *CustomerUpsert {
	u.Set(customer.FieldPrimaryEmail, v)
	return u
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePrimaryEmail() *CustomerUpsert {
	u.SetExcluded(customer.FieldPrimaryEmail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customer.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(customer.FieldNamespace)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(customer.FieldKey)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertOne) SetUpdatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertOne) SetDeletedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertOne) ClearDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertOne) SetMetadata(v map[string]string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertOne) ClearMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertOne) SetPrimaryEmail(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePrimaryEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: CustomerUpsertOne.ID is not supported by MySQL driver. Use CustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customer.FieldCreatedAt)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(customer.FieldNamespace)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(customer.FieldKey)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertBulk) SetUpdatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertBulk) SetDeletedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertBulk) ClearDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertBulk) SetMetadata(v map[string]string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertBulk) ClearMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertBulk) SetPrimaryEmail(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePrimaryEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
