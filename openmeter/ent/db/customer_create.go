// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customer"
	"github.com/openmeterio/openmeter/openmeter/ent/db/customersubjects"
	"github.com/openmeterio/openmeter/pkg/models"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (cc *CustomerCreate) SetName(s string) *CustomerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetKey sets the "key" field.
func (cc *CustomerCreate) SetKey(s string) *CustomerCreate {
	cc.mutation.SetKey(s)
	return cc
}

// SetNamespace sets the "namespace" field.
func (cc *CustomerCreate) SetNamespace(s string) *CustomerCreate {
	cc.mutation.SetNamespace(s)
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *CustomerCreate) SetMetadata(m map[string]string) *CustomerCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CustomerCreate) SetCreatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCreatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CustomerCreate) SetUpdatedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableUpdatedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CustomerCreate) SetDeletedAt(t time.Time) *CustomerCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableDeletedAt(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCurrency sets the "currency" field.
func (cc *CustomerCreate) SetCurrency(mc models.CurrencyCode) *CustomerCreate {
	cc.mutation.SetCurrency(mc)
	return cc
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCurrency(mc *models.CurrencyCode) *CustomerCreate {
	if mc != nil {
		cc.SetCurrency(*mc)
	}
	return cc
}

// SetTaxProvider sets the "tax_provider" field.
func (cc *CustomerCreate) SetTaxProvider(mp models.TaxProvider) *CustomerCreate {
	cc.mutation.SetTaxProvider(mp)
	return cc
}

// SetNillableTaxProvider sets the "tax_provider" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableTaxProvider(mp *models.TaxProvider) *CustomerCreate {
	if mp != nil {
		cc.SetTaxProvider(*mp)
	}
	return cc
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (cc *CustomerCreate) SetInvoicingProvider(mp models.InvoicingProvider) *CustomerCreate {
	cc.mutation.SetInvoicingProvider(mp)
	return cc
}

// SetNillableInvoicingProvider sets the "invoicing_provider" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableInvoicingProvider(mp *models.InvoicingProvider) *CustomerCreate {
	if mp != nil {
		cc.SetInvoicingProvider(*mp)
	}
	return cc
}

// SetPaymentProvider sets the "payment_provider" field.
func (cc *CustomerCreate) SetPaymentProvider(mp models.PaymentProvider) *CustomerCreate {
	cc.mutation.SetPaymentProvider(mp)
	return cc
}

// SetNillablePaymentProvider sets the "payment_provider" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePaymentProvider(mp *models.PaymentProvider) *CustomerCreate {
	if mp != nil {
		cc.SetPaymentProvider(*mp)
	}
	return cc
}

// SetExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field.
func (cc *CustomerCreate) SetExternalMappingStripeCustomerID(s string) *CustomerCreate {
	cc.mutation.SetExternalMappingStripeCustomerID(s)
	return cc
}

// SetNillableExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableExternalMappingStripeCustomerID(s *string) *CustomerCreate {
	if s != nil {
		cc.SetExternalMappingStripeCustomerID(*s)
	}
	return cc
}

// SetPrimaryEmail sets the "primary_email" field.
func (cc *CustomerCreate) SetPrimaryEmail(s string) *CustomerCreate {
	cc.mutation.SetPrimaryEmail(s)
	return cc
}

// SetNillablePrimaryEmail sets the "primary_email" field if the given value is not nil.
func (cc *CustomerCreate) SetNillablePrimaryEmail(s *string) *CustomerCreate {
	if s != nil {
		cc.SetPrimaryEmail(*s)
	}
	return cc
}

// SetAddressCountry sets the "address_country" field.
func (cc *CustomerCreate) SetAddressCountry(s string) *CustomerCreate {
	cc.mutation.SetAddressCountry(s)
	return cc
}

// SetNillableAddressCountry sets the "address_country" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressCountry(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressCountry(*s)
	}
	return cc
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (cc *CustomerCreate) SetAddressPostalCode(s string) *CustomerCreate {
	cc.mutation.SetAddressPostalCode(s)
	return cc
}

// SetNillableAddressPostalCode sets the "address_postal_code" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressPostalCode(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressPostalCode(*s)
	}
	return cc
}

// SetAddressState sets the "address_state" field.
func (cc *CustomerCreate) SetAddressState(s string) *CustomerCreate {
	cc.mutation.SetAddressState(s)
	return cc
}

// SetNillableAddressState sets the "address_state" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressState(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressState(*s)
	}
	return cc
}

// SetAddressCity sets the "address_city" field.
func (cc *CustomerCreate) SetAddressCity(s string) *CustomerCreate {
	cc.mutation.SetAddressCity(s)
	return cc
}

// SetNillableAddressCity sets the "address_city" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressCity(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressCity(*s)
	}
	return cc
}

// SetAddressLine1 sets the "address_line1" field.
func (cc *CustomerCreate) SetAddressLine1(s string) *CustomerCreate {
	cc.mutation.SetAddressLine1(s)
	return cc
}

// SetNillableAddressLine1 sets the "address_line1" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressLine1(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressLine1(*s)
	}
	return cc
}

// SetAddressLine2 sets the "address_line2" field.
func (cc *CustomerCreate) SetAddressLine2(s string) *CustomerCreate {
	cc.mutation.SetAddressLine2(s)
	return cc
}

// SetNillableAddressLine2 sets the "address_line2" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressLine2(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressLine2(*s)
	}
	return cc
}

// SetAddressPhoneNumber sets the "address_phone_number" field.
func (cc *CustomerCreate) SetAddressPhoneNumber(s string) *CustomerCreate {
	cc.mutation.SetAddressPhoneNumber(s)
	return cc
}

// SetNillableAddressPhoneNumber sets the "address_phone_number" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableAddressPhoneNumber(s *string) *CustomerCreate {
	if s != nil {
		cc.SetAddressPhoneNumber(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(s string) *CustomerCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableID(s *string) *CustomerCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// AddSubjectIDs adds the "subjects" edge to the CustomerSubjects entity by IDs.
func (cc *CustomerCreate) AddSubjectIDs(ids ...int) *CustomerCreate {
	cc.mutation.AddSubjectIDs(ids...)
	return cc
}

// AddSubjects adds the "subjects" edges to the CustomerSubjects entity.
func (cc *CustomerCreate) AddSubjects(c ...*CustomerSubjects) *CustomerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddSubjectIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := customer.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := customer.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := customer.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Customer.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := customer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Customer.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "Customer.key"`)}
	}
	if v, ok := cc.mutation.Key(); ok {
		if err := customer.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "Customer.key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Namespace(); !ok {
		return &ValidationError{Name: "namespace", err: errors.New(`db: missing required field "Customer.namespace"`)}
	}
	if v, ok := cc.mutation.Namespace(); ok {
		if err := customer.NamespaceValidator(v); err != nil {
			return &ValidationError{Name: "namespace", err: fmt.Errorf(`db: validator failed for field "Customer.namespace": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Customer.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Customer.updated_at"`)}
	}
	if v, ok := cc.mutation.Currency(); ok {
		if err := customer.CurrencyValidator(string(v)); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`db: validator failed for field "Customer.currency": %w`, err)}
		}
	}
	if v, ok := cc.mutation.TaxProvider(); ok {
		if err := customer.TaxProviderValidator(v); err != nil {
			return &ValidationError{Name: "tax_provider", err: fmt.Errorf(`db: validator failed for field "Customer.tax_provider": %w`, err)}
		}
	}
	if v, ok := cc.mutation.InvoicingProvider(); ok {
		if err := customer.InvoicingProviderValidator(v); err != nil {
			return &ValidationError{Name: "invoicing_provider", err: fmt.Errorf(`db: validator failed for field "Customer.invoicing_provider": %w`, err)}
		}
	}
	if v, ok := cc.mutation.PaymentProvider(); ok {
		if err := customer.PaymentProviderValidator(v); err != nil {
			return &ValidationError{Name: "payment_provider", err: fmt.Errorf(`db: validator failed for field "Customer.payment_provider": %w`, err)}
		}
	}
	if v, ok := cc.mutation.AddressCountry(); ok {
		if err := customer.AddressCountryValidator(v); err != nil {
			return &ValidationError{Name: "address_country", err: fmt.Errorf(`db: validator failed for field "Customer.address_country": %w`, err)}
		}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Customer.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeString))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(customer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Key(); ok {
		_spec.SetField(customer.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cc.mutation.Namespace(); ok {
		_spec.SetField(customer.FieldNamespace, field.TypeString, value)
		_node.Namespace = value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(customer.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(customer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(customer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(customer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Currency(); ok {
		_spec.SetField(customer.FieldCurrency, field.TypeString, value)
		_node.Currency = &value
	}
	if value, ok := cc.mutation.TaxProvider(); ok {
		_spec.SetField(customer.FieldTaxProvider, field.TypeEnum, value)
		_node.TaxProvider = &value
	}
	if value, ok := cc.mutation.InvoicingProvider(); ok {
		_spec.SetField(customer.FieldInvoicingProvider, field.TypeEnum, value)
		_node.InvoicingProvider = &value
	}
	if value, ok := cc.mutation.PaymentProvider(); ok {
		_spec.SetField(customer.FieldPaymentProvider, field.TypeEnum, value)
		_node.PaymentProvider = &value
	}
	if value, ok := cc.mutation.ExternalMappingStripeCustomerID(); ok {
		_spec.SetField(customer.FieldExternalMappingStripeCustomerID, field.TypeString, value)
		_node.ExternalMappingStripeCustomerID = &value
	}
	if value, ok := cc.mutation.PrimaryEmail(); ok {
		_spec.SetField(customer.FieldPrimaryEmail, field.TypeString, value)
		_node.PrimaryEmail = &value
	}
	if value, ok := cc.mutation.AddressCountry(); ok {
		_spec.SetField(customer.FieldAddressCountry, field.TypeString, value)
		_node.AddressCountry = &value
	}
	if value, ok := cc.mutation.AddressPostalCode(); ok {
		_spec.SetField(customer.FieldAddressPostalCode, field.TypeString, value)
		_node.AddressPostalCode = &value
	}
	if value, ok := cc.mutation.AddressState(); ok {
		_spec.SetField(customer.FieldAddressState, field.TypeString, value)
		_node.AddressState = &value
	}
	if value, ok := cc.mutation.AddressCity(); ok {
		_spec.SetField(customer.FieldAddressCity, field.TypeString, value)
		_node.AddressCity = &value
	}
	if value, ok := cc.mutation.AddressLine1(); ok {
		_spec.SetField(customer.FieldAddressLine1, field.TypeString, value)
		_node.AddressLine1 = &value
	}
	if value, ok := cc.mutation.AddressLine2(); ok {
		_spec.SetField(customer.FieldAddressLine2, field.TypeString, value)
		_node.AddressLine2 = &value
	}
	if value, ok := cc.mutation.AddressPhoneNumber(); ok {
		_spec.SetField(customer.FieldAddressPhoneNumber, field.TypeString, value)
		_node.AddressPhoneNumber = &value
	}
	if nodes := cc.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.SubjectsTable,
			Columns: []string{customer.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customersubjects.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertOne {
	cc.conflict = opts
	return &CustomerUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CustomerCreate) OnConflictColumns(columns ...string) *CustomerUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertOne{
		create: cc,
	}
}

type (
	// CustomerUpsertOne is the builder for "upsert"-ing
	//  one Customer node.
	CustomerUpsertOne struct {
		create *CustomerCreate
	}

	// CustomerUpsert is the "OnConflict" setter.
	CustomerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *CustomerUpsert) SetName(v string) *CustomerUpsert {
	u.Set(customer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateName() *CustomerUpsert {
	u.SetExcluded(customer.FieldName)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsert) SetMetadata(v map[string]string) *CustomerUpsert {
	u.Set(customer.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateMetadata() *CustomerUpsert {
	u.SetExcluded(customer.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsert) ClearMetadata() *CustomerUpsert {
	u.SetNull(customer.FieldMetadata)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsert) SetUpdatedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateUpdatedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsert) SetDeletedAt(v time.Time) *CustomerUpsert {
	u.Set(customer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateDeletedAt() *CustomerUpsert {
	u.SetExcluded(customer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsert) ClearDeletedAt() *CustomerUpsert {
	u.SetNull(customer.FieldDeletedAt)
	return u
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsert) SetCurrency(v models.CurrencyCode) *CustomerUpsert {
	u.Set(customer.FieldCurrency, v)
	return u
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateCurrency() *CustomerUpsert {
	u.SetExcluded(customer.FieldCurrency)
	return u
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsert) ClearCurrency() *CustomerUpsert {
	u.SetNull(customer.FieldCurrency)
	return u
}

// SetTaxProvider sets the "tax_provider" field.
func (u *CustomerUpsert) SetTaxProvider(v models.TaxProvider) *CustomerUpsert {
	u.Set(customer.FieldTaxProvider, v)
	return u
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateTaxProvider() *CustomerUpsert {
	u.SetExcluded(customer.FieldTaxProvider)
	return u
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *CustomerUpsert) ClearTaxProvider() *CustomerUpsert {
	u.SetNull(customer.FieldTaxProvider)
	return u
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *CustomerUpsert) SetInvoicingProvider(v models.InvoicingProvider) *CustomerUpsert {
	u.Set(customer.FieldInvoicingProvider, v)
	return u
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateInvoicingProvider() *CustomerUpsert {
	u.SetExcluded(customer.FieldInvoicingProvider)
	return u
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *CustomerUpsert) ClearInvoicingProvider() *CustomerUpsert {
	u.SetNull(customer.FieldInvoicingProvider)
	return u
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *CustomerUpsert) SetPaymentProvider(v models.PaymentProvider) *CustomerUpsert {
	u.Set(customer.FieldPaymentProvider, v)
	return u
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePaymentProvider() *CustomerUpsert {
	u.SetExcluded(customer.FieldPaymentProvider)
	return u
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *CustomerUpsert) ClearPaymentProvider() *CustomerUpsert {
	u.SetNull(customer.FieldPaymentProvider)
	return u
}

// SetExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsert) SetExternalMappingStripeCustomerID(v string) *CustomerUpsert {
	u.Set(customer.FieldExternalMappingStripeCustomerID, v)
	return u
}

// UpdateExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateExternalMappingStripeCustomerID() *CustomerUpsert {
	u.SetExcluded(customer.FieldExternalMappingStripeCustomerID)
	return u
}

// ClearExternalMappingStripeCustomerID clears the value of the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsert) ClearExternalMappingStripeCustomerID() *CustomerUpsert {
	u.SetNull(customer.FieldExternalMappingStripeCustomerID)
	return u
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsert) SetPrimaryEmail(v string) *CustomerUpsert {
	u.Set(customer.FieldPrimaryEmail, v)
	return u
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsert) UpdatePrimaryEmail() *CustomerUpsert {
	u.SetExcluded(customer.FieldPrimaryEmail)
	return u
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsert) ClearPrimaryEmail() *CustomerUpsert {
	u.SetNull(customer.FieldPrimaryEmail)
	return u
}

// SetAddressCountry sets the "address_country" field.
func (u *CustomerUpsert) SetAddressCountry(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressCountry, v)
	return u
}

// UpdateAddressCountry sets the "address_country" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressCountry() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressCountry)
	return u
}

// ClearAddressCountry clears the value of the "address_country" field.
func (u *CustomerUpsert) ClearAddressCountry() *CustomerUpsert {
	u.SetNull(customer.FieldAddressCountry)
	return u
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (u *CustomerUpsert) SetAddressPostalCode(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressPostalCode, v)
	return u
}

// UpdateAddressPostalCode sets the "address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressPostalCode() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressPostalCode)
	return u
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (u *CustomerUpsert) ClearAddressPostalCode() *CustomerUpsert {
	u.SetNull(customer.FieldAddressPostalCode)
	return u
}

// SetAddressState sets the "address_state" field.
func (u *CustomerUpsert) SetAddressState(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressState, v)
	return u
}

// UpdateAddressState sets the "address_state" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressState() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressState)
	return u
}

// ClearAddressState clears the value of the "address_state" field.
func (u *CustomerUpsert) ClearAddressState() *CustomerUpsert {
	u.SetNull(customer.FieldAddressState)
	return u
}

// SetAddressCity sets the "address_city" field.
func (u *CustomerUpsert) SetAddressCity(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressCity, v)
	return u
}

// UpdateAddressCity sets the "address_city" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressCity() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressCity)
	return u
}

// ClearAddressCity clears the value of the "address_city" field.
func (u *CustomerUpsert) ClearAddressCity() *CustomerUpsert {
	u.SetNull(customer.FieldAddressCity)
	return u
}

// SetAddressLine1 sets the "address_line1" field.
func (u *CustomerUpsert) SetAddressLine1(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressLine1, v)
	return u
}

// UpdateAddressLine1 sets the "address_line1" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressLine1() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressLine1)
	return u
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (u *CustomerUpsert) ClearAddressLine1() *CustomerUpsert {
	u.SetNull(customer.FieldAddressLine1)
	return u
}

// SetAddressLine2 sets the "address_line2" field.
func (u *CustomerUpsert) SetAddressLine2(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressLine2, v)
	return u
}

// UpdateAddressLine2 sets the "address_line2" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressLine2() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressLine2)
	return u
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (u *CustomerUpsert) ClearAddressLine2() *CustomerUpsert {
	u.SetNull(customer.FieldAddressLine2)
	return u
}

// SetAddressPhoneNumber sets the "address_phone_number" field.
func (u *CustomerUpsert) SetAddressPhoneNumber(v string) *CustomerUpsert {
	u.Set(customer.FieldAddressPhoneNumber, v)
	return u
}

// UpdateAddressPhoneNumber sets the "address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsert) UpdateAddressPhoneNumber() *CustomerUpsert {
	u.SetExcluded(customer.FieldAddressPhoneNumber)
	return u
}

// ClearAddressPhoneNumber clears the value of the "address_phone_number" field.
func (u *CustomerUpsert) ClearAddressPhoneNumber() *CustomerUpsert {
	u.SetNull(customer.FieldAddressPhoneNumber)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertOne) UpdateNewValues() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(customer.FieldID)
		}
		if _, exists := u.create.mutation.Key(); exists {
			s.SetIgnore(customer.FieldKey)
		}
		if _, exists := u.create.mutation.Namespace(); exists {
			s.SetIgnore(customer.FieldNamespace)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(customer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CustomerUpsertOne) Ignore() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertOne) DoNothing() *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreate.OnConflict
// documentation for more info.
func (u *CustomerUpsertOne) Update(set func(*CustomerUpsert)) *CustomerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsertOne) SetName(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateName() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertOne) SetMetadata(v map[string]string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertOne) ClearMetadata() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertOne) SetUpdatedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateUpdatedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertOne) SetDeletedAt(v time.Time) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertOne) ClearDeletedAt() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsertOne) SetCurrency(v models.CurrencyCode) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateCurrency() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsertOne) ClearCurrency() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCurrency()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *CustomerUpsertOne) SetTaxProvider(v models.TaxProvider) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateTaxProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTaxProvider()
	})
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *CustomerUpsertOne) ClearTaxProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTaxProvider()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *CustomerUpsertOne) SetInvoicingProvider(v models.InvoicingProvider) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateInvoicingProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *CustomerUpsertOne) ClearInvoicingProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearInvoicingProvider()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *CustomerUpsertOne) SetPaymentProvider(v models.PaymentProvider) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePaymentProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePaymentProvider()
	})
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *CustomerUpsertOne) ClearPaymentProvider() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPaymentProvider()
	})
}

// SetExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsertOne) SetExternalMappingStripeCustomerID(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetExternalMappingStripeCustomerID(v)
	})
}

// UpdateExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateExternalMappingStripeCustomerID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateExternalMappingStripeCustomerID()
	})
}

// ClearExternalMappingStripeCustomerID clears the value of the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsertOne) ClearExternalMappingStripeCustomerID() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearExternalMappingStripeCustomerID()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertOne) SetPrimaryEmail(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdatePrimaryEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsertOne) ClearPrimaryEmail() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPrimaryEmail()
	})
}

// SetAddressCountry sets the "address_country" field.
func (u *CustomerUpsertOne) SetAddressCountry(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressCountry(v)
	})
}

// UpdateAddressCountry sets the "address_country" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressCountry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressCountry()
	})
}

// ClearAddressCountry clears the value of the "address_country" field.
func (u *CustomerUpsertOne) ClearAddressCountry() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressCountry()
	})
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (u *CustomerUpsertOne) SetAddressPostalCode(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressPostalCode(v)
	})
}

// UpdateAddressPostalCode sets the "address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressPostalCode() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressPostalCode()
	})
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (u *CustomerUpsertOne) ClearAddressPostalCode() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressPostalCode()
	})
}

// SetAddressState sets the "address_state" field.
func (u *CustomerUpsertOne) SetAddressState(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressState(v)
	})
}

// UpdateAddressState sets the "address_state" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressState() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressState()
	})
}

// ClearAddressState clears the value of the "address_state" field.
func (u *CustomerUpsertOne) ClearAddressState() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressState()
	})
}

// SetAddressCity sets the "address_city" field.
func (u *CustomerUpsertOne) SetAddressCity(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressCity(v)
	})
}

// UpdateAddressCity sets the "address_city" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressCity() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressCity()
	})
}

// ClearAddressCity clears the value of the "address_city" field.
func (u *CustomerUpsertOne) ClearAddressCity() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressCity()
	})
}

// SetAddressLine1 sets the "address_line1" field.
func (u *CustomerUpsertOne) SetAddressLine1(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressLine1(v)
	})
}

// UpdateAddressLine1 sets the "address_line1" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressLine1() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressLine1()
	})
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (u *CustomerUpsertOne) ClearAddressLine1() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressLine1()
	})
}

// SetAddressLine2 sets the "address_line2" field.
func (u *CustomerUpsertOne) SetAddressLine2(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressLine2(v)
	})
}

// UpdateAddressLine2 sets the "address_line2" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressLine2() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressLine2()
	})
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (u *CustomerUpsertOne) ClearAddressLine2() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressLine2()
	})
}

// SetAddressPhoneNumber sets the "address_phone_number" field.
func (u *CustomerUpsertOne) SetAddressPhoneNumber(v string) *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressPhoneNumber(v)
	})
}

// UpdateAddressPhoneNumber sets the "address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsertOne) UpdateAddressPhoneNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressPhoneNumber()
	})
}

// ClearAddressPhoneNumber clears the value of the "address_phone_number" field.
func (u *CustomerUpsertOne) ClearAddressPhoneNumber() *CustomerUpsertOne {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressPhoneNumber()
	})
}

// Exec executes the query.
func (u *CustomerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CustomerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("db: CustomerUpsertOne.ID is not supported by MySQL driver. Use CustomerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CustomerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
	conflict []sql.ConflictOption
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Customer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CustomerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflict(opts ...sql.ConflictOption) *CustomerUpsertBulk {
	ccb.conflict = opts
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CustomerCreateBulk) OnConflictColumns(columns ...string) *CustomerUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CustomerUpsertBulk{
		create: ccb,
	}
}

// CustomerUpsertBulk is the builder for "upsert"-ing
// a bulk of Customer nodes.
type CustomerUpsertBulk struct {
	create *CustomerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(customer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CustomerUpsertBulk) UpdateNewValues() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(customer.FieldID)
			}
			if _, exists := b.mutation.Key(); exists {
				s.SetIgnore(customer.FieldKey)
			}
			if _, exists := b.mutation.Namespace(); exists {
				s.SetIgnore(customer.FieldNamespace)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(customer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Customer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CustomerUpsertBulk) Ignore() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CustomerUpsertBulk) DoNothing() *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CustomerCreateBulk.OnConflict
// documentation for more info.
func (u *CustomerUpsertBulk) Update(set func(*CustomerUpsert)) *CustomerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CustomerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *CustomerUpsertBulk) SetName(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateName() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateName()
	})
}

// SetMetadata sets the "metadata" field.
func (u *CustomerUpsertBulk) SetMetadata(v map[string]string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *CustomerUpsertBulk) ClearMetadata() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearMetadata()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CustomerUpsertBulk) SetUpdatedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateUpdatedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CustomerUpsertBulk) SetDeletedAt(v time.Time) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CustomerUpsertBulk) ClearDeletedAt() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCurrency sets the "currency" field.
func (u *CustomerUpsertBulk) SetCurrency(v models.CurrencyCode) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetCurrency(v)
	})
}

// UpdateCurrency sets the "currency" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateCurrency() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateCurrency()
	})
}

// ClearCurrency clears the value of the "currency" field.
func (u *CustomerUpsertBulk) ClearCurrency() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearCurrency()
	})
}

// SetTaxProvider sets the "tax_provider" field.
func (u *CustomerUpsertBulk) SetTaxProvider(v models.TaxProvider) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetTaxProvider(v)
	})
}

// UpdateTaxProvider sets the "tax_provider" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateTaxProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateTaxProvider()
	})
}

// ClearTaxProvider clears the value of the "tax_provider" field.
func (u *CustomerUpsertBulk) ClearTaxProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearTaxProvider()
	})
}

// SetInvoicingProvider sets the "invoicing_provider" field.
func (u *CustomerUpsertBulk) SetInvoicingProvider(v models.InvoicingProvider) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetInvoicingProvider(v)
	})
}

// UpdateInvoicingProvider sets the "invoicing_provider" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateInvoicingProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateInvoicingProvider()
	})
}

// ClearInvoicingProvider clears the value of the "invoicing_provider" field.
func (u *CustomerUpsertBulk) ClearInvoicingProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearInvoicingProvider()
	})
}

// SetPaymentProvider sets the "payment_provider" field.
func (u *CustomerUpsertBulk) SetPaymentProvider(v models.PaymentProvider) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPaymentProvider(v)
	})
}

// UpdatePaymentProvider sets the "payment_provider" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePaymentProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePaymentProvider()
	})
}

// ClearPaymentProvider clears the value of the "payment_provider" field.
func (u *CustomerUpsertBulk) ClearPaymentProvider() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPaymentProvider()
	})
}

// SetExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsertBulk) SetExternalMappingStripeCustomerID(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetExternalMappingStripeCustomerID(v)
	})
}

// UpdateExternalMappingStripeCustomerID sets the "external_mapping_stripe_customer_id" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateExternalMappingStripeCustomerID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateExternalMappingStripeCustomerID()
	})
}

// ClearExternalMappingStripeCustomerID clears the value of the "external_mapping_stripe_customer_id" field.
func (u *CustomerUpsertBulk) ClearExternalMappingStripeCustomerID() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearExternalMappingStripeCustomerID()
	})
}

// SetPrimaryEmail sets the "primary_email" field.
func (u *CustomerUpsertBulk) SetPrimaryEmail(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetPrimaryEmail(v)
	})
}

// UpdatePrimaryEmail sets the "primary_email" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdatePrimaryEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdatePrimaryEmail()
	})
}

// ClearPrimaryEmail clears the value of the "primary_email" field.
func (u *CustomerUpsertBulk) ClearPrimaryEmail() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearPrimaryEmail()
	})
}

// SetAddressCountry sets the "address_country" field.
func (u *CustomerUpsertBulk) SetAddressCountry(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressCountry(v)
	})
}

// UpdateAddressCountry sets the "address_country" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressCountry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressCountry()
	})
}

// ClearAddressCountry clears the value of the "address_country" field.
func (u *CustomerUpsertBulk) ClearAddressCountry() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressCountry()
	})
}

// SetAddressPostalCode sets the "address_postal_code" field.
func (u *CustomerUpsertBulk) SetAddressPostalCode(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressPostalCode(v)
	})
}

// UpdateAddressPostalCode sets the "address_postal_code" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressPostalCode() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressPostalCode()
	})
}

// ClearAddressPostalCode clears the value of the "address_postal_code" field.
func (u *CustomerUpsertBulk) ClearAddressPostalCode() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressPostalCode()
	})
}

// SetAddressState sets the "address_state" field.
func (u *CustomerUpsertBulk) SetAddressState(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressState(v)
	})
}

// UpdateAddressState sets the "address_state" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressState() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressState()
	})
}

// ClearAddressState clears the value of the "address_state" field.
func (u *CustomerUpsertBulk) ClearAddressState() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressState()
	})
}

// SetAddressCity sets the "address_city" field.
func (u *CustomerUpsertBulk) SetAddressCity(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressCity(v)
	})
}

// UpdateAddressCity sets the "address_city" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressCity() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressCity()
	})
}

// ClearAddressCity clears the value of the "address_city" field.
func (u *CustomerUpsertBulk) ClearAddressCity() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressCity()
	})
}

// SetAddressLine1 sets the "address_line1" field.
func (u *CustomerUpsertBulk) SetAddressLine1(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressLine1(v)
	})
}

// UpdateAddressLine1 sets the "address_line1" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressLine1() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressLine1()
	})
}

// ClearAddressLine1 clears the value of the "address_line1" field.
func (u *CustomerUpsertBulk) ClearAddressLine1() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressLine1()
	})
}

// SetAddressLine2 sets the "address_line2" field.
func (u *CustomerUpsertBulk) SetAddressLine2(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressLine2(v)
	})
}

// UpdateAddressLine2 sets the "address_line2" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressLine2() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressLine2()
	})
}

// ClearAddressLine2 clears the value of the "address_line2" field.
func (u *CustomerUpsertBulk) ClearAddressLine2() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressLine2()
	})
}

// SetAddressPhoneNumber sets the "address_phone_number" field.
func (u *CustomerUpsertBulk) SetAddressPhoneNumber(v string) *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.SetAddressPhoneNumber(v)
	})
}

// UpdateAddressPhoneNumber sets the "address_phone_number" field to the value that was provided on create.
func (u *CustomerUpsertBulk) UpdateAddressPhoneNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.UpdateAddressPhoneNumber()
	})
}

// ClearAddressPhoneNumber clears the value of the "address_phone_number" field.
func (u *CustomerUpsertBulk) ClearAddressPhoneNumber() *CustomerUpsertBulk {
	return u.Update(func(s *CustomerUpsert) {
		s.ClearAddressPhoneNumber()
	})
}

// Exec executes the query.
func (u *CustomerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the CustomerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for CustomerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CustomerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
