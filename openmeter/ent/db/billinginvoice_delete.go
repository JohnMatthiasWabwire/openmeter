// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoice"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceDelete is the builder for deleting a BillingInvoice entity.
type BillingInvoiceDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceMutation
}

// Where appends a list predicates to the BillingInvoiceDelete builder.
func (bid *BillingInvoiceDelete) Where(ps ...predicate.BillingInvoice) *BillingInvoiceDelete {
	bid.mutation.Where(ps...)
	return bid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bid *BillingInvoiceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bid.sqlExec, bid.mutation, bid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bid *BillingInvoiceDelete) ExecX(ctx context.Context) int {
	n, err := bid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bid *BillingInvoiceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoice.Table, sqlgraph.NewFieldSpec(billinginvoice.FieldID, field.TypeString))
	if ps := bid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bid.mutation.done = true
	return affected, err
}

// BillingInvoiceDeleteOne is the builder for deleting a single BillingInvoice entity.
type BillingInvoiceDeleteOne struct {
	bid *BillingInvoiceDelete
}

// Where appends a list predicates to the BillingInvoiceDelete builder.
func (bido *BillingInvoiceDeleteOne) Where(ps ...predicate.BillingInvoice) *BillingInvoiceDeleteOne {
	bido.bid.mutation.Where(ps...)
	return bido
}

// Exec executes the deletion query.
func (bido *BillingInvoiceDeleteOne) Exec(ctx context.Context) error {
	n, err := bido.bid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bido *BillingInvoiceDeleteOne) ExecX(ctx context.Context) {
	if err := bido.Exec(ctx); err != nil {
		panic(err)
	}
}
