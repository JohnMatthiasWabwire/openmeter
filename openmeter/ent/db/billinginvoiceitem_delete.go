// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openmeterio/openmeter/openmeter/ent/db/billinginvoiceitem"
	"github.com/openmeterio/openmeter/openmeter/ent/db/predicate"
)

// BillingInvoiceItemDelete is the builder for deleting a BillingInvoiceItem entity.
type BillingInvoiceItemDelete struct {
	config
	hooks    []Hook
	mutation *BillingInvoiceItemMutation
}

// Where appends a list predicates to the BillingInvoiceItemDelete builder.
func (biid *BillingInvoiceItemDelete) Where(ps ...predicate.BillingInvoiceItem) *BillingInvoiceItemDelete {
	biid.mutation.Where(ps...)
	return biid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (biid *BillingInvoiceItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, biid.sqlExec, biid.mutation, biid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (biid *BillingInvoiceItemDelete) ExecX(ctx context.Context) int {
	n, err := biid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (biid *BillingInvoiceItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(billinginvoiceitem.Table, sqlgraph.NewFieldSpec(billinginvoiceitem.FieldID, field.TypeString))
	if ps := biid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, biid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	biid.mutation.done = true
	return affected, err
}

// BillingInvoiceItemDeleteOne is the builder for deleting a single BillingInvoiceItem entity.
type BillingInvoiceItemDeleteOne struct {
	biid *BillingInvoiceItemDelete
}

// Where appends a list predicates to the BillingInvoiceItemDelete builder.
func (biido *BillingInvoiceItemDeleteOne) Where(ps ...predicate.BillingInvoiceItem) *BillingInvoiceItemDeleteOne {
	biido.biid.mutation.Where(ps...)
	return biido
}

// Exec executes the deletion query.
func (biido *BillingInvoiceItemDeleteOne) Exec(ctx context.Context) error {
	n, err := biido.biid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{billinginvoiceitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (biido *BillingInvoiceItemDeleteOne) ExecX(ctx context.Context) {
	if err := biido.Exec(ctx); err != nil {
		panic(err)
	}
}
