// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateCreditGrant Grants are used to increase balance of specific subjects.
type CreateCreditGrant = credit.Grant

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrant Grants are used to increase balance of specific subjects.
type CreditGrant = credit.Grant

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// CreditQueryLimit defines model for creditQueryLimit.
type CreditQueryLimit = int

// CreditSubjectId defines model for creditSubjectId.
type CreditSubjectId = string

// FeatureId defines model for featureId.
type FeatureId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsBySubjectParams defines parameters for ListCreditGrantsBySubject.
type ListCreditGrantsBySubjectParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditHistoryParams defines parameters for GetCreditHistory.
type GetCreditHistoryParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreateCreditGrant

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List credit grants for multiple subjects
	// (GET /api/v1/ledgers/grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{creditSubjectId}/balance)
	GetCreditBalance(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/ledgers/{creditSubjectId}/grants)
	ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params ListCreditGrantsBySubjectParams)
	// Create credit grant
	// (POST /api/v1/ledgers/{creditSubjectId}/grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId)
	// Void credit grant
	// (DELETE /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId)
	// Get credit grant.
	// (GET /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/ledgers/{creditSubjectId}/history)
	GetCreditHistory(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditHistoryParams)
	// Reset credit balance
	// (POST /api/v1/ledgers/{creditSubjectId}/reset)
	ResetCredit(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants for multiple subjects
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{creditSubjectId}/balance)
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/ledgers/{creditSubjectId}/grants)
func (_ Unimplemented) ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params ListCreditGrantsBySubjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/ledgers/{creditSubjectId}/grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit grant.
// (GET /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/ledgers/{creditSubjectId}/history)
func (_ Unimplemented) GetCreditHistory(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/ledgers/{creditSubjectId}/reset)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrantsBySubject operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsBySubjectParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrantsBySubject(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r, creditSubjectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditSubjectId, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditSubjectId, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCreditHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditHistory(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r, creditSubjectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/balance", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants", wrapper.ListCreditGrantsBySubject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/history", wrapper.GetCreditHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/reset", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
