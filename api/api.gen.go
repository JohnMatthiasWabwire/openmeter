// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/oklog/ulid/v2"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateCreditGrantRequest Grants are used to increase balance of specific subjects.
type CreateCreditGrantRequest = credit.Grant

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantResponse defines model for CreditGrantResponse.
type CreditGrantResponse = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantID defines model for creditGrantID.
type CreditGrantID = ulid.ULID

// CreditQueryLimit defines model for creditQueryLimit.
type CreditQueryLimit = int

// FeatureID defines model for featureID.
type FeatureID = ulid.ULID

// LedgerID defines model for ledgerID.
type LedgerID = ulid.ULID

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = ulid.ULID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsByLedgerParams defines parameters for ListCreditGrantsByLedger.
type ListCreditGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditHistoryParams defines parameters for GetCreditHistory.
type GetCreditHistoryParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreateCreditGrantRequest

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List credit grants for multiple ledgers
	// (GET /api/v1/ledgers/grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams)
	// Create credit grant
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void credit grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams)
	// Reset credit balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants for multiple ledgers
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCreditHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListCreditGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetCreditHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ftxd3P1vAAAA///9fXFmVMgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
