// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/oklog/ulid/v2"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateCreditGrantRequest Grants are used to increase balance of specific subjects.
type CreateCreditGrantRequest = credit.Grant

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantResponse defines model for CreditGrantResponse.
type CreditGrantResponse = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantID defines model for creditGrantID.
type CreditGrantID = ulid.ULID

// CreditQueryLimit defines model for creditQueryLimit.
type CreditQueryLimit = int

// FeatureID defines model for featureID.
type FeatureID = ulid.ULID

// LedgerID defines model for ledgerID.
type LedgerID = ulid.ULID

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = ulid.ULID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsByLedgerParams defines parameters for ListCreditGrantsByLedger.
type ListCreditGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditHistoryParams defines parameters for GetCreditHistory.
type GetCreditHistoryParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreateCreditGrantRequest

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List credit grants for multiple ledgers
	// (GET /api/v1/ledgers/grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams)
	// Create credit grant
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void credit grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID)
	// Get credit ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams)
	// Reset credit balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants for multiple ledgers
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListCreditGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{creditGrantID})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, creditGrantID CreditGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetCreditHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetCreditHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantID" -------------
	var creditGrantID CreditGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantID", chi.URLParam(r, "creditGrantID"), &creditGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, ledgerID, creditGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCreditHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListCreditGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{creditGrantID}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetCreditHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pxTk7uLufwMAAP//QZEUY8vIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
