// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateCreditGrantRequest Grants are used to increase balance of specific subjects.
type CreateCreditGrantRequest = credit.Grant

// CreditBalance Credit balance of a subject.
type CreditBalance = credit.Balance

// CreditExpirationPeriod Expiration period of a credit grant.
type CreditExpirationPeriod = credit.ExpirationPeriod

// CreditGrantBalance defines model for CreditGrantBalance.
type CreditGrantBalance = credit.Grant

// CreditGrantResponse defines model for CreditGrantResponse.
type CreditGrantResponse = credit.Grant

// CreditGrantRollover Grant rollover configuration.
type CreditGrantRollover = credit.GrantRollover

// CreditGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type CreditGrantRolloverType = credit.GrantRolloverType

// CreditGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type CreditGrantType = credit.GrantType

// CreditLedgerEntry Credit ledger entry.
type CreditLedgerEntry = credit.LedgerEntry

// CreditLedgerEntryType defines model for CreditLedgerEntryType.
type CreditLedgerEntryType = credit.LedgerEntryType

// CreditReset Credit reset configuration.
type CreditReset = credit.Reset

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// CreditGrantId defines model for creditGrantId.
type CreditGrantId = string

// CreditQueryLimit defines model for creditQueryLimit.
type CreditQueryLimit = int

// CreditSubjectId defines model for creditSubjectId.
type CreditSubjectId = string

// FeatureId defines model for featureId.
type FeatureId = string

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListCreditGrantsParams defines parameters for ListCreditGrants.
type ListCreditGrantsParams struct {
	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditBalanceParams defines parameters for GetCreditBalance.
type GetCreditBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListCreditGrantsBySubjectParams defines parameters for ListCreditGrantsBySubject.
type ListCreditGrantsBySubjectParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetCreditHistoryParams defines parameters for GetCreditHistory.
type GetCreditHistoryParams struct {
	// Limit Number of entries to return
	Limit *CreditQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering and group by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateCreditGrantJSONRequestBody defines body for CreateCreditGrant for application/json ContentType.
type CreateCreditGrantJSONRequestBody = CreateCreditGrantRequest

// ResetCreditJSONRequestBody defines body for ResetCredit for application/json ContentType.
type ResetCreditJSONRequestBody = CreditReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureId})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// Get feature
	// (GET /api/v1/features/{featureId})
	GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId)
	// List credit grants for multiple subjects
	// (GET /api/v1/ledgers/grants)
	ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{creditSubjectId}/balance)
	GetCreditBalance(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditBalanceParams)
	// List credit grants
	// (GET /api/v1/ledgers/{creditSubjectId}/grants)
	ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params ListCreditGrantsBySubjectParams)
	// Create credit grant
	// (POST /api/v1/ledgers/{creditSubjectId}/grants)
	CreateCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId)
	// Void credit grant
	// (DELETE /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
	VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId)
	// Get credit grant.
	// (GET /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
	GetCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId)
	// Get credit ledger
	// (GET /api/v1/ledgers/{creditSubjectId}/history)
	GetCreditHistory(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditHistoryParams)
	// Reset credit balance
	// (POST /api/v1/ledgers/{creditSubjectId}/reset)
	ResetCredit(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureId})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureId})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureId FeatureId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants for multiple subjects
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListCreditGrants(w http.ResponseWriter, r *http.Request, params ListCreditGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{creditSubjectId}/balance)
func (_ Unimplemented) GetCreditBalance(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List credit grants
// (GET /api/v1/ledgers/{creditSubjectId}/grants)
func (_ Unimplemented) ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params ListCreditGrantsBySubjectParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create credit grant
// (POST /api/v1/ledgers/{creditSubjectId}/grants)
func (_ Unimplemented) CreateCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void credit grant
// (DELETE /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
func (_ Unimplemented) VoidCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit grant.
// (GET /api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId})
func (_ Unimplemented) GetCreditGrant(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, creditGrantId CreditGrantId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get credit ledger
// (GET /api/v1/ledgers/{creditSubjectId}/history)
func (_ Unimplemented) GetCreditHistory(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId, params GetCreditHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset credit balance
// (POST /api/v1/ledgers/{creditSubjectId}/reset)
func (_ Unimplemented) ResetCredit(w http.ResponseWriter, r *http.Request, creditSubjectId CreditSubjectId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureId" -------------
	var featureId FeatureId

	err = runtime.BindStyledParameterWithOptions("simple", "featureId", chi.URLParam(r, "featureId"), &featureId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrants operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditBalance operation middleware
func (siw *ServerInterfaceWrapper) GetCreditBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditBalance(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCreditGrantsBySubject operation middleware
func (siw *ServerInterfaceWrapper) ListCreditGrantsBySubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCreditGrantsBySubjectParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCreditGrantsBySubject(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCreditGrant(w, r, creditSubjectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidCreditGrant(w, r, creditSubjectId, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditGrant operation middleware
func (siw *ServerInterfaceWrapper) GetCreditGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	// ------------- Path parameter "creditGrantId" -------------
	var creditGrantId CreditGrantId

	err = runtime.BindStyledParameterWithOptions("simple", "creditGrantId", chi.URLParam(r, "creditGrantId"), &creditGrantId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditGrantId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditGrant(w, r, creditSubjectId, creditGrantId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCreditHistory operation middleware
func (siw *ServerInterfaceWrapper) GetCreditHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCreditHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCreditHistory(w, r, creditSubjectId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetCredit operation middleware
func (siw *ServerInterfaceWrapper) ResetCredit(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "creditSubjectId" -------------
	var creditSubjectId CreditSubjectId

	err = runtime.BindStyledParameterWithOptions("simple", "creditSubjectId", chi.URLParam(r, "creditSubjectId"), &creditSubjectId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "creditSubjectId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetCredit(w, r, creditSubjectId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureId}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureId}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListCreditGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/balance", wrapper.GetCreditBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants", wrapper.ListCreditGrantsBySubject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants", wrapper.CreateCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId}", wrapper.VoidCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/grants/{creditGrantId}", wrapper.GetCreditGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/history", wrapper.GetCreditHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{creditSubjectId}/reset", wrapper.ResetCredit)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
