// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/internal/credit"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// CreateLedger A ledger represented in open meter. A ledger must be assigned to a single
// subject.
type CreateLedger = credit.Ledger

// CreateLedgerGrantRequest Grants are used to increase balance of specific subjects.
type CreateLedgerGrantRequest = credit.Grant

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// Feature A feature is a feature or service offered to a customer.
// For example: CPU-Hours, Tokens, API Calls, etc.
type Feature = credit.Feature

// FeatureBalance defines model for FeatureBalance.
type FeatureBalance = credit.Feature

// IdOrSlug A unique identifier.
type IdOrSlug = string

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event           Event   `json:"event"`
	ValidationError *string `json:"validationError,omitempty"`
}

// Ledger defines model for Ledger.
type Ledger = credit.Ledger

// LedgerAlreadyExistsProblem Ledger Exists
type LedgerAlreadyExistsProblem = credit.LedgerAlreadyExistsProblemResponse

// LedgerBalance Balance of a subject.
type LedgerBalance = credit.Balance

// LedgerEntry A ledger entry.
type LedgerEntry = credit.LedgerEntry

// LedgerEntryType defines model for LedgerEntryType.
type LedgerEntryType = credit.LedgerEntryType

// LedgerGrantBalance defines model for LedgerGrantBalance.
type LedgerGrantBalance = credit.Grant

// LedgerGrantExpirationPeriod Expiration period of a ledger grant.
type LedgerGrantExpirationPeriod = credit.ExpirationPeriod

// LedgerGrantResponse defines model for LedgerGrantResponse.
type LedgerGrantResponse = credit.Grant

// LedgerGrantRollover Grant rollover configuration.
type LedgerGrantRollover = credit.GrantRollover

// LedgerGrantRolloverType The rollover type to use:
// - `REMAINING_AMOUNT` - Rollover remaining amount.
// - `ORIGINAL_AMOUNT` - Rollover re-applies the full grant amount.
type LedgerGrantRolloverType = credit.GrantRolloverType

// LedgerGrantType The grant type:
// - `USAGE` - Increase balance by the amount in the unit of the associated meter.
type LedgerGrantType = credit.GrantType

// LedgerReset Ledger reset configuration.
type LedgerReset = credit.Reset

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`
	From *time.Time      `json:"from,omitempty"`
	To   *time.Time      `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// Period A time period
type Period = credit.Period

// PortalToken A consumer portal token.
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed
	AllowedMeterSlugs *[]string  `json:"allowedMeterSlugs,omitempty"`
	CreatedAt         *time.Time `json:"createdAt,omitempty"`
	Expired           *bool      `json:"expired,omitempty"`
	ExpiresAt         *time.Time `json:"expiresAt,omitempty"`
	Id                *string    `json:"id,omitempty"`
	Subject           string     `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// Problem A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type Problem = models.StatusProblem

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	CurrentPeriodEnd   *time.Time              `json:"currentPeriodEnd"`
	CurrentPeriodStart *time.Time              `json:"currentPeriodStart"`
	DisplayName        *string                 `json:"displayName"`
	Id                 *string                 `json:"id,omitempty"`
	Key                string                  `json:"key"`
	Metadata           *map[string]interface{} `json:"metadata"`
	StripeCustomerId   *string                 `json:"stripeCustomerId"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// FeatureID defines model for featureID.
type FeatureID = credit.FeatureID

// LedgerGrantID defines model for ledgerGrantID.
type LedgerGrantID = credit.GrantID

// LedgerID defines model for ledgerID.
type LedgerID = credit.LedgerID

// LedgerQueryLimit defines model for ledgerQueryLimit.
type LedgerQueryLimit = int

// MeterIdOrSlug A unique identifier.
type MeterIdOrSlug = IdOrSlug

// QueryFilterGroupBy Simple filter for group bys with exact match.
//
// Usage: `?filterGroupBy[type]=input&filterGroupBy[model]=gpt-4`
type QueryFilterGroupBy map[string]string

// QueryFilterLedgerID defines model for queryFilterLedgerID.
type QueryFilterLedgerID = credit.LedgerID

// QueryFilterSubject defines model for queryFilterSubject.
type QueryFilterSubject = []string

// QueryFrom defines model for queryFrom.
type QueryFrom = time.Time

// QueryGroupBy defines model for queryGroupBy.
type QueryGroupBy = []string

// QueryTo defines model for queryTo.
type QueryTo = time.Time

// QueryWindowSize Aggregation window size.
type QueryWindowSize = WindowSize

// QueryWindowTimeZone defines model for queryWindowTimeZone.
type QueryWindowTimeZone = string

// SubjectIdOrKey defines model for subjectIdOrKey.
type SubjectIdOrKey = string

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = Problem

// LedgerAlreadyExistsProblemResponse Ledger Exists
type LedgerAlreadyExistsProblemResponse = LedgerAlreadyExistsProblem

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = Problem

// NotImplementedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotImplementedProblemResponse = Problem

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = Problem

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = Problem

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListLedgersParams defines parameters for ListLedgers.
type ListLedgersParams struct {
	// Subject Query a specific ledger
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Limit Number of ledgers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Start returning ledgers from this offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListLedgerGrantsParams defines parameters for ListLedgerGrants.
type ListLedgerGrantsParams struct {
	// LedgerID Filtering and group by multiple subjects.
	//
	// Usage: `?ledgerID=01HX6VK5C498B3ABY9PR1069PP`
	LedgerID *QueryFilterLedgerID `form:"ledgerID,omitempty" json:"ledgerID,omitempty"`

	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerBalanceParams defines parameters for GetLedgerBalance.
type GetLedgerBalanceParams struct {
	// Time Point of time to query balances: date-time in RFC 3339 format. Defaults to now.
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// ListLedgerGrantsByLedgerParams defines parameters for ListLedgerGrantsByLedger.
type ListLedgerGrantsByLedgerParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetLedgerHistoryParams defines parameters for GetLedgerHistory.
type GetLedgerHistoryParams struct {
	// Limit Number of entries to return
	Limit *LedgerQueryLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// From Start of time range to query ledger: date-time in RFC 3339 format.
	From time.Time `form:"from" json:"from"`

	// To End of time range to query ledger: date-time in RFC 3339 format. Defaults to now.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: ?subject=customer-1&subject=customer-2
	Subject       *QueryFilterSubject `form:"subject,omitempty" json:"subject,omitempty"`
	FilterGroupBy *QueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *QueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *QueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *QueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *QueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
	FilterGroupBy  *QueryFilterGroupBy  `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *QueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	// Limit Number of portal tokens to return. Default is 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []Subject

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = Feature

// CreateLedgerJSONRequestBody defines body for CreateLedger for application/json ContentType.
type CreateLedgerJSONRequestBody = CreateLedger

// CreateLedgerGrantJSONRequestBody defines body for CreateLedgerGrant for application/json ContentType.
type CreateLedgerGrantJSONRequestBody = CreateLedgerGrantRequest

// ResetLedgerJSONRequestBody defines body for ResetLedger for application/json ContentType.
type ResetLedgerJSONRequestBody = LedgerReset

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = Meter

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List ingested events
	// (GET /api/v1/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Ingest events
	// (POST /api/v1/events)
	IngestEvents(w http.ResponseWriter, r *http.Request)
	// List features
	// (GET /api/v1/features)
	ListFeatures(w http.ResponseWriter, r *http.Request)
	// Create feature
	// (POST /api/v1/features)
	CreateFeature(w http.ResponseWriter, r *http.Request)
	// Delete feature
	// (DELETE /api/v1/features/{featureID})
	DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// Get feature
	// (GET /api/v1/features/{featureID})
	GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID)
	// List the already defined ledgers.
	// (GET /api/v1/ledgers)
	ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams)
	// Creates the specified ledger
	// (POST /api/v1/ledgers)
	CreateLedger(w http.ResponseWriter, r *http.Request)
	// List grants for multiple ledgers.
	// (GET /api/v1/ledgers/grants)
	ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams)
	// Get the balance of a specific subject.
	// (GET /api/v1/ledgers/{ledgerID}/balance)
	GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams)
	// List ledger grants
	// (GET /api/v1/ledgers/{ledgerID}/grants)
	ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams)
	// Create a grant on a specific ledger.
	// (POST /api/v1/ledgers/{ledgerID}/grants)
	CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// Void ledger grant
	// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get a single grant.
	// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
	GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID)
	// Get the history of a ledger
	// (GET /api/v1/ledgers/{ledgerID}/history)
	GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams)
	// Reset the ledger's balance
	// (POST /api/v1/ledgers/{ledgerID}/reset)
	ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID)
	// List meters
	// (GET /api/v1/meters)
	ListMeters(w http.ResponseWriter, r *http.Request)
	// ☁ Create meter
	// (POST /api/v1/meters)
	CreateMeter(w http.ResponseWriter, r *http.Request)
	// ☁ Delete meter
	// (DELETE /api/v1/meters/{meterIdOrSlug})
	DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Get meter
	// (GET /api/v1/meters/{meterIdOrSlug})
	GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query meter
	// (GET /api/v1/meters/{meterIdOrSlug}/query)
	QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams)
	// List meter subjects
	// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
	ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug)
	// Query portal meter
	// (GET /api/v1/portal/meters/{meterSlug}/query)
	QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams)
	// ☁ List portal tokens
	// (GET /api/v1/portal/tokens)
	ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams)
	// Create portal token
	// (POST /api/v1/portal/tokens)
	CreatePortalToken(w http.ResponseWriter, r *http.Request)
	// ☁ Invalidate portal tokens
	// (POST /api/v1/portal/tokens/invalidate)
	InvalidatePortalTokens(w http.ResponseWriter, r *http.Request)
	// ☁ List subjects
	// (GET /api/v1/subjects)
	ListSubjects(w http.ResponseWriter, r *http.Request)
	// ☁ Upsert subject
	// (POST /api/v1/subjects)
	UpsertSubject(w http.ResponseWriter, r *http.Request)
	// ☁ Delete subject
	// (DELETE /api/v1/subjects/{subjectIdOrKey})
	DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
	// ☁ Get subject
	// (GET /api/v1/subjects/{subjectIdOrKey})
	GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List ingested events
// (GET /api/v1/events)
func (_ Unimplemented) ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Ingest events
// (POST /api/v1/events)
func (_ Unimplemented) IngestEvents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List features
// (GET /api/v1/features)
func (_ Unimplemented) ListFeatures(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create feature
// (POST /api/v1/features)
func (_ Unimplemented) CreateFeature(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete feature
// (DELETE /api/v1/features/{featureID})
func (_ Unimplemented) DeleteFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get feature
// (GET /api/v1/features/{featureID})
func (_ Unimplemented) GetFeature(w http.ResponseWriter, r *http.Request, featureID FeatureID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List the already defined ledgers.
// (GET /api/v1/ledgers)
func (_ Unimplemented) ListLedgers(w http.ResponseWriter, r *http.Request, params ListLedgersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates the specified ledger
// (POST /api/v1/ledgers)
func (_ Unimplemented) CreateLedger(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List grants for multiple ledgers.
// (GET /api/v1/ledgers/grants)
func (_ Unimplemented) ListLedgerGrants(w http.ResponseWriter, r *http.Request, params ListLedgerGrantsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the balance of a specific subject.
// (GET /api/v1/ledgers/{ledgerID}/balance)
func (_ Unimplemented) GetLedgerBalance(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerBalanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List ledger grants
// (GET /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params ListLedgerGrantsByLedgerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a grant on a specific ledger.
// (POST /api/v1/ledgers/{ledgerID}/grants)
func (_ Unimplemented) CreateLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Void ledger grant
// (DELETE /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) VoidLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a single grant.
// (GET /api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID})
func (_ Unimplemented) GetLedgerGrant(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, ledgerGrantID LedgerGrantID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the history of a ledger
// (GET /api/v1/ledgers/{ledgerID}/history)
func (_ Unimplemented) GetLedgerHistory(w http.ResponseWriter, r *http.Request, ledgerID LedgerID, params GetLedgerHistoryParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset the ledger's balance
// (POST /api/v1/ledgers/{ledgerID}/reset)
func (_ Unimplemented) ResetLedger(w http.ResponseWriter, r *http.Request, ledgerID LedgerID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meters
// (GET /api/v1/meters)
func (_ Unimplemented) ListMeters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Create meter
// (POST /api/v1/meters)
func (_ Unimplemented) CreateMeter(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete meter
// (DELETE /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) DeleteMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get meter
// (GET /api/v1/meters/{meterIdOrSlug})
func (_ Unimplemented) GetMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query meter
// (GET /api/v1/meters/{meterIdOrSlug}/query)
func (_ Unimplemented) QueryMeter(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug, params QueryMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List meter subjects
// (GET /api/v1/meters/{meterIdOrSlug}/subjects)
func (_ Unimplemented) ListMeterSubjects(w http.ResponseWriter, r *http.Request, meterIdOrSlug MeterIdOrSlug) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Query portal meter
// (GET /api/v1/portal/meters/{meterSlug}/query)
func (_ Unimplemented) QueryPortalMeter(w http.ResponseWriter, r *http.Request, meterSlug string, params QueryPortalMeterParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List portal tokens
// (GET /api/v1/portal/tokens)
func (_ Unimplemented) ListPortalTokens(w http.ResponseWriter, r *http.Request, params ListPortalTokensParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create portal token
// (POST /api/v1/portal/tokens)
func (_ Unimplemented) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Invalidate portal tokens
// (POST /api/v1/portal/tokens/invalidate)
func (_ Unimplemented) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ List subjects
// (GET /api/v1/subjects)
func (_ Unimplemented) ListSubjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Upsert subject
// (POST /api/v1/subjects)
func (_ Unimplemented) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Delete subject
// (DELETE /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) DeleteSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ☁ Get subject
// (GET /api/v1/subjects/{subjectIdOrKey})
func (_ Unimplemented) GetSubject(w http.ResponseWriter, r *http.Request, subjectIdOrKey SubjectIdOrKey) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestEvents operation middleware
func (siw *ServerInterfaceWrapper) IngestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestEvents(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFeatures operation middleware
func (siw *ServerInterfaceWrapper) ListFeatures(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFeatures(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFeature operation middleware
func (siw *ServerInterfaceWrapper) CreateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFeature(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFeature operation middleware
func (siw *ServerInterfaceWrapper) DeleteFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetFeature operation middleware
func (siw *ServerInterfaceWrapper) GetFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "featureID" -------------
	var featureID FeatureID

	err = runtime.BindStyledParameterWithOptions("simple", "featureID", chi.URLParam(r, "featureID"), &featureID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "featureID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFeature(w, r, featureID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgers operation middleware
func (siw *ServerInterfaceWrapper) ListLedgers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgersParams

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedger operation middleware
func (siw *ServerInterfaceWrapper) CreateLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedger(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrants operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsParams

	// ------------- Optional query parameter "ledgerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ledgerID", r.URL.Query(), &params.LedgerID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrants(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerBalance operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerBalance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerBalanceParams

	// ------------- Optional query parameter "time" -------------

	err = runtime.BindQueryParameter("form", true, false, "time", r.URL.Query(), &params.Time)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "time", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerBalance(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLedgerGrantsByLedger operation middleware
func (siw *ServerInterfaceWrapper) ListLedgerGrantsByLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLedgerGrantsByLedgerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLedgerGrantsByLedger(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) CreateLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateLedgerGrant(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VoidLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) VoidLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VoidLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerGrant operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerGrant(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	// ------------- Path parameter "ledgerGrantID" -------------
	var ledgerGrantID LedgerGrantID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerGrantID", chi.URLParam(r, "ledgerGrantID"), &ledgerGrantID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerGrantID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerGrant(w, r, ledgerID, ledgerGrantID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetLedgerHistory operation middleware
func (siw *ServerInterfaceWrapper) GetLedgerHistory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerHistoryParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "from" -------------

	if paramValue := r.URL.Query().Get("from"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "from"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLedgerHistory(w, r, ledgerID, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResetLedger operation middleware
func (siw *ServerInterfaceWrapper) ResetLedger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ledgerID" -------------
	var ledgerID LedgerID

	err = runtime.BindStyledParameterWithOptions("simple", "ledgerID", chi.URLParam(r, "ledgerID"), &ledgerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ledgerID", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetLedger(w, r, ledgerID)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeters operation middleware
func (siw *ServerInterfaceWrapper) ListMeters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeters(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMeter operation middleware
func (siw *ServerInterfaceWrapper) CreateMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMeter(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMeter operation middleware
func (siw *ServerInterfaceWrapper) DeleteMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMeter operation middleware
func (siw *ServerInterfaceWrapper) GetMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMeter(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "subject" -------------

	err = runtime.BindQueryParameter("form", true, false, "subject", r.URL.Query(), &params.Subject)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subject", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryMeter(w, r, meterIdOrSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMeterSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListMeterSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterIdOrSlug" -------------
	var meterIdOrSlug MeterIdOrSlug

	err = runtime.BindStyledParameterWithOptions("simple", "meterIdOrSlug", chi.URLParam(r, "meterIdOrSlug"), &meterIdOrSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterIdOrSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMeterSubjects(w, r, meterIdOrSlug)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// QueryPortalMeter operation middleware
func (siw *ServerInterfaceWrapper) QueryPortalMeter(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "meterSlug" -------------
	var meterSlug string

	err = runtime.BindStyledParameterWithOptions("simple", "meterSlug", chi.URLParam(r, "meterSlug"), &meterSlug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "meterSlug", Err: err})
		return
	}

	ctx = context.WithValue(ctx, PortalTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudPortalTokenAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryPortalMeterParams

	// ------------- Optional query parameter "from" -------------

	err = runtime.BindQueryParameter("form", true, false, "from", r.URL.Query(), &params.From)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "from", Err: err})
		return
	}

	// ------------- Optional query parameter "to" -------------

	err = runtime.BindQueryParameter("form", true, false, "to", r.URL.Query(), &params.To)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "to", Err: err})
		return
	}

	// ------------- Optional query parameter "windowSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowSize", r.URL.Query(), &params.WindowSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowSize", Err: err})
		return
	}

	// ------------- Optional query parameter "windowTimeZone" -------------

	err = runtime.BindQueryParameter("form", true, false, "windowTimeZone", r.URL.Query(), &params.WindowTimeZone)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "windowTimeZone", Err: err})
		return
	}

	// ------------- Optional query parameter "filterGroupBy" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filterGroupBy", r.URL.Query(), &params.FilterGroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filterGroupBy", Err: err})
		return
	}

	// ------------- Optional query parameter "groupBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "groupBy", r.URL.Query(), &params.GroupBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupBy", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryPortalMeter(w, r, meterSlug, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPortalTokens operation middleware
func (siw *ServerInterfaceWrapper) ListPortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPortalTokensParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPortalTokens(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePortalToken operation middleware
func (siw *ServerInterfaceWrapper) CreatePortalToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePortalToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InvalidatePortalTokens operation middleware
func (siw *ServerInterfaceWrapper) InvalidatePortalTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InvalidatePortalTokens(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSubjects operation middleware
func (siw *ServerInterfaceWrapper) ListSubjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSubjects(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpsertSubject operation middleware
func (siw *ServerInterfaceWrapper) UpsertSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpsertSubject(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "subjectIdOrKey" -------------
	var subjectIdOrKey SubjectIdOrKey

	err = runtime.BindStyledParameterWithOptions("simple", "subjectIdOrKey", chi.URLParam(r, "subjectIdOrKey"), &subjectIdOrKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subjectIdOrKey", Err: err})
		return
	}

	ctx = context.WithValue(ctx, CloudTokenAuthScopes, []string{})

	ctx = context.WithValue(ctx, CloudCookieAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubject(w, r, subjectIdOrKey)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/events", wrapper.ListEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/events", wrapper.IngestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features", wrapper.ListFeatures)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/features", wrapper.CreateFeature)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/features/{featureID}", wrapper.DeleteFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/features/{featureID}", wrapper.GetFeature)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers", wrapper.ListLedgers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers", wrapper.CreateLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/grants", wrapper.ListLedgerGrants)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/balance", wrapper.GetLedgerBalance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.ListLedgerGrantsByLedger)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants", wrapper.CreateLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.VoidLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/grants/{ledgerGrantID}", wrapper.GetLedgerGrant)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/ledgers/{ledgerID}/history", wrapper.GetLedgerHistory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/ledgers/{ledgerID}/reset", wrapper.ResetLedger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters", wrapper.ListMeters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/meters", wrapper.CreateMeter)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.DeleteMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}", wrapper.GetMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/query", wrapper.QueryMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/meters/{meterIdOrSlug}/subjects", wrapper.ListMeterSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/meters/{meterSlug}/query", wrapper.QueryPortalMeter)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/portal/tokens", wrapper.ListPortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens", wrapper.CreatePortalToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/portal/tokens/invalidate", wrapper.InvalidatePortalTokens)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects", wrapper.ListSubjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/subjects", wrapper.UpsertSubject)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.DeleteSubject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/subjects/{subjectIdOrKey}", wrapper.GetSubject)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LbOJbwq6D4bdUkPdTVdhK7ampKcWxHndhxfEnSHftLQyQkoUMBCgHaVlz+sW+x",
	"z7dP8hVuJEiCEmVLSb5Mtrp2YpEEDg7O/Rwc3HoBnUwpQYQzb+fWm8IYThBHsfxriCBPYtR/If4IEQti",
	"POWYEm/H64GE4C8JAuev+y8ADhHheIhRDIY0BhDoL5ue72Hx+hTysed7BE6Qt2ON63sx+pLgGIXeDo8T",
	"5HssGKMJFBOiGziZRuL9dqd38ufG0Yu9V2en7zZPTvb33z7ZPtja773zfI/PpuIdxmNMRp7v3TRGtKF/",
	"DGIUYt7ct+ZLHzfwZEpjrlbNx96ON8J8nAyaAZ206BQRiQdMs3+3MOEoJjBqqXG9u7s734tQOELxQQwJ",
	"n4uoEo7Uh2AkvqxAVH7sb4OsbLY1oeo+WJqLn9qoCRLG6QTFDRzWw8XrbPw1IeNtguLZazzBvIyUo2Qy",
	"QDGgQ4AIjzFigFMQI57ExKDji/jcwoccyF58iIYwibi302m3236Gi474awJv8CSZmIcTTPSfKXIE5CMU",
	"ewJguZZ++CY+jZJR/S3kYwTkpxV7mB923kb+V4yG3o73f1qZzGqpp6yVDiAglVjZxxEXvEOT6fOZ+NyF",
	"sGHuJXsyGIZYrAxGxzGdophjJGVinmru/AIWTrHAL1DjyvWPxOBgMGPgGvMxQDcw4GACeTBuXpALcs7g",
	"CO2Av/6dA+WjmObyX5hME36RtNvdJ/nHExqi6PJfoylvbP51Icgh3dlbTz4UdCmeetZeThMuINZ/08Hf",
	"KJA/MD6T/BEiNH2T/mph8XUl46rnmIwAJGG6VjBJIo4FIlgix2P5tRq+/Ve78/LDk3evtnY3t5893+g9",
	"/2P7+KTTfrJ9fFxYlVf9ZhUvZLyb7ep35nkLpacKMfMwugiP/9Y//iuVax1FK6XfuxdVEkO/mkMS5mji",
	"pnX9A4xjOLM4LaaT8jpOOYw5CCFHDY4nCGACTvZ3wcbGxrbgiwnkzQvSJ0GUMHyFmpUQDsXobnnebXc3",
	"Gu1Oo905a7d35H9/er6nRhf0bCYvSfsUdks+5MHvDwGhHLApCoQsCwEEDJNRhAAcjWI0ghyBaxxFYIC0",
	"TEah5HcEg7HZLskUcvXXmIT0unlB/tKP/gKYAQhixFB8hSzWuYJRMgcdI4esSjHyUfO+Xu6lv/RentEy",
	"KvZIuIJ95HTRLnbvvYvvJXZP8Ve0eCP9bCcTwUeL9lPoL6HQYsRnQheLvzOqmAq2r9h4uVXVCLnOgK6r",
	"5ax1FtZ+hifoT0oc6z8bI0VTguAE8GJ6sxC5o18pQQAyEKIhFqvGRD7r9456QIwLxMDgBeRwABkCj8ac",
	"T3darevr6yaGBDZpPGqJgRpiIPZYkEMJ52LA87NdOaGcz+A6YShchKN0cU7Lxjs/282pit4ExTiArSN0",
	"/ekPGn920o3eKGE3vEKzZSxS/WWFOVMY9+GGqVQcMWJTSpgyQZ7D8AR9SRDjxzEdRGhyop+KhwElHBGp",
	"V+B0GuEAigW1purNf/7NxOpubXMhRBxiYS+MEQxRDHbVCI2z2RSBMWQgIehmigKOQk1IF7mhbybRhSe2",
	"hkOeMG9nU9iSHHO5sucwBBrYbGVJTHY0QFK97gxg2Ij1W3d1mUEvXiEov3n2rHe+p1R6L4oRDGd7N5hx",
	"thLMBZQMIxxwTEZ7hMfKygy1sfLusH3a3j388/fTt92Ng+3DVx9O3h4/9aQdDUPI5frEHk/RMZxNEOF9",
	"8ekUf9p8E/c+j19fzfAY0+3pVme8jfE+ee5lZJsRWqOjjFC9h9qpRHKRuU3ZzjZFvwQVQrKXq7ZHv1B7",
	"Z6rx7dos9TbYSyc5onyfJiRcLXVLs0yKpaEYPIebzQw3R5SDff1CFT4I5Q01yCqINZtRrb0vQBf0gFaM",
	"AR12kTjA2SQWJrbanTwm+rnX5uHDHnBVWOnnxzwnMOFjGuOvq8bMBDNhEgAaA0yuYIRDwOlnRHJEYqHG",
	"hmQOXhL7tVUg5bww4HkqmVeLD0viozimcY5E2jYe0vf29HvVuDCvrggTBQjv0lGljtyNEeRIiRaXctci",
	"MEZTYYELChNmj3DfdLACpO9MEsaFpQIZwyNhH3GampAXxFgD0oSZ5kIFtqCvHU6wtmNp5VB27KuczDMT",
	"lBFUb2xWPsbMLFqYZWKhPIbBZxWjZML+Uessm1OZlfMxnfWyCNEcf3vl3rafIwEZ1DQWQQkbB2p5MEbp",
	"ujEJYiSs3QGMIAmkwazN2cB2xkubDic0IRUYV8/E8CroC3YhEZQ1pQxzfIWE/CHCFRH/JjL618yHQWTY",
	"TuNPvSBpZjhEgfioVzFx+oL04wpjPsSNFsNMcQzVXLcejKI3Q2/nYx37QGJ9L/38WHpS3t2l713HmKM3",
	"JJopm/nOn5eJEOvTprpRcDInwceQS7dD4lp624zRAEPB69eYj32AhwCSWbMUafpRsw3+DyBSpjGmMeaz",
	"fHDZd2yKedP4mprmNbPJYOgYj8Yozt4UHCh1lfC9ccyEWD02D2W8JGWVEAV4AiPNJqwJ3osBI3otjDz1",
	"G8AklFqPjMxMahcEQzcvyL5w2hVufDG0BW9HzDahQiDEIyR4dgxJ4Z1u84K8HyPpLAu4YwQYukIxjIy8",
	"hFcQR3AQoTSQwITvrcWHcorZjHE0AQxFQqJYBCsRJP6UoDOezi3DLSCADDFwLafW07GxgCGdJoU1Qlco",
	"8q2hg4gyMaKQc5yBjIVzXnm6A30VDxAzyr28pmbGMbwyDnIAIzMjRkzGP6xxhQhhuQXLmRKGLLAkx15D",
	"BgIpuTMAchLQSlt0t7bmZy18L6ZRRK+UDVBTJJ2YT1Lyr/2pcJlL6lCO4RvF4Oeyn7bkzsnSerpTTroG",
	"MbN3ZQxHp4wZwoihIsvvRjQJ5YcMnGpNqTb/99M3R+BUWXw5aWQkWS5h0eBJPKBC1AoLnHk7Xqe74Upj",
	"SE97K+i0hzBEjU6wjRqb4ZOg8az7dKsRbHWDjSdPNzrhRiCsV5rEgZSKKL7CAWrIaI3vCZV+hWKmltBp",
	"tj3bxS6EZfCkqC07O/K/Zrvd+TODcBrTyVQLS1swzxfcKjrk0N0CpWAKZxGFYXNOpqcCcS4hLiDR7oGh",
	"8MJmqodAPDXyW3yko9PgUNjEMJTSh1MZEO62N5+YgLCAkgie/JhzPaTLcWnr2tJTyc+vERkJ4u34Hkki",
	"KUENfsrpN8ihHRTMhX5N6E7JVfWaEjNyMWoBDHDatO2dJMbLwyGoccH8cidzO1iXfPOwlOY21L1gfrnj",
	"N1w4OtdjHIwBJJq6xnA6RQTlyavIKzZ+GjEaohiRANWAzuYxZ3RaPTR0ZgsSlhMkCuoUlUJ9sDzIioMX",
	"AVTlFb2Qfw0MuWi3SIOlptSxcYPK3LNpTMMkQDF4lMaMQzCYAbU9j/OQ5mXLAoiV6CnhDk8Q43AyFWBc",
	"a0sE0CBIYrk12ba6+HVjY2O7WekHFCSb0xdYkkPckiaPcyNvFEJjFEk7QPihYmUxHmGi7Llslfk1aNm7",
	"yEWVSNdsk6dQ3+jrml6sYmqlMOsq4kBQuPyQtVj4uTGiratuS/4gIdUexJIKuJf6P9JSNn/QGGhGBnQo",
	"mFYHMAwB5g3hHbB7fN54SZOY+eBMKhIf9I77YBdGEfMB4oHT642DMb5CoTP9JvbOBk2/6wPMlRlIKM+M",
	"Thob65LGKkNXsAD14mMEw8xHTDdpQGmEIKkSyScIhpREs6ryNZoDdynXsAKgjAGkvaUTzirLzx5QafJm",
	"qj5ScZwsf6wKRVgTnDM0TCLh5KYlOIAFdCo3YRBTmeyRfs210Ihmh2TEhzXnF5W4jAo5g7s2KA03ZV65",
	"TRB5v1z6DiFS8RdmiGEwcxKDNnY+ccph5IpPqLScCyA7D1qx372+5oGFAkXryAwH9Qx4w+mrN+H1yM9V",
	"+Kp+bMZAdOffFnh8kA1VRqYVJqvGpyt6Vaaky3mYMutZPcKWqmxrzqNBSpBGdCFmLWTNo3OCha6BUTQD",
	"52rc1+gGB3QUw+lY+NHRDJzSmMvAQWrCxY8LkujgydafT7e2evvve69e7nW6R3+0d99u778UshlysT5v",
	"x/u/H9uN7d7z3Rd7+wcvf391eHT89uT07N37D3/8eXnbfXL3Xw6Wua1e2QTeGI3/ZKNoANizwsbXdmP7",
	"8p+P/r3zKf3j8W+O6S4dPNsnI8Q4Cu/jhvYIwPpzbUVImUKNtJTZHWVOysRBwaNCZsplfNMlnNHw+zmj",
	"2cpVrqaUElVVLMoKKSr4FC/zZMee+bY0lU1TJsOGtM20QG8WBK366tKhf7JkTz1Jl0sRlcXdA6wHXbO8",
	"QuOhbL5euuRmzSxXEusoXC6b812SNHNKBZaKlOSLCPzqKg0dus7KNI5e/H6ytdHde3Zw9vzd6W73w6ut",
	"F5te7UqLRzoI3qwe7LFdacEZl3xmvMtscN/DhHGlYmX+VFfE7EQ0gFHr98M3UcDZq3fPGm3xf52q6o5d",
	"vd5sZ+GAJnxnEEHyuczZTvQsjnfauCgrzHEygaQhFi21GLqZRpAoqZtm0aRXh5ntsGr+0YnjvJId0HCW",
	"5WJVUDEl2XI4JkVlGbjzkz5I4xfKIsWFSJGBsSZs9XarEGAqxyX0brrsq5dnZ8dAvQACGiIwQgTF0mYe",
	"zCzvWPp6aeV9bezKmq0UPkz4RtezAu1b29tWoH3TMuOsULumvzK+IWBjGnO/SBUsmUxgPCvAJWMAefQ6",
	"i8gWBRZk+VpACYeYCH9Y7Lprr6unnVumtmg73UkAhaN0q1MWWiZVPreObV0S+nmV8f88M/yz0khHhEB7",
	"BA7y1pa9TglqR0I7oGn5cg2XxYBYqm32PeVDujnL5Op02lHHmnIrqQWFlQaqhKRAFGlKSMNXjwrW5wKp",
	"JaSljBXWBBLP71/6IBA9q1X6APpDoBMEgwjVqoR4sNFmr25VcR9VI76w2EnXP1RGe025dhFYO2W60tKO",
	"+slPSTLO5GdW0KzXtYykU5S4Vjo/02s06aqDk97Rmed7797I/OzJ3ume+FP+/On8tHewl09gmfdrHyzK",
	"Zl3XunIi6D41OakyeVgMSNV7rC4ClFvXWpFXKkoqH4nJShv0CRCp/3JHeh0SMqgWkKg0onwZRPgzAp0u",
	"mFDCx8WwbKfrMsTCJCvIqjOReV/NJSfS82imePnm/MTzvRe9Pzzfe7+398rzvcM3R2cvPd/7Y6934l3W",
	"YoAiWl8YONdw0s6WQWE2j9qAejKoRAVrpTm7cnf5+EWuvrHMtnLPEestpj2hEOYx8FIaZaFmfIC6dgL3",
	"MD09t1o2LZKlabWSZdUUAckH65YL7mRHMqvCPN+wEshVF+WunwWm1Eo4XUM80kznLIyGN70KW/FQuZyW",
	"vWiGzcWqMotvyQots4jqSq0lKq9SjHwTvJ+53dwxyjAv0+ecgoShnQvSAH+d7B32+kf9o4NPvcM350dn",
	"f4EGMOOBGE0gJvLstsR2U37y5qR/0D/qvXZ/0VB+knKdh0mkax2zESy1UZzc873C4HlbqviwfruKHIrW",
	"uhnVm6ClwmyqUS+NRYG9frGUXAdsNInripKE4LScxEqIqsMIObQ6rFD1U318rRVPJ4ghB2e/NrFohvhi",
	"EbGwpF25QlSPZ0XdQZ+DABJdU6CxO0xc6d0HeUcP0F0S5vWmB/KlpfVkmtq41ZPFoXjiCiio/JOsVskR",
	"hC7Rk8eRGRjTa7HRsmWGrA3IDmyrGppCCs881m0Izg+9UmKkr453qYoC8bUY5yyXMPPTk/ZWEvC/mrnz",
	"9eIH+Q9hPMjUcTFhKsslde5ipt439QTW8e8d77B/dH62Vw7O59YyX8lJLPes94sVI2X8W38b0kw7tZSL",
	"IMC5xtbCSi8LnbeVFa1GV6W7Wa+QK7cvVaUz2TClHasqpzmCExTKrMIxlG1apjFiDFMiu+6gGx7DwJwn",
	"sTs1MDCM6cSqAgwhh03wCs1Ymq3Q0kDQbkAJw4wDKSVgNB1Dksjj6vJpQkIUs4DGCARjKGZEMauo+Z1D",
	"i6XUqEtW1erXU7PgYLFpPbewopQZqARJFTI+FInfoKyhxPrFtTsorUho6rB9Sl75soZ/MFXDrOXFrHlB",
	"zuyX9Mc0Bqfnhz7ovTvwwWH/yJcoOux9AJZoYUoGE91vSjY5kOtQgjjQoVoYM1M8mB5O26cxOD/qvz3f",
	"+7QrjDZ7WD8PtoIoy+CpKZpADFH6NkOAQaGAEY8IjctRTkuqlrbhOtcaZInmGjmXTLWmsqWxLeVysyzQ",
	"tZJpWVPpxIfp2unnUUsNl6nZXl5hOALxNo4zd8HB+trcVAp0V1vk9l57vtd7d+D5QnuJ/9/7kLdK1Zfz",
	"bFIbGb0ccleNF9ln7QQxeVzN6UPJZyqMp+wS2Yqk6Tqx8vHWZRwUKoSK5TdVlTySyFUoT1HRHgmru+Jo",
	"QuNQoMRtwN5d+qppUqWBy+nCCeabJaY4Kms89MNjpFYOzyIVeu1KJA51q6tVZVjoylohrUjSyZ11VVfl",
	"UeNQ5TG9Nt5WPV76kQmmSPA1bM55x25rrq/CsK55nr9wXkUhXp3XmhObXGjMa+TeOrMOWRzOQvyqKVrt",
	"1Ooav9n0rlaXn8pezBLaPGWOlWqvqgxUT0VAVArHVW/hbMqnRgNM9uZTjenUmaAsHnUN02KI+Rn4VYg+",
	"J3QobZr3XWArUIjuP8hpzSjK2pJFxzTmMJKuuIschFMkvCAgT7hHKsJRDI1EEb1G4aE5pcBk1Nt2hi59",
	"T5cS9Hg1GlU+KUxLsK38UhXH64LLOU5kZamzWrFHJ5/U0j71e+TFxvH0/ftur/s+fjbZ/nv4Fb2MDj48",
	"u5nsfrg+aM62vmyeNnrvv+wnT778PYT7X9tf337Z3PvafXbCyOzd9e/D4YetLzeHV9QRcykj6bbi7I1s",
	"IWHa5klvNN8dULXSTk/V65HtPSmjv7pj4wSTvnrYKVgmvqccaf1YN82wNvJ2XRm8lBJuaxzIyqUh76cj",
	"aqYUVxa3yBRuzW59Kb06g9YyjoaZopW0zaTwscVeYZpn2HWR/H0zki678F7V2j2gPwMvZP0j05W84NHJ",
	"/i54+qz99HHzgvTS8UDGoYX64Xz9JpjAmQxVqHL3ovNmSrfnlhKvro1hwWf6VSz9q1j6V7H0+oultU1+",
	"Kr8y4mmlNrnVu3up89nGQ5PR1qr2sglTMVgkD2MURJgiT65sTNvL7RbVee7Nuc6u74WYTSM4O1IdbHe1",
	"egNH6ljaYsvtM5qVOxpYnarGyYBNqeo31elubG49URwc4ykys8mHQcI+ZcLAcValtPyyHdGtZdgsdHtd",
	"+LuvFbW4iYm9AfYsxb2o2YZkVebPZ9UZubbps7g9mZrIomg3bSyOhJSIpwCmTUcL8VaQP2LZLltnXptx",
	"K3ytm70Dhr8iO5Kuo6m+XU+ZC5inL9SImb+3u4evTLYJzKIgiTGfyYZNiu1kR5ZdSj9j1EvEqLeu3k+y",
	"TcQ1GgivHATybdMiO/1LN8n+9ImplJd1Rm2KXyEZY5WDWc6umXKAYIzifcNgdAq/yNCNCxSnM2zah0sD",
	"SQ6WTT/mfJpOfu9pBQZqT7V4iX9f8/JErpWZ3qUNdbQYZM1MFkBxJ70yFWt4QQOHPfWCBskEEW4SM0kc",
	"6a/ZTisjoyamrVAMIM3JIXX5zIgcWgUfEmFEHfhQjfizhqTqXLROaWYfCvRKH5qBGU1Um84RYlzXgfgq",
	"zKwjn3JMle6cQCLGj5FCD2tekEajcUF+ezNFsc6Apu32/vd//hs8ktA9BoSqdcvmfirbnLb0w8SCTG5/",
	"8zcZhIpwgHQhryb33hQGYwS68kR3hkDdQx/Kp7KLvv6UtV73d/eOTvca3Wa7OeaTyDIZvRw+PN/LHRlv",
	"tsWrYlvgFHs73kaz3dxQLQHGcndbcIpbVx3VbUbFtp3VWpjxQsZZ4QgTAFV0LobEtOOgBo9SjItvVf8m",
	"OXF2o1hFQXP2Siu7T+TOr/fyGZWvVt6cpCB/2MVJ8+5NWnBt0mWhd3+33Z7Tm9n0ZHZd7XHP3gT/H/bN",
	"ky0ollyrsByso+wJtxe73emGnfDZ00Z7G4aNzUEQNODW07CxNdjY2upubm+gsLvuxXarFls3N5lvilE+",
	"Wljuqy9LZFIWEN5FiAbJaITJqCkG2FS06Jo0pdlW9WUTcoTO4hHmtW2XQGtGWzxOVbNzdZ+H9I8rRJfA",
	"O1Thbi2ZLoVzQV3doBWiWdYdj8ZgIIsPbWQKNaQqZOZ0rHNJRzV8Kh+1i/ychrM5gsHqGPbPspCo0ZPj",
	"zq8aryHX9s/5oudn79T588uZumKmtnjJKjkd/JGaZtqG01QOCnFJm3GsGKUsQRNGVwxlwKviNaYHrxpl",
	"km96WOTUyia1imvz9/bclfT4puPKsyQIEGPDJIpmqQT6mUVt3za/XTL2zk8NTrsBQLXJad6qsitNswDv",
	"gXbVMo0FllG2Kfw/tnocZmhM94xIB2MieePR3s0UxVg6ftHjOcpSHUK0+k26Nk69lPW6q6fzltNz6V65",
	"JVXa3ZDqo/LNGize+RbQ6UfpCf4fR1xs1Rlj/oVF6yBgRU1mR2tTsEMUtW7TXux3irQjxJ09asXvVk/V",
	"wQx8RjMXqatXM1Jfzv3NWsM7HMfNytYpQAEerkzobKrJFu6885qudey53oFl99x3a5oDxGts5QHia9nH",
	"9reUKrKx389LF9ZO3kcQqCODC0wSWX+mG7iZWh/9YZWV8lqPW6Kb/PCyYhDALIMemTZ7S1/V6zxal7vc",
	"iYLIrEa3qaBD521O5aZF1eE1jYfVXky+7M3k7puHFTwCBQZIfZIGM0CHQ3XU0QVr+rB0bfTqwnpLdJRa",
	"xvqUdb/CFbOW/dOHeubx54rsW9mKfCp7Y+QL/OxOny6bN+2buQ6TN9/A1G33albnVDjc2sT8ppbvfPDM",
	"TT8ajz8OqW62txePUaMf3/oMYOYkxQdowVbWJa9aGWY3AWZ309dShurar3smhGRL+/Ri/hqpIQWS1K+v",
	"per5lhK72ESrtvi220f9/HJ7Hik9hIxvI00ody2rXVmlI8Dznctg6ZrHCt8g3xdzWbqObGIunIKgmCht",
	"rltcqKy2aYy5M/8ufvBCbZa0yQi9nnMhvypOmnsl/z1OT6zT4cnjvPouaYOrLF3/c7tAi2l4RQxVR0Xk",
	"pJi5Mz/v4dRRFc9nqfH0ANb6+fXEDxg4XI++yK16VYY91H2bKKlHpaWmew8gz8v1uwX5voBuG1w3rvo+",
	"gXEnJ1TJddVn7j+A3usQ50oluvlFYnhBNPwdxWGh1ykYzED/RRMcw5hjeYENjYFKg8pLvYykSttyXVEc",
	"yj4e7+Q/zJW3lPxDZYadzbj/wVIlB8lsQt3JJjHiw/lTI6K+Dqkds39t403j4ac1TiSt2JSygtC9fUmy",
	"si70BIoI51nrD5XY/rLUs35juKboTPH106cDIGCYjCLTIXZFYnKMGaeqLf5cT1K/V7DC1TjzKPOlHv/b",
	"GrsVoXPje8oK38wDVd8v8D8r3U19jj5vWqze/SwtaY+ED1rQEg41/QHd6SX8EdVuv44fkvOyDc3//C52",
	"jrkfHm+1xEtseqa6nRXZmZNZubvMFJJk+RXFtOhpm8QfJKHp2zsDUHYENfaYPPMwr21zXlhJKB7slK/J",
	"67F7zzpI1pwzN23OVAvW7+DqVEJYYCoN4A+UEPnBmPKk0Pg3Y4n78KSh5HmBLfVO0xm5OlTfr/C0x/dp",
	"Y1ujTctKGt0u1ZFtmdiY2aQfOpQ1MdRi6FSTT3W46rfegoNnv/X19e/lY4C+6UMDszJD6yJ7q+/yEEdI",
	"DHZB0giE1YDcFQkzfSzXIdL13rujVvo66VVHrb57H+lvxYD+Qzdh91e9aj2O/9//+W+g2WmiuaXE9iVN",
	"1LqV/2supZ4bkFsoGy5IWsGq2EZGSgCNgaCl6jJWw9zLmXo5wGsGxRTA+TLWh9kbPzAx6M2oJIY5VauO",
	"7XPFFNa0ce1fAnSFAlTRvB2R+wHd3vtLLFW6U2lRv7WO6gunTFJA2baWr62EnP31HT6v86rdc3epT87w",
	"BP1JSf3PVLWU6VG03FcHmtXqfpW+/2Bh8R/bWXsJKWI3MZfXJqIb3grYVYUTqWf8JLu9+voPREJfI8yX",
	"+PUFPn2JqwviWpZf+LEjfzSo/tTxre3x5Zlfv9MtDdXJD6VQ0108VLddGqrrGmojP1Q3N5Q6p+tvOuKr",
	"JbEsbzlRt3j8xBlmS/zeT7prGloQMjFv6eBkerlARQDl1Az6XUwXVxymIFIy+prfqrVutMLgZ0WktsZo",
	"RQrqAnJRbYnyVHMfe6DQwakJzsaYAUTCqSyPxAxMk0GEg2gG0M2UMun+cJp+xypsCdV1qcKiuMcNOTIR",
	"JHttpXmgdM01010FQ9SR0fpPMly+sQnyS/3+Ur/fTP3q1npS1pTav328FCTv7n738VKQd1F96xZwRS2u",
	"vnaKZdPHpEII14gkSY3gbK9XeQDEWs3CI5HZ0cLc0NkBwzQfL1RAd6u5/IHD7pZ13FD88Q3bedXKediN",
	"/pewJfJ78SssWyMSJ1GXw5uLjRaWEFdeveDKmNi7u2zeZNmrHNyecW2nM0eI7jRMrgvlUtmY1SnnBWDu",
	"/sfUCxeandbWBy1MrmCEQ6iyC/fMQF6QfjoMq1ARVui6+nBVNkxBc9yLWSS5ZUMCGEWunm/286IozS5B",
	"Eii03pWrmT9ankNUiao14MJwdXnGykug5i3CVAdlx4FSCCqExF1OTOT7cLvuE62x6Po37i+3lHI350Lr",
	"5rJQ6A8BoQCHFikKgyI9TuvLefWE5v6WjE3C5v06hB3nFpIb75e+XqyvLbJYqLUtYbcwVlXX7k3DNRWW",
	"rhW/Wr+ZmEX47xtu+gE1WWqVOcJNKXYfUCZzQc6nDMWcWRIEmAP1aZcHZqmn/tA+gwJCihj5BwfoBjPu",
	"A8xT6WDOJZU+ka+y3LvT9KCMmjDM+k9PY3olz8QMMYpCJ6mpJZym/WDuW3yzajKzbyHkFCQSzNXbgqsG",
	"W7+q4f0li+txqSJCkHUlcrCpQwa3bvW/+uGb+BWarayyxRBeamHO7dCWMc9yiYY88DWrWwyB5etbfoaq",
	"3h+/ymYuffr3NgcOEK9NcQeIr4/cVudGpxKzWkL+5MfHBNlYG1sh0wqB3DRo6w7l2tem6CiuvHTMFfyU",
	"t6EVr4jodJ822812s7Pz7NmzZ44zW7KX95ybOdRzMbNejeOElEyqMRCjSBojaftmTEbyAEnaOF5f1aE6",
	"/jYvyMfXCMYETGiMLh9V3grSGiEuxmrIXAgKW3KUFr1C8RVG148l0+jIre4d7DzIVQZT3ZtIRuqiDxkE",
	"FlDqKvB7w6fZzwmgznrWBFAXWedymbXBmlCCOP6KWiFk4wGFcagDN40QXaFIiJnGKMEhygGoXaCaAFo+",
	"zT2RZUbIAZFyTE0wkHVS4x4Isj+voKs5R0HuLu/+XwAAAP//AlahZgrRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
