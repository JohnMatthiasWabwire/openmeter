// Package openmeter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openmeter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/cloudevents/sdk-go/v2/event"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	"github.com/openmeterio/openmeter/pkg/models"
)

const (
	CloudCookieAuthScopes      = "CloudCookieAuth.Scopes"
	CloudPortalTokenAuthScopes = "CloudPortalTokenAuth.Scopes"
	CloudTokenAuthScopes       = "CloudTokenAuth.Scopes"
	PortalTokenAuthScopes      = "PortalTokenAuth.Scopes"
)

// Defines values for AppCapabilityType.
const (
	CalculateTax     AppCapabilityType = "calculateTax"
	CollectPayments  AppCapabilityType = "collectPayments"
	InvoiceCustomers AppCapabilityType = "invoiceCustomers"
	ReportEvents     AppCapabilityType = "reportEvents"
	ReportUsage      AppCapabilityType = "reportUsage"
)

// Defines values for AppStatus.
const (
	Ready        AppStatus = "ready"
	Unauthorized AppStatus = "unauthorized"
)

// Defines values for AppType.
const (
	AppTypeSandbox AppType = "sandbox"
	AppTypeStripe  AppType = "stripe"
)

// Defines values for AppliedDiscountPercentageType.
const (
	AppliedDiscountPercentageTypePercentage AppliedDiscountPercentageType = "percentage"
)

// Defines values for BillingCustomerOverrideOrderBy.
const (
	BillingCustomerOverrideOrderById BillingCustomerOverrideOrderBy = "id"
)

// Defines values for BillingDocumentRefType.
const (
	CreditNodeOriginalInvoice BillingDocumentRefType = "credit_node_original_invoice"
)

// Defines values for BillingFlatFeeLineType.
const (
	BillingFlatFeeLineTypeFlatFee BillingFlatFeeLineType = "flat_fee"
)

// Defines values for BillingFlatFeeLineCreateItemType.
const (
	BillingFlatFeeLineCreateItemTypeFlatFee BillingFlatFeeLineCreateItemType = "flat_fee"
)

// Defines values for BillingFlatFeeLineCreateOrUpdateType.
const (
	BillingFlatFeeLineCreateOrUpdateTypeFlatFee BillingFlatFeeLineCreateOrUpdateType = "flat_fee"
)

// Defines values for BillingInvoiceExpand.
const (
	BillingInvoiceExpandAll          BillingInvoiceExpand = "*"
	BillingInvoiceExpandLines        BillingInvoiceExpand = "lines"
	BillingInvoiceExpandPreceding    BillingInvoiceExpand = "preceding"
	BillingInvoiceExpandWorkflow     BillingInvoiceExpand = "workflow"
	BillingInvoiceExpandWorkflowApps BillingInvoiceExpand = "workflow.apps"
)

// Defines values for BillingInvoiceOrderBy.
const (
	BillingInvoiceOrderByCreatedAt    BillingInvoiceOrderBy = "createdAt"
	BillingInvoiceOrderByCustomerName BillingInvoiceOrderBy = "customer.name"
	BillingInvoiceOrderByIssuedAt     BillingInvoiceOrderBy = "issuedAt"
	BillingInvoiceOrderByStatus       BillingInvoiceOrderBy = "status"
	BillingInvoiceOrderByUpdatedAt    BillingInvoiceOrderBy = "updatedAt"
)

// Defines values for BillingInvoiceStatus.
const (
	Gathering              BillingInvoiceStatus = "gathering"
	Issued                 BillingInvoiceStatus = "issued"
	ManualApprovalRequired BillingInvoiceStatus = "manual_approval_required"
	PaymentReceived        BillingInvoiceStatus = "payment_received"
	Review                 BillingInvoiceStatus = "review"
	ValidationFailed       BillingInvoiceStatus = "validation_failed"
)

// Defines values for BillingInvoiceType.
const (
	CreditNote BillingInvoiceType = "credit_note"
	Standard   BillingInvoiceType = "standard"
)

// Defines values for BillingLineStatus.
const (
	Deleted BillingLineStatus = "deleted"
	Split   BillingLineStatus = "split"
	Valid   BillingLineStatus = "valid"
)

// Defines values for BillingManualFeeLineType.
const (
	BillingManualFeeLineTypeManualFee BillingManualFeeLineType = "manual_fee"
)

// Defines values for BillingManualFeeLineCreateItemType.
const (
	BillingManualFeeLineCreateItemTypeManualFee BillingManualFeeLineCreateItemType = "manual_fee"
)

// Defines values for BillingManualFeeLineCreateOrUpdateType.
const (
	ManualFee BillingManualFeeLineCreateOrUpdateType = "manual_fee"
)

// Defines values for BillingPaymentTermType.
const (
	DueDate BillingPaymentTermType = "due_date"
	Instant BillingPaymentTermType = "instant"
)

// Defines values for BillingProfileExpand.
const (
	BillingProfileExpandAll  BillingProfileExpand = "*"
	BillingProfileExpandApps BillingProfileExpand = "apps"
)

// Defines values for BillingProfileOrderBy.
const (
	BillingProfileOrderByCreatedAt BillingProfileOrderBy = "createdAt"
	BillingProfileOrderByDefault   BillingProfileOrderBy = "default"
	BillingProfileOrderByName      BillingProfileOrderBy = "name"
	BillingProfileOrderByUpdatedAt BillingProfileOrderBy = "updatedAt"
)

// Defines values for BillingTaxBehavior.
const (
	Exclusive BillingTaxBehavior = "exclusive"
	Inclusive BillingTaxBehavior = "inclusive"
)

// Defines values for BillingVoidInvoiceLineAction.
const (
	BillingVoidInvoiceLineActionDiscard          BillingVoidInvoiceLineAction = "discard"
	BillingVoidInvoiceLineActionPending          BillingVoidInvoiceLineAction = "pending"
	BillingVoidInvoiceLineActionPendingNextCycle BillingVoidInvoiceLineAction = "pending_next_cycle"
)

// Defines values for BillingWorkflowCollectionAlignment.
const (
	BillingWorkflowCollectionAlignmentSubscription BillingWorkflowCollectionAlignment = "subscription"
)

// Defines values for BillingWorkflowCollectionMethod.
const (
	ChargeAutomatically BillingWorkflowCollectionMethod = "charge_automatically"
	SendInvoice         BillingWorkflowCollectionMethod = "send_invoice"
)

// Defines values for CheckoutSessionUIMode.
const (
	Embedded CheckoutSessionUIMode = "embedded"
	Hosted   CheckoutSessionUIMode = "hosted"
)

// Defines values for EntitlementBooleanCreateInputsType.
const (
	EntitlementBooleanCreateInputsTypeBoolean EntitlementBooleanCreateInputsType = "boolean"
)

// Defines values for EntitlementMeteredType.
const (
	EntitlementMeteredTypeMetered EntitlementMeteredType = "metered"
)

// Defines values for EntitlementMeteredCreateInputsType.
const (
	EntitlementMeteredCreateInputsTypeMetered EntitlementMeteredCreateInputsType = "metered"
)

// Defines values for EntitlementOrderBy.
const (
	EntitlementOrderByCreatedAt EntitlementOrderBy = "createdAt"
	EntitlementOrderByUpdatedAt EntitlementOrderBy = "updatedAt"
)

// Defines values for EntitlementStaticType.
const (
	EntitlementStaticTypeStatic EntitlementStaticType = "static"
)

// Defines values for EntitlementStaticCreateInputsType.
const (
	EntitlementStaticCreateInputsTypeStatic EntitlementStaticCreateInputsType = "static"
)

// Defines values for ExpirationDuration.
const (
	ExpirationDurationDAY   ExpirationDuration = "DAY"
	ExpirationDurationHOUR  ExpirationDuration = "HOUR"
	ExpirationDurationMONTH ExpirationDuration = "MONTH"
	ExpirationDurationWEEK  ExpirationDuration = "WEEK"
	ExpirationDurationYEAR  ExpirationDuration = "YEAR"
)

// Defines values for FeatureOrderBy.
const (
	FeatureOrderByCreatedAt FeatureOrderBy = "createdAt"
	FeatureOrderById        FeatureOrderBy = "id"
	FeatureOrderByUpdatedAt FeatureOrderBy = "updatedAt"
)

// Defines values for FlatPriceType.
const (
	FlatPriceTypeFlat FlatPriceType = "flat"
)

// Defines values for FlatPriceWithPaymentTermType.
const (
	FlatPriceWithPaymentTermTypeFlat FlatPriceWithPaymentTermType = "flat"
)

// Defines values for GrantOrderBy.
const (
	GrantOrderByCreatedAt GrantOrderBy = "createdAt"
	GrantOrderById        GrantOrderBy = "id"
	GrantOrderByUpdatedAt GrantOrderBy = "updatedAt"
)

// Defines values for MeasureUsageFromPreset.
const (
	CurrentPeriodStart MeasureUsageFromPreset = "CURRENT_PERIOD_START"
	Now                MeasureUsageFromPreset = "NOW"
)

// Defines values for NotificationChannelOrderBy.
const (
	NotificationChannelOrderByCreatedAt NotificationChannelOrderBy = "createdAt"
	NotificationChannelOrderById        NotificationChannelOrderBy = "id"
	NotificationChannelOrderByType      NotificationChannelOrderBy = "type"
	NotificationChannelOrderByUpdatedAt NotificationChannelOrderBy = "updatedAt"
)

// Defines values for NotificationChannelType.
const (
	Webhook NotificationChannelType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookType.
const (
	NotificationChannelWebhookTypeWEBHOOK NotificationChannelWebhookType = "WEBHOOK"
)

// Defines values for NotificationChannelWebhookCreateRequestType.
const (
	NotificationChannelWebhookCreateRequestTypeWEBHOOK NotificationChannelWebhookCreateRequestType = "WEBHOOK"
)

// Defines values for NotificationEventBalanceThresholdPayloadType.
const (
	NotificationEventBalanceThresholdPayloadTypeEntitlementsBalanceThreshold NotificationEventBalanceThresholdPayloadType = "entitlements.balance.threshold"
)

// Defines values for NotificationEventDeliveryStatusState.
const (
	NotificationEventDeliveryStatusStateFailed  NotificationEventDeliveryStatusState = "FAILED"
	NotificationEventDeliveryStatusStatePending NotificationEventDeliveryStatusState = "PENDING"
	NotificationEventDeliveryStatusStateSending NotificationEventDeliveryStatusState = "SENDING"
	NotificationEventDeliveryStatusStateSuccess NotificationEventDeliveryStatusState = "SUCCESS"
)

// Defines values for NotificationEventOrderBy.
const (
	NotificationEventOrderByCreatedAt NotificationEventOrderBy = "createdAt"
	NotificationEventOrderById        NotificationEventOrderBy = "id"
)

// Defines values for NotificationEventType.
const (
	NotificationEventTypeEntitlementsBalanceThreshold NotificationEventType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdType.
const (
	NotificationRuleBalanceThresholdTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdCreateRequestType.
const (
	NotificationRuleBalanceThresholdCreateRequestTypeEntitlementsBalanceThreshold NotificationRuleBalanceThresholdCreateRequestType = "entitlements.balance.threshold"
)

// Defines values for NotificationRuleBalanceThresholdValueType.
const (
	Number  NotificationRuleBalanceThresholdValueType = "NUMBER"
	Percent NotificationRuleBalanceThresholdValueType = "PERCENT"
)

// Defines values for NotificationRuleOrderBy.
const (
	NotificationRuleOrderByCreatedAt NotificationRuleOrderBy = "createdAt"
	NotificationRuleOrderById        NotificationRuleOrderBy = "id"
	NotificationRuleOrderByType      NotificationRuleOrderBy = "type"
	NotificationRuleOrderByUpdatedAt NotificationRuleOrderBy = "updatedAt"
)

// Defines values for OAuth2AuthorizationCodeGrantErrorType.
const (
	AccessDenied            OAuth2AuthorizationCodeGrantErrorType = "access_denied"
	InvalidRequest          OAuth2AuthorizationCodeGrantErrorType = "invalid_request"
	InvalidScope            OAuth2AuthorizationCodeGrantErrorType = "invalid_scope"
	ServerError             OAuth2AuthorizationCodeGrantErrorType = "server_error"
	TemporarilyUnavailable  OAuth2AuthorizationCodeGrantErrorType = "temporarily_unavailable"
	UnauthorizedClient      OAuth2AuthorizationCodeGrantErrorType = "unauthorized_client"
	UnsupportedResponseType OAuth2AuthorizationCodeGrantErrorType = "unsupported_response_type"
)

// Defines values for OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0Op.
const (
	OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0OpAdd OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0Op = "add"
)

// Defines values for OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1Op.
const (
	OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1OpRemove OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1Op = "remove"
)

// Defines values for PhasesOrderBy.
const (
	Key PhasesOrderBy = "key"
)

// Defines values for PlanOrderBy.
const (
	PlanOrderById  PlanOrderBy = "id"
	PlanOrderByKey PlanOrderBy = "key"
)

// Defines values for PlanStatus.
const (
	Active   PlanStatus = "active"
	Archived PlanStatus = "archived"
	Draft    PlanStatus = "draft"
)

// Defines values for PricePaymentTerm.
const (
	InAdvance PricePaymentTerm = "in_advance"
	InArrears PricePaymentTerm = "in_arrears"
)

// Defines values for RateCardBooleanEntitlementType.
const (
	RateCardBooleanEntitlementTypeBoolean RateCardBooleanEntitlementType = "boolean"
)

// Defines values for RateCardFlatFeeType.
const (
	RateCardFlatFeeTypeFlatFee RateCardFlatFeeType = "flat_fee"
)

// Defines values for RateCardFlatFeeUpdateItemType.
const (
	FlatFee RateCardFlatFeeUpdateItemType = "flat_fee"
)

// Defines values for RateCardMeteredEntitlementType.
const (
	Metered RateCardMeteredEntitlementType = "metered"
)

// Defines values for RateCardStaticEntitlementType.
const (
	Static RateCardStaticEntitlementType = "static"
)

// Defines values for RateCardUsageBasedType.
const (
	RateCardUsageBasedTypeUsageBased RateCardUsageBasedType = "usage_based"
)

// Defines values for RateCardUsageBasedUpdateItemType.
const (
	RateCardUsageBasedUpdateItemTypeUsageBased RateCardUsageBasedUpdateItemType = "usage_based"
)

// Defines values for RecurringPeriodInterval.
const (
	RecurringPeriodIntervalDAY   RecurringPeriodInterval = "DAY"
	RecurringPeriodIntervalMONTH RecurringPeriodInterval = "MONTH"
	RecurringPeriodIntervalWEEK  RecurringPeriodInterval = "WEEK"
	RecurringPeriodIntervalYEAR  RecurringPeriodInterval = "YEAR"
)

// Defines values for SandboxAppType.
const (
	SandboxAppTypeSandbox SandboxAppType = "sandbox"
)

// Defines values for SortOrder.
const (
	ASC  SortOrder = "ASC"
	DESC SortOrder = "DESC"
)

// Defines values for StripeAppType.
const (
	Stripe StripeAppType = "stripe"
)

// Defines values for StripeCheckoutSessionMode.
const (
	Setup StripeCheckoutSessionMode = "setup"
)

// Defines values for StripePaymentIntentStatus.
const (
	Canceled              StripePaymentIntentStatus = "canceled"
	Processing            StripePaymentIntentStatus = "processing"
	RequiresAction        StripePaymentIntentStatus = "requires_action"
	RequiresConfirmation  StripePaymentIntentStatus = "requires_confirmation"
	RequiresPaymentMethod StripePaymentIntentStatus = "requires_payment_method"
	Succeeded             StripePaymentIntentStatus = "succeeded"
)

// Defines values for SvixOperationalWebhookRequestType.
const (
	EndpointCreated         SvixOperationalWebhookRequestType = "endpoint.created"
	EndpointDeleted         SvixOperationalWebhookRequestType = "endpoint.deleted"
	EndpointDisabled        SvixOperationalWebhookRequestType = "endpoint.disabled"
	EndpointUpdated         SvixOperationalWebhookRequestType = "endpoint.updated"
	MessageAttemptExhausted SvixOperationalWebhookRequestType = "message.attempt.exhausted"
	MessageAttemptFailing   SvixOperationalWebhookRequestType = "message.attempt.failing"
	MessageAttemptRecovered SvixOperationalWebhookRequestType = "message.attempt.recovered"
)

// Defines values for TieredPriceMode.
const (
	Graduated TieredPriceMode = "graduated"
	Volume    TieredPriceMode = "volume"
)

// Defines values for TieredPriceWithCommitmentsType.
const (
	Tiered TieredPriceWithCommitmentsType = "tiered"
)

// Defines values for UnitPriceType.
const (
	UnitPriceTypeUnit UnitPriceType = "unit"
)

// Defines values for UnitPriceWithCommitmentsType.
const (
	UnitPriceWithCommitmentsTypeUnit UnitPriceWithCommitmentsType = "unit"
)

// Defines values for GetSubscriptionGetSubscriptionParamsExpand.
const (
	False GetSubscriptionGetSubscriptionParamsExpand = false
	True  GetSubscriptionGetSubscriptionParamsExpand = true
)

// Defines values for EditSubscriptionJSONBody0Op.
const (
	EditSubscriptionJSONBody0OpAdd EditSubscriptionJSONBody0Op = "add"
)

// Defines values for EditSubscriptionJSONBody1Op.
const (
	EditSubscriptionJSONBody1OpRemove EditSubscriptionJSONBody1Op = "remove"
)

// Defines values for EditSubscriptionJSONBody2Op.
const (
	Add EditSubscriptionJSONBody2Op = "add"
)

// Defines values for EditSubscriptionJSONBody3Op.
const (
	Extend EditSubscriptionJSONBody3Op = "extend"
)

// Defines values for EditSubscriptionJSONBody4Op.
const (
	Remove EditSubscriptionJSONBody4Op = "remove"
)

// Address Address
type Address struct {
	City *string `json:"city,omitempty"`

	// Country [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
	// Custom two-letter country codes are also supported for convenience.
	Country     *CountryCode `json:"country,omitempty"`
	Line1       *string      `json:"line1,omitempty"`
	Line2       *string      `json:"line2,omitempty"`
	PhoneNumber *string      `json:"phoneNumber,omitempty"`
	PostalCode  *string      `json:"postalCode,omitempty"`
	State       *string      `json:"state,omitempty"`
}

// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
type Annotations map[string]interface{}

// App App.
// One of: stripe
type App struct {
	union json.RawMessage
}

// AppBase Abstract base model for installed apps.
//
// Represent an app installed to the organization.
// This is an actual instance, with its own configuration and credentials.
type AppBase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Listing The marketplace listing that this installed app is based on.
	Listing *MarketplaceListing `json:"listing,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status *AppStatus `json:"status,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// AppCapability App capability.
//
// Capabilities only exist in config so they don't extend the Resource model.
type AppCapability struct {
	// Description The capability description.
	Description string `json:"description"`

	// Key Key
	Key string `json:"key"`

	// Name The capability name.
	Name string `json:"name"`

	// Type The capability type.
	Type AppCapabilityType `json:"type"`
}

// AppCapabilityType App capability type.
type AppCapabilityType string

// AppList A page of results.
type AppList struct {
	// Items The items in the page.
	Items []App `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// AppReference App reference
//
// Can be used as a short reference to an app if the full app object is not needed.
type AppReference struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id string `json:"id"`
}

// AppStatus App installed status.
type AppStatus string

// AppType Type of the app.
type AppType string

// AppliedDiscount Percentage discount on plan.
type AppliedDiscount = AppliedDiscountPercentage

// AppliedDiscountPercentage Percentage discount on plan.
type AppliedDiscountPercentage struct {
	// AppliesTo The rate cards that the discount applies to.
	// When not specified, the discount applies to all rate cards.
	AppliesTo *[]string `json:"appliesTo,omitempty"`

	// Percentage The percentage of the discount.
	Percentage float32 `json:"percentage"`

	// Type The type of the discount.
	Type AppliedDiscountPercentageType `json:"type"`
}

// AppliedDiscountPercentageType The type of the discount.
type AppliedDiscountPercentageType string

// AppliedDiscountPercentageUpdateItem Percentage discount on plan.
type AppliedDiscountPercentageUpdateItem struct {
	// AppliesTo The rate cards that the discount applies to.
	// When not specified, the discount applies to all rate cards.
	AppliesTo *[]string `json:"appliesTo,omitempty"`

	// Percentage The percentage of the discount.
	Percentage float32 `json:"percentage"`
}

// AppliedDiscountUpdateItem Percentage discount on plan.
type AppliedDiscountUpdateItem = AppliedDiscountPercentageUpdateItem

// BadRequestProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type BadRequestProblemResponse = UnexpectedProblemResponse

// BalanceHistoryWindow The balance history window.
type BalanceHistoryWindow struct {
	// BalanceAtStart The entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// Period A period with a start and end time.
	Period Period `json:"period"`

	// Usage The total usage of the feature in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// BillingCreateLineResult Response for creating a pending charge
type BillingCreateLineResult struct {
	Lines []BillingInvoiceLine `json:"lines"`
}

// BillingCreateLinesRequest CreateLinesRequest is the request for creating manual line items.
type BillingCreateLinesRequest struct {
	Lines []BillingInvoiceLineCreateItem `json:"lines"`
}

// BillingCreditNoteOriginalInvoiceRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type BillingCreditNoteOriginalInvoiceRef = BillingGenericDocumentRef

// BillingCustomerOverride Customer specific workflow overrides.
type BillingCustomerOverride struct {
	// BillingProfile The billing profile this override is associated with.
	//
	// If not provided, the default billing profile is chosen if available.
	BillingProfile *string `json:"billingProfile,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time                      `json:"updatedAt,omitempty"`
	Workflow  BillingCustomerWorkflowOverride `json:"workflow"`
}

// BillingCustomerOverrideOrderBy Order by options for customers.
type BillingCustomerOverrideOrderBy string

// BillingCustomerWorkflowOverride defines model for BillingCustomerWorkflowOverride.
type BillingCustomerWorkflowOverride struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for the resource.
	Id           *string                           `json:"id,omitempty"`
	Invoicing    *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`
	InvoicingApp App                               `json:"invoicingApp"`
	Payment      *BillingWorkflowPaymentSettings   `json:"payment,omitempty"`
	PaymentApp   App                               `json:"paymentApp"`
	TaxApp       App                               `json:"taxApp"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BillingCustomerWorkflowOverrideCreate defines model for BillingCustomerWorkflowOverrideCreate.
type BillingCustomerWorkflowOverrideCreate struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`
	Invoicing  *BillingWorkflowInvoicingSettings  `json:"invoicing,omitempty"`
	Payment    *BillingWorkflowPaymentSettings    `json:"payment,omitempty"`
}

// BillingDocumentRef defines model for BillingDocumentRef.
type BillingDocumentRef = BillingCreditNoteOriginalInvoiceRef

// BillingDocumentRefType defines model for BillingDocumentRefType.
type BillingDocumentRefType string

// BillingDueDate defines model for BillingDueDate.
type BillingDueDate struct {
	Amount   Numeric       `json:"amount"`
	Currency *CurrencyCode `json:"currency,omitempty"`

	// DueAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	DueAt   time.Time   `json:"dueAt"`
	Notes   *string     `json:"notes,omitempty"`
	Percent *Percentage `json:"percent,omitempty"`
}

// BillingFlatFeeLine BillingFlatFeeLine represents a line item that is sold to the customer as a flat fee.
//
// This object represents an item added via subscriptions.
type BillingFlatFeeLine struct {
	Charges *[]BillingLineCharge `json:"charges,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time   `json:"createdAt,omitempty"`
	Currency  CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time       `json:"invoiceAt"`
	Item      RateCardFlatFee `json:"item"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                 `json:"name"`
	Period       BillingPeriod          `json:"period"`
	Status       BillingLineStatus      `json:"status"`
	TaxOverrides *TaxConfig             `json:"taxOverrides"`
	Taxes        *[]BillingTaxItem      `json:"taxes,omitempty"`
	Total        *Numeric               `json:"total,omitempty"`
	Type         BillingFlatFeeLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BillingFlatFeeLineType defines model for BillingFlatFeeLine.Type.
type BillingFlatFeeLineType string

// BillingFlatFeeLineCreateItem BillingFlatFeeLine represents a line item that is sold to the customer as a flat fee.
//
// This object represents an item added via subscriptions.
type BillingFlatFeeLineCreateItem struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                  `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount   `json:"discounts,omitempty"`
	Invoice     *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time       `json:"invoiceAt"`
	Item      RateCardFlatFee `json:"item"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                           `json:"name"`
	Period       BillingPeriod                    `json:"period"`
	TaxOverrides *TaxConfig                       `json:"taxOverrides"`
	Type         BillingFlatFeeLineCreateItemType `json:"type"`
}

// BillingFlatFeeLineCreateItemType defines model for BillingFlatFeeLineCreateItem.Type.
type BillingFlatFeeLineCreateItemType string

// BillingFlatFeeLineCreateOrUpdate BillingFlatFeeLine represents a line item that is sold to the customer as a flat fee.
//
// This object represents an item added via subscriptions.
type BillingFlatFeeLineCreateOrUpdate struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time       `json:"invoiceAt"`
	Item      RateCardFlatFee `json:"item"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                               `json:"name"`
	Period       BillingPeriod                        `json:"period"`
	TaxOverrides *TaxConfig                           `json:"taxOverrides"`
	Type         BillingFlatFeeLineCreateOrUpdateType `json:"type"`
}

// BillingFlatFeeLineCreateOrUpdateType defines model for BillingFlatFeeLineCreateOrUpdate.Type.
type BillingFlatFeeLineCreateOrUpdateType string

// BillingGenericDocumentRef Omitted fields:
// period: Tax period in which the referred document had an effect required by some tax regimes and formats.
// stamps: Seals of approval from other organisations that may need to be listed.
// ext: 	Extensions for additional codes that may be required.
type BillingGenericDocumentRef struct {
	Description *string                `json:"description,omitempty"`
	Reason      *string                `json:"reason,omitempty"`
	Type        BillingDocumentRefType `json:"type"`
}

// BillingGenericPaymentTerms defines model for BillingGenericPaymentTerms.
type BillingGenericPaymentTerms struct {
	Detail *string                `json:"detail,omitempty"`
	Notes  *string                `json:"notes,omitempty"`
	Type   BillingPaymentTermType `json:"type"`
}

// BillingInvoice defines model for BillingInvoice.
type BillingInvoice struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time   `json:"createdAt,omitempty"`
	Currency  CurrencyCode `json:"currency"`
	Customer  BillingParty `json:"customer"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                   `json:"description,omitempty"`
	Discounts   *[]BillingInvoiceDiscount `json:"discounts,omitempty"`

	// DueAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	DueAt *time.Time `json:"dueAt,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// IssuedAt The time the invoice was issued.
	//
	// Depending on the status of the invoice this can mean multiple things:
	// - draft, gathering: The time the invoice will be issued based on the workflow settings.
	// - issued: The time the invoice was issued.
	IssuedAt *time.Time            `json:"issuedAt,omitempty"`
	Lines    *[]BillingInvoiceLine `json:"lines,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Number Number specifies the human readable key used to reference this Invoice.
	//
	// The number only gets populated after the invoice had been issued.
	//
	// Please note that the number is (depending on the upstream settings) either unique for the
	// whole organization or unique for the customer, or in multi (stripe) account setups unique for the
	// account.
	Number    *BillingInvoiceNumber  `json:"number,omitempty"`
	Payment   *BillingInvoicePayment `json:"payment,omitempty"`
	Period    *BillingPeriod         `json:"period,omitempty"`
	Preceding *[]BillingDocumentRef  `json:"preceding,omitempty"`
	Status    BillingInvoiceStatus   `json:"status"`
	Supplier  BillingParty           `json:"supplier"`
	Totals    BillingInvoiceTotals   `json:"totals"`
	Type      BillingInvoiceType     `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	//
	// For updates the updatedAt field is used to detect conflicts.
	UpdatedAt time.Time `json:"updatedAt"`

	// VoidedAt The time the invoice was voided.
	//
	// If the invoice was voided, this field will be set to the time the invoice was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`

	// Workflow The workflow associated with the invoice.
	//
	// It is always a snapshot of the workflow settings at the time of invoice creation. The
	// field is optional as it should be explicitly requested with expand options.
	Workflow *BillingInvoiceWorkflowSettings `json:"workflow,omitempty"`
}

// BillingInvoiceCreateInput defines model for BillingInvoiceCreateInput.
type BillingInvoiceCreateInput struct {
	// AsOf The time as of which the invoice is created.
	//
	// If not provided, the current time is used.
	AsOf *time.Time `json:"AsOf,omitempty"`

	// IncludePendingLines The pending line items to include in the invoice, if not provided:
	// - all line items that have invoice_at < asOf will be included
	// - all usage based line items will be included up to asOf, new usage-based line items will be staged for the rest
	// of the billing cycle
	IncludePendingLines *[]string `json:"IncludePendingLines,omitempty"`
}

// BillingInvoiceDiscount defines model for BillingInvoiceDiscount.
type BillingInvoiceDiscount struct {
	Amount  Numeric     `json:"amount"`
	Base    *Numeric    `json:"base,omitempty"`
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingInvoiceExpand InvoiceExpand specifies the parts of the invoice to expand in the list output.
type BillingInvoiceExpand string

// BillingInvoiceLine defines model for BillingInvoiceLine.
type BillingInvoiceLine struct {
	union json.RawMessage
}

// BillingInvoiceLineCreateItem defines model for BillingInvoiceLineCreateItem.
type BillingInvoiceLineCreateItem struct {
	union json.RawMessage
}

// BillingInvoiceLineCreateOrUpdate defines model for BillingInvoiceLineCreateOrUpdate.
type BillingInvoiceLineCreateOrUpdate struct {
	union json.RawMessage
}

// BillingInvoiceNumber InvoiceNumber is a unique identifier for the invoice, generated by the
// invoicing app.
//
// The uniqueness depends on a lot of factors:
// - app setting (unique per app or unique per customer)
// - multiple app scenarios (multiple apps generating invoices with the same prefix)
type BillingInvoiceNumber = string

// BillingInvoiceOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type BillingInvoiceOrderBy string

// BillingInvoicePayment defines model for BillingInvoicePayment.
type BillingInvoicePayment struct {
	Terms *BillingPaymentTerms `json:"terms,omitempty"`
}

// BillingInvoiceReference defines model for BillingInvoiceReference.
type BillingInvoiceReference struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id     string                `json:"id"`
	Number *BillingInvoiceNumber `json:"number,omitempty"`
}

// BillingInvoiceStatus InvoiceStatus describes the status of an invoice.
type BillingInvoiceStatus string

// BillingInvoiceTotals defines model for BillingInvoiceTotals.
type BillingInvoiceTotals struct {
	Advance      *Numeric `json:"advance,omitempty"`
	Charge       *Numeric `json:"charge,omitempty"`
	Discount     *Numeric `json:"discount,omitempty"`
	Due          *Numeric `json:"due,omitempty"`
	Payable      Numeric  `json:"payable"`
	Rounding     *Numeric `json:"rounding,omitempty"`
	Sum          Numeric  `json:"sum"`
	Tax          *Numeric `json:"tax,omitempty"`
	TaxIncluded  *Numeric `json:"taxIncluded,omitempty"`
	Total        Numeric  `json:"total"`
	TotalWithTax Numeric  `json:"totalWithTax"`
}

// BillingInvoiceType defines model for BillingInvoiceType.
type BillingInvoiceType string

// BillingInvoiceWorkflowSettings defines model for BillingInvoiceWorkflowSettings.
type BillingInvoiceWorkflowSettings struct {
	Apps *BillingProfileAppsOrReference `json:"apps,omitempty"`

	// SourceBillingProfileID sourceBillingProfileID is the billing profile on which the workflow was based on.
	//
	// The profile is snapshotted on invoice creation, after which it can be altered independently
	// of the profile itself.
	SourceBillingProfileID string                  `json:"sourceBillingProfileID"`
	Timezone               string                  `json:"timezone"`
	Workflow               BillingWorkflowSettings `json:"workflow"`
}

// BillingLineCharge defines model for BillingLineCharge.
type BillingLineCharge struct {
	// Amount Fixed discount amount to apply (calculated if percent present).
	Amount Numeric `json:"amount"`
	Code   *string `json:"code,omitempty"`

	// Percent Percentage if fixed amount not applied
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingLineDiscount defines model for BillingLineDiscount.
type BillingLineDiscount struct {
	// Amount Fixed discount amount to apply (calculated if percent present).
	Amount Numeric `json:"amount"`
	Code   *string `json:"code,omitempty"`

	// Percent Percentage if fixed amount not applied
	Percent *Percentage `json:"percent,omitempty"`
	Reason  *string     `json:"reason,omitempty"`
}

// BillingLineStatus defines model for BillingLineStatus.
type BillingLineStatus string

// BillingManualFeeLine BillingManualFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingManualFeeLine struct {
	Charges *[]BillingLineCharge `json:"charges,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time   `json:"createdAt,omitempty"`
	Currency  CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                   `json:"name"`
	Period       BillingPeriod            `json:"period"`
	Price        Numeric                  `json:"price"`
	Quantity     Numeric                  `json:"quantity"`
	Status       BillingLineStatus        `json:"status"`
	TaxOverrides *TaxConfig               `json:"taxOverrides"`
	Taxes        *[]BillingTaxItem        `json:"taxes,omitempty"`
	Total        *Numeric                 `json:"total,omitempty"`
	Type         BillingManualFeeLineType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BillingManualFeeLineType defines model for BillingManualFeeLine.Type.
type BillingManualFeeLineType string

// BillingManualFeeLineCreateItem BillingManualFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingManualFeeLineCreateItem struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                  `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount   `json:"discounts,omitempty"`
	Invoice     *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                             `json:"name"`
	Period       BillingPeriod                      `json:"period"`
	Price        Numeric                            `json:"price"`
	Quantity     Numeric                            `json:"quantity"`
	TaxOverrides *TaxConfig                         `json:"taxOverrides"`
	Type         BillingManualFeeLineCreateItemType `json:"type"`
}

// BillingManualFeeLineCreateItemType defines model for BillingManualFeeLineCreateItem.Type.
type BillingManualFeeLineCreateItemType string

// BillingManualFeeLineCreateOrUpdate BillingManualFeeLine represents a line item that is sold to the customer as a manually added fee.
type BillingManualFeeLineCreateOrUpdate struct {
	Charges  *[]BillingLineCharge `json:"charges,omitempty"`
	Currency CurrencyCode         `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string                `json:"description,omitempty"`
	Discounts   *[]BillingLineDiscount `json:"discounts,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      string                   `json:"id"`
	Invoice *BillingInvoiceReference `json:"invoice,omitempty"`

	// InvoiceAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	InvoiceAt time.Time `json:"invoiceAt"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name         string                                 `json:"name"`
	Period       BillingPeriod                          `json:"period"`
	Price        Numeric                                `json:"price"`
	Quantity     Numeric                                `json:"quantity"`
	TaxOverrides *TaxConfig                             `json:"taxOverrides"`
	Type         BillingManualFeeLineCreateOrUpdateType `json:"type"`
}

// BillingManualFeeLineCreateOrUpdateType defines model for BillingManualFeeLineCreateOrUpdate.Type.
type BillingManualFeeLineCreateOrUpdateType string

// BillingParty defines model for BillingParty.
type BillingParty struct {
	Addresses *[]Address `json:"addresses,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id    *string             `json:"id,omitempty"`
	Name  *string             `json:"name,omitempty"`
	TaxId *BillingTaxIdentity `json:"taxId,omitempty"`
}

// BillingPartyCreate defines model for BillingPartyCreate.
type BillingPartyCreate struct {
	Addresses *[]Address          `json:"addresses,omitempty"`
	Name      *string             `json:"name,omitempty"`
	TaxId     *BillingTaxIdentity `json:"taxId,omitempty"`
}

// BillingPaymentTermDueDate defines model for BillingPaymentTermDueDate.
type BillingPaymentTermDueDate = BillingGenericPaymentTerms

// BillingPaymentTermInstant defines model for BillingPaymentTermInstant.
type BillingPaymentTermInstant = BillingGenericPaymentTerms

// BillingPaymentTermType defines model for BillingPaymentTermType.
type BillingPaymentTermType string

// BillingPaymentTerms defines model for BillingPaymentTerms.
type BillingPaymentTerms struct {
	union json.RawMessage
}

// BillingPeriod defines model for BillingPeriod.
type BillingPeriod struct {
	// End [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	End time.Time `json:"end"`

	// Start [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	Start time.Time `json:"start"`
}

// BillingProfile Profile represents a billing profile
type BillingProfile struct {
	Apps BillingProfileAppsOrReference `json:"apps"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Default   bool       `json:"default"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string       `json:"name"`
	Supplier BillingParty `json:"supplier"`

	// UpdatedAt When the resource was last updated.
	//
	// For updates this field must be set to the last update time to detect conflicts.
	UpdatedAt time.Time       `json:"updatedAt"`
	Workflow  BillingWorkflow `json:"workflow"`
}

// BillingProfileAppReferences ProfileAppsReference represents the references (id, type) to the apps used by a billing profile
type BillingProfileAppReferences struct {
	Invoicing AppReference `json:"invoicing"`
	Payment   AppReference `json:"payment"`
	Tax       AppReference `json:"tax"`
}

// BillingProfileApps ProfileApps represents the applications used by a billing profile
type BillingProfileApps struct {
	Invoicing App `json:"invoicing"`
	Payment   App `json:"payment"`
	Tax       App `json:"tax"`
}

// BillingProfileAppsOrReference defines model for BillingProfileAppsOrReference.
type BillingProfileAppsOrReference struct {
	union json.RawMessage
}

// BillingProfileCreateAppsInput ProfileCreateAppsInput represents the input for creating a billing profile's apps
type BillingProfileCreateAppsInput struct {
	Invoicing BillingWorkflowAppIdOrType `json:"invoicing"`
	Payment   BillingWorkflowAppIdOrType `json:"payment"`
	Tax       BillingWorkflowAppIdOrType `json:"tax"`
}

// BillingProfileCreateInput ProfileCreateInput represents the input for creating a billing profile
type BillingProfileCreateInput struct {
	// Apps ProfileCreateAppsInput represents the input for creating a billing profile's apps
	Apps    BillingProfileCreateAppsInput `json:"apps"`
	Default bool                          `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string             `json:"name"`
	Supplier BillingPartyCreate `json:"supplier"`
	Workflow BillingWorkflow    `json:"workflow"`
}

// BillingProfileCreateOrUpdate Profile represents a billing profile
type BillingProfileCreateOrUpdate struct {
	Default bool `json:"default"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name     string       `json:"name"`
	Supplier BillingParty `json:"supplier"`

	// UpdatedAt When the resource was last updated.
	//
	// For updates this field must be set to the last update time to detect conflicts.
	UpdatedAt time.Time       `json:"updatedAt"`
	Workflow  BillingWorkflow `json:"workflow"`
}

// BillingProfileExpand ProfileExpand details what profile fields to expand
type BillingProfileExpand string

// BillingProfileOrderBy ProfileOrderBy specifies the ordering options for profiles
type BillingProfileOrderBy string

// BillingTaxBehavior defines model for BillingTaxBehavior.
type BillingTaxBehavior string

// BillingTaxIdentificationCode defines model for BillingTaxIdentificationCode.
type BillingTaxIdentificationCode = string

// BillingTaxIdentity defines model for BillingTaxIdentity.
type BillingTaxIdentity struct {
	Code *BillingTaxIdentificationCode `json:"code,omitempty"`
}

// BillingTaxItem defines model for BillingTaxItem.
type BillingTaxItem struct {
	Behavior  *BillingTaxBehavior `json:"behavior,omitempty"`
	Config    *TaxConfig          `json:"config,omitempty"`
	Percent   *Percentage         `json:"percent,omitempty"`
	Surcharge *Numeric            `json:"surcharge,omitempty"`
}

// BillingVoidInvoiceAction InvoiceVoidAction describes how to handle the voided line items.
type BillingVoidInvoiceAction struct {
	Action     BillingVoidInvoiceLineAction `json:"action"`
	Percentage Percentage                   `json:"percentage"`
}

// BillingVoidInvoiceInput Request to void an invoice
type BillingVoidInvoiceInput struct {
	// Action The action to take on the voided line items.
	Action BillingVoidInvoiceAction `json:"action"`

	// Overrides Per line item overrides for the action.
	//
	// If not specified, the `action` will be applied to all line items.
	Overrides *[]BillingVoidInvoiceLineOverride `json:"overrides"`

	// Reason The reason for voiding the invoice.
	Reason string `json:"reason"`
}

// BillingVoidInvoiceLineAction defines model for BillingVoidInvoiceLineAction.
type BillingVoidInvoiceLineAction string

// BillingVoidInvoiceLineOverride VoidInvoiceLineOverride describes how to handle a specific line item in the invoice when voiding.
type BillingVoidInvoiceLineOverride struct {
	Action BillingVoidInvoiceAction `json:"action"`

	// LineId ULID (Universally Unique Lexicographically Sortable Identifier).
	LineId string `json:"lineId"`
}

// BillingWorkflow Workflow represents a billing workflow
type BillingWorkflow struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id A unique identifier for the resource.
	Id        *string                           `json:"id,omitempty"`
	Invoicing *BillingWorkflowInvoicingSettings `json:"invoicing,omitempty"`
	Payment   *BillingWorkflowPaymentSettings   `json:"payment,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// BillingWorkflowAppIdOrType AppIdOrType can be used to reference an app during creation only.
//
// This can be either an AppType or the ULID of an app.
type BillingWorkflowAppIdOrType = string

// BillingWorkflowCollectionAlignment CollectionAlignment specifies when the pending line items should be collected into
// an invoice.
type BillingWorkflowCollectionAlignment string

// BillingWorkflowCollectionMethod CollectionMethod specifies how the invoice should be collected (automatic vs manual)
type BillingWorkflowCollectionMethod string

// BillingWorkflowCollectionSettings defines model for BillingWorkflowCollectionSettings.
type BillingWorkflowCollectionSettings struct {
	// Alignment When to collect the pending line items into an invoice.
	Alignment *BillingWorkflowCollectionAlignment `json:"alignment,omitempty"`

	// Interval The interval for collecting the pending line items into an invoice.
	Interval *string `json:"interval,omitempty"`
}

// BillingWorkflowInvoicingSettings WorkflowInvoice represents the invoice settings for a billing workflow
type BillingWorkflowInvoicingSettings struct {
	// AutoAdvance Whether to automatically issue the invoice after the draftPeriod has passed.
	AutoAdvance *bool `json:"autoAdvance,omitempty"`

	// DraftPeriod The period for the invoice to be kept in draft status for manual reviews.
	DraftPeriod *string `json:"draftPeriod,omitempty"`

	// DueAfter The period after which the invoice is due.
	DueAfter *string `json:"dueAfter,omitempty"`
}

// BillingWorkflowPaymentSettings WorkflowPaymentSettings represents the payment settings for a billing workflow
type BillingWorkflowPaymentSettings struct {
	CollectionMethod *BillingWorkflowCollectionMethod `json:"collectionMethod,omitempty"`
}

// BillingWorkflowSettings defines model for BillingWorkflowSettings.
type BillingWorkflowSettings struct {
	Collection *BillingWorkflowCollectionSettings `json:"collection,omitempty"`
	Invoicing  *BillingWorkflowInvoicingSettings  `json:"invoicing,omitempty"`
	Payment    *BillingWorkflowPaymentSettings    `json:"payment,omitempty"`
}

// CheckoutSessionCustomTextAfterSubmitParams Stripe CheckoutSession.custom_text
type CheckoutSessionCustomTextAfterSubmitParams struct {
	AfterSubmit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"afterSubmit,omitempty"`
	ShippingAddress *struct {
		Message *string `json:"message,omitempty"`
	} `json:"shippingAddress,omitempty"`
	Submit *struct {
		Message *string `json:"message,omitempty"`
	} `json:"submit,omitempty"`
	TermsOfServiceAcceptance *struct {
		Message *string `json:"message,omitempty"`
	} `json:"termsOfServiceAcceptance,omitempty"`
}

// CheckoutSessionUIMode Stripe CheckoutSession.ui_mode
type CheckoutSessionUIMode string

// ClientAppStartResponse Response from the client app (OpenMeter backend) to start the OAuth2 flow.
type ClientAppStartResponse struct {
	// Url The URL to start the OAuth2 authorization code grant flow.
	Url string `json:"url"`
}

// ConflictProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ConflictProblemResponse = UnexpectedProblemResponse

// CountryCode [ISO 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-2 country code.
// Custom two-letter country codes are also supported for convenience.
type CountryCode = string

// CreateStripeCheckoutSessionRequest Create Stripe checkout session request.
type CreateStripeCheckoutSessionRequest struct {
	// AppId If not provided, the default Stripe app is used if any.
	AppId *string `json:"appId,omitempty"`

	// Customer Provide a customer ID to use an existing OpenMeter customer.
	// or provide a customer object to create a new customer.
	Customer CreateStripeCheckoutSessionRequest_Customer `json:"customer"`

	// Options Options passed to Stripe when creating the checkout session.
	Options CreateStripeCheckoutSessionRequestOptions `json:"options"`

	// StripeCustomerId Stripe customer ID.
	// If not provided OpenMeter creates a new Stripe customer or
	// uses the OpenMeter customer's default Stripe customer ID.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
}

// CreateStripeCheckoutSessionRequest_Customer Provide a customer ID to use an existing OpenMeter customer.
// or provide a customer object to create a new customer.
type CreateStripeCheckoutSessionRequest_Customer struct {
	union json.RawMessage
}

// CreateStripeCheckoutSessionRequestOptions Create Stripe checkout session options
type CreateStripeCheckoutSessionRequestOptions struct {
	CancelURL         *string `json:"cancelURL,omitempty"`
	ClientReferenceID *string `json:"clientReferenceID,omitempty"`

	// Currency Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
	// Custom three-letter currency codes are also supported for convenience.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// CustomText Stripe CheckoutSession.custom_text
	CustomText         *CheckoutSessionCustomTextAfterSubmitParams `json:"customText,omitempty"`
	Metadata           *map[string]string                          `json:"metadata,omitempty"`
	PaymentMethodTypes *[]string                                   `json:"paymentMethodTypes,omitempty"`
	ReturnURL          *string                                     `json:"returnURL,omitempty"`
	SuccessURL         *string                                     `json:"successURL,omitempty"`

	// UiMode Stripe CheckoutSession.ui_mode
	UiMode *CheckoutSessionUIMode `json:"uiMode,omitempty"`
}

// CreateStripeCheckoutSessionResult Create Stripe Checkout Session response.
type CreateStripeCheckoutSessionResult struct {
	// CancelURL Cancel URL.
	CancelURL *string `json:"cancelURL,omitempty"`

	// CustomerId The OpenMeter customer ID.
	CustomerId string `json:"customerId"`

	// Mode Mode
	// Always `setup` for now.
	Mode StripeCheckoutSessionMode `json:"mode"`

	// ReturnURL Return URL.
	ReturnURL *string `json:"returnURL,omitempty"`

	// SessionId The checkout session ID.
	SessionId string `json:"sessionId"`

	// SetupIntentId The checkout session setup intent ID.
	SetupIntentId string `json:"setupIntentId"`

	// StripeCustomerId The Stripe customer ID.
	StripeCustomerId string `json:"stripeCustomerId"`

	// SuccessURL Success URL.
	SuccessURL *string `json:"successURL,omitempty"`

	// Url URL to show the checkout session.
	Url string `json:"url"`
}

// CurrencyCode Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
// Custom three-letter currency codes are also supported for convenience.
type CurrencyCode = string

// Customer A customer object.
type Customer struct {
	// BillingAddress The billing address of the customer.
	// Used for tax and invoicing.
	BillingAddress *Address `json:"billingAddress,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency Currency of the customer.
	// Used for billing, tax and invoicing.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// External External mappings for the customer.
	External *CustomerExternalMapping `json:"external,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// PrimaryEmail The primary email address of the customer.
	PrimaryEmail *string `json:"primaryEmail,omitempty"`

	// Timezone Timezone of the customer.
	Timezone *string `json:"timezone,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsageAttribution Mapping to attribute metered usage to the customer
	UsageAttribution CustomerUsageAttribution `json:"usageAttribution"`
}

// CustomerExternalMapping External mappings for the customer.
type CustomerExternalMapping struct {
	// StripeCustomerId The Stripe customer ID.
	// Mapping to a Stripe Customer object.
	// Required to use Stripe as an invocing provider.
	StripeCustomerId *string `json:"stripeCustomerId,omitempty"`
}

// CustomerId Create Stripe checkout session customer ID.
type CustomerId struct {
	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id string `json:"id"`
}

// CustomerList A page of results.
type CustomerList struct {
	// Items The items in the page.
	Items []Customer `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// CustomerOverridePaginatedResponse Paginated response
type CustomerOverridePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingCustomerOverride `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// CustomerUsageAttribution Mapping to attribute metered usage to the customer.
// One customer can have multiple subjects,
// but one subject can only belong to one customer.
type CustomerUsageAttribution struct {
	// SubjectKeys The subjects that are attributed to the customer.
	SubjectKeys []string `json:"subjectKeys"`
}

// Entitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type Entitlement struct {
	union json.RawMessage
}

// EntitlementBaseTemplate Shared fields of the entitlement templates.
type EntitlementBaseTemplate struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string `json:"subjectKey"`

	// Type The type of the entitlement.
	Type EntitlementType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementBoolean Shared fields of the entitlement templates.
type EntitlementBoolean = EntitlementBaseTemplate

// EntitlementBooleanCreateInputs Create inputs for boolean entitlement
type EntitlementBooleanCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                          `json:"metadata,omitempty"`
	Type     EntitlementBooleanCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementBooleanCreateInputsType defines model for EntitlementBooleanCreateInputs.Type.
type EntitlementBooleanCreateInputsType string

// EntitlementCreateInputs Create inputs for entitlement
type EntitlementCreateInputs struct {
	union json.RawMessage
}

// EntitlementGrant The grant.
type EntitlementGrant struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// EntitlementId The unique entitlement ULID that the grant is associated with.
	EntitlementId *string `json:"entitlementId,omitempty"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// ExpiresAt The time the grant expires.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// NextRecurrence The next time the grant will recurr.
	NextRecurrence *time.Time `json:"nextRecurrence,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The recurrence period of the grant.
	Recurrence *RecurringPeriod `json:"recurrence,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// VoidedAt The time the grant was voided.
	VoidedAt *time.Time `json:"voidedAt,omitempty"`
}

// EntitlementGrantCreateInput The grant creation input.
type EntitlementGrantCreateInput struct {
	// Amount The amount to grant. Should be a positive number.
	Amount float64 `json:"amount"`

	// EffectiveAt Effective date for grants and anchor for recurring grants. Provided value will be ceiled to metering windowSize (minute).
	EffectiveAt time.Time `json:"effectiveAt"`

	// Expiration The grant expiration definition
	Expiration ExpirationPeriod `json:"expiration"`

	// MaxRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MaxRolloverAmount *float64 `json:"maxRolloverAmount,omitempty"`

	// Metadata The grant metadata.
	Metadata *Metadata `json:"metadata,omitempty"`

	// MinRolloverAmount Grants are rolled over at reset, after which they can have a different balance compared to what they had before the reset.
	// Balance after the reset is calculated as: Balance_After_Reset = MIN(MaxRolloverAmount, MAX(Balance_Before_Reset, MinRolloverAmount))
	MinRolloverAmount *float64 `json:"minRolloverAmount,omitempty"`

	// Priority The priority of the grant. Grants with higher priority are applied first.
	// Priority is a positive decimal numbers. With lower numbers indicating higher importance.
	// For example, a priority of 1 is more urgent than a priority of 2.
	// When there are several grants available for the same subject, the system selects the grant with the highest priority.
	// In cases where grants share the same priority level, the grant closest to its expiration will be used first.
	// In the case of two grants have identical priorities and expiration dates, the system will use the grant that was created first.
	Priority *uint8 `json:"priority,omitempty"`

	// Recurrence The subject of the grant.
	Recurrence *RecurringPeriodCreateInput `json:"recurrence,omitempty"`
}

// EntitlementMetered Metered entitlements are useful for many different use cases, from setting up usage based access to implementing complex credit systems.
// Access is determined based on feature usage using a balance calculation (the "usage allowance" provided by the issued grants is "burnt down" by the usage).
type EntitlementMetered struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// LastReset The time the last reset happened.
	LastReset *time.Time `json:"lastReset,omitempty"`

	// MeasureUsageFrom The time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom *time.Time `json:"measureUsageFrom,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool `json:"preserveOverageAtReset,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                 `json:"subjectKey"`
	Type       EntitlementMeteredType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod THe usage period of the entitlement.
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementMeteredType defines model for EntitlementMetered.Type.
type EntitlementMeteredType string

// EntitlementMeteredCreateInputs Create inpurs for metered entitlement
type EntitlementMeteredCreateInputs struct {
	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IsUnlimited Deprecated, ignored by the backend. Please use isSoftLimit instead; this field will be removed in the future.
	// Deprecated:
	IsUnlimited *bool `json:"isUnlimited,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// MeasureUsageFrom Defines the time from which usage is measured. If not specified on creation, defaults to entitlement creation time.
	MeasureUsageFrom *MeasureUsageFrom `json:"measureUsageFrom,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                              `json:"preserveOverageAtReset,omitempty"`
	Type                   EntitlementMeteredCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod RecurringPeriodCreateInput `json:"usagePeriod"`
}

// EntitlementMeteredCreateInputsType defines model for EntitlementMeteredCreateInputs.Type.
type EntitlementMeteredCreateInputsType string

// EntitlementOrderBy Order by options for entitlements.
type EntitlementOrderBy string

// EntitlementPaginatedResponse Paginated response
type EntitlementPaginatedResponse struct {
	// Items The items in the current page.
	Items []Entitlement `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// EntitlementStatic A static entitlement.
type EntitlementStatic struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CurrentUsagePeriod The current usage period.
	CurrentUsagePeriod *Period `json:"currentUsagePeriod,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// FeatureId The feature the subject is entitled to use.
	FeatureId string `json:"featureId"`

	// FeatureKey The feature the subject is entitled to use.
	FeatureKey string `json:"featureKey"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// SubjectKey The identifier key unique to the subject
	SubjectKey string                `json:"subjectKey"`
	Type       EntitlementStaticType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UsagePeriod The defined usage period of the entitlement
	UsagePeriod *RecurringPeriod `json:"usagePeriod,omitempty"`
}

// EntitlementStaticType defines model for EntitlementStatic.Type.
type EntitlementStaticType string

// EntitlementStaticCreateInputs Create inputs for static entitlement
type EntitlementStaticCreateInputs struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// FeatureId The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureId *string `json:"featureId,omitempty"`

	// FeatureKey The feature the subject is entitled to use.
	// Either featureKey or featureId is required.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                         `json:"metadata,omitempty"`
	Type     EntitlementStaticCreateInputsType `json:"type"`

	// UsagePeriod The usage period associated with the entitlement.
	UsagePeriod *RecurringPeriodCreateInput `json:"usagePeriod,omitempty"`
}

// EntitlementStaticCreateInputsType defines model for EntitlementStaticCreateInputs.Type.
type EntitlementStaticCreateInputsType string

// EntitlementType Type of the entitlement.
type EntitlementType = string

// EntitlementValue Entitlements are the core of OpenMeter access management. They define access to features for subjects. Entitlements can be metered, boolean, or static.
type EntitlementValue struct {
	// Balance Only available for metered entitlements. Metered entitlements are built around a balance calculation where feature usage is deducted from the issued grants. Balance represents the remaining balance of the entitlement, it's value never turns negative.
	Balance *float64 `json:"balance,omitempty"`

	// Config Only available for static entitlements. The JSON parsable config of the entitlement.
	Config *string `json:"config,omitempty"`

	// HasAccess Whether the subject has access to the feature. Shared accross all entitlement types.
	HasAccess *bool `json:"hasAccess,omitempty"`

	// Overage Only available for metered entitlements. Overage represents the usage that wasn't covered by grants, e.g. if the subject had a total feature usage of 100 in the period but they were only granted 80, there would be 20 overage.
	Overage *float64 `json:"overage,omitempty"`

	// Usage Only available for metered entitlements. Returns the total feature usage in the current period.
	Usage *float64 `json:"usage,omitempty"`
}

// Event CloudEvents Specification JSON Schema
type Event = event.Event

// ExpirationDuration The expiration duration enum
type ExpirationDuration string

// ExpirationPeriod The grant expiration definition
type ExpirationPeriod struct {
	// Count The number of time units in the expiration period.
	Count int `json:"count"`

	// Duration The unit of time for the expiration period.
	Duration ExpirationDuration `json:"duration"`
}

// Feature Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type Feature struct {
	// ArchivedAt Timestamp of when the resource was archived.
	ArchivedAt *time.Time `json:"archivedAt,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Id Readonly unique ULID identifier.
	Id *string `json:"id,omitempty"`

	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// FeatureCreateInputs Represents a feature that can be enabled or disabled for a plan.
// Used both for product catalog and entitlements.
type FeatureCreateInputs struct {
	// Key A key is a unique string that is used to identify a resource.
	Key      string    `json:"key"`
	Metadata *Metadata `json:"metadata,omitempty"`

	// MeterGroupByFilters Optional meter group by filters.
	// Useful if the meter scope is broader than what feature tracks.
	// Example scenario would be a meter tracking all token use with groupBy fields for the model,
	// then the feature could filter for model=gpt-4.
	MeterGroupByFilters *map[string]string `json:"meterGroupByFilters,omitempty"`

	// MeterSlug A key is a unique string that is used to identify a resource.
	MeterSlug *string `json:"meterSlug,omitempty"`
	Name      string  `json:"name"`
}

// FeatureMeta Limited representation of a feature resource which includes only its unique identifiers (id, key).
type FeatureMeta struct {
	// Id Unique identifier of a feature.
	Id string `json:"id"`

	// Key The key is an immutable unique identifier of the feature used throughout the API,
	// for example when interacting with a subject's entitlements.
	Key string `json:"key"`
}

// FeatureOrderBy Order by options for features.
type FeatureOrderBy string

// FeaturePaginatedResponse Paginated response
type FeaturePaginatedResponse struct {
	// Items The items in the current page.
	Items []Feature `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// FlatPrice Flat price.
type FlatPrice struct {
	// Amount The amount of the flat price.
	Amount Numeric       `json:"amount"`
	Type   FlatPriceType `json:"type"`
}

// FlatPriceType defines model for FlatPrice.Type.
type FlatPriceType string

// FlatPriceUpdateItem Flat price.
type FlatPriceUpdateItem struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`
}

// FlatPriceWithPaymentTerm Flat price with payment term.
type FlatPriceWithPaymentTerm struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`

	// PaymentTerm The payment term of the flat price.
	// Defaults to in advance.
	PaymentTerm *PricePaymentTerm            `json:"paymentTerm,omitempty"`
	Type        FlatPriceWithPaymentTermType `json:"type"`
}

// FlatPriceWithPaymentTermType defines model for FlatPriceWithPaymentTerm.Type.
type FlatPriceWithPaymentTermType string

// FlatPriceWithPaymentTermUpdateItem Flat price with payment term.
type FlatPriceWithPaymentTermUpdateItem struct {
	// Amount The amount of the flat price.
	Amount Numeric `json:"amount"`

	// PaymentTerm The payment term of the flat price.
	// Defaults to in advance.
	PaymentTerm *PricePaymentTerm `json:"paymentTerm,omitempty"`
}

// ForbiddenProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ForbiddenProblemResponse = UnexpectedProblemResponse

// GrantBurnDownHistorySegment A segment of the grant burn down history.
//
// A given segment represents the usage of a grant between events that changed either the grant burn down priority order or the usag period.
type GrantBurnDownHistorySegment struct {
	// BalanceAtEnd The entitlement balance at the end of the period.
	BalanceAtEnd *float64 `json:"balanceAtEnd,omitempty"`

	// BalanceAtStart entitlement balance at the start of the period.
	BalanceAtStart *float64 `json:"balanceAtStart,omitempty"`

	// GrantBalancesAtEnd The balance breakdown of each active grant at the end of the period: GrantID: Balance
	GrantBalancesAtEnd *map[string]float64 `json:"grantBalancesAtEnd,omitempty"`

	// GrantBalancesAtStart The balance breakdown of each active grant at the start of the period: GrantID: Balance
	GrantBalancesAtStart *map[string]float64 `json:"grantBalancesAtStart,omitempty"`

	// GrantUsages Which grants were actually burnt down in the period and by what amount.
	GrantUsages *[]GrantUsageRecord `json:"grantUsages,omitempty"`

	// Overage Overuse that wasn't covered by grants.
	Overage *float64 `json:"overage,omitempty"`

	// Period The period of the segment.
	Period Period `json:"period"`

	// Usage The total usage of the grant in the period.
	Usage *float64 `json:"usage,omitempty"`
}

// GrantOrderBy Order by options for grants.
type GrantOrderBy string

// GrantPaginatedResponse Paginated response
type GrantPaginatedResponse struct {
	// Items The items in the current page.
	Items []EntitlementGrant `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// GrantUsageRecord Usage Record
type GrantUsageRecord struct {
	// GrantId The id of the grant
	GrantId string `json:"grantId"`

	// Usage The usage in the period
	Usage float64 `json:"usage"`
}

// IngestedEvent An ingested event with optional validation error.
type IngestedEvent struct {
	// Event CloudEvents Specification JSON Schema
	Event Event `json:"event"`

	// IngestedAt The date and time the event was ingested.
	IngestedAt time.Time `json:"ingestedAt"`

	// StoredAt The date and time the event was stored.
	StoredAt time.Time `json:"storedAt"`

	// ValidationError The validation error if the event failed validation.
	ValidationError *string `json:"validationError,omitempty"`
}

// InternalServerErrorProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type InternalServerErrorProblemResponse = UnexpectedProblemResponse

// InvoicePaginatedResponse Paginated response
type InvoicePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingInvoice `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// ListEntitlementsResult defines model for ListEntitlementsResult.
type ListEntitlementsResult struct {
	union json.RawMessage
}

// ListEntitlementsResult0 defines model for .
type ListEntitlementsResult0 = []Entitlement

// ListFeaturesResult defines model for ListFeaturesResult.
type ListFeaturesResult struct {
	union json.RawMessage
}

// ListFeaturesResult0 defines model for .
type ListFeaturesResult0 = []Feature

// MarketplaceListing A marketplace listing.
// Represent an available app in the app marketplace that can be installed to the organization.
//
// Marketplace apps only exist in config so they don't extend the Resource model.
type MarketplaceListing struct {
	// Capabilities The app's capabilities.
	Capabilities []AppCapability `json:"capabilities"`

	// Description The app's description.
	Description string `json:"description"`

	// IconUrl The app's icon URL.
	IconUrl string `json:"iconUrl"`

	// Name The app's name.
	Name string `json:"name"`

	// Type The app's type
	Type AppType `json:"type"`
}

// MarketplaceListingList A page of results.
type MarketplaceListingList struct {
	// Items The items in the page.
	Items []MarketplaceListing `json:"items"`

	// Page The page number.
	Page int `json:"page"`

	// PageSize The number of items in the page.
	PageSize int `json:"pageSize"`

	// TotalCount The total number of items.
	TotalCount int `json:"totalCount"`
}

// MeasureUsageFrom Measure usage from
type MeasureUsageFrom struct {
	union json.RawMessage
}

// MeasureUsageFromPreset Start of measurement options
type MeasureUsageFromPreset string

// MeasureUsageFromTime [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
type MeasureUsageFromTime = time.Time

// Metadata Set of key-value pairs.
// Metadata can be used to store additional information about a resource.
type Metadata = map[string]string

// Meter A meter is a configuration that defines how to match and aggregate events.
type Meter = models.Meter

// MeterAggregation The aggregation type to use for the meter.
type MeterAggregation = models.MeterAggregation

// MeterCreate A meter is a configuration that defines how to match and aggregate events.
type MeterCreate = models.Meter

// MeterQueryResult The result of a meter query.
type MeterQueryResult struct {
	Data []MeterQueryRow `json:"data"`

	// From [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	From *time.Time `json:"from,omitempty"`

	// To [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	To *time.Time `json:"to,omitempty"`

	// WindowSize Aggregation window size.
	WindowSize *WindowSize `json:"windowSize,omitempty"`
}

// MeterQueryRow A row in the result of a meter query.
type MeterQueryRow = models.MeterQueryRow

// NotFoundProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type NotFoundProblemResponse = UnexpectedProblemResponse

// NotificationChannel Notification channel with webhook type.
type NotificationChannel = NotificationChannelWebhook

// NotificationChannelCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelCreateRequest = NotificationChannelWebhookCreateRequest

// NotificationChannelMeta Metadata only fields of a notification channel.
type NotificationChannelMeta struct {
	// Id Identifies the notification channel.
	Id *string `json:"id,omitempty"`

	// Type Notification channel type.
	Type *NotificationChannelType `json:"type,omitempty"`
}

// NotificationChannelOrderBy Order by options for notification channels.
type NotificationChannelOrderBy string

// NotificationChannelPaginatedResponse Paginated response
type NotificationChannelPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationChannel `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// NotificationChannelType Type of the notification channel.
type NotificationChannelType string

// NotificationChannelWebhook Notification channel with webhook type.
type NotificationChannelWebhook struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Id Identifies the notification channel.
	Id *string `json:"id,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookType Notification channel type.
type NotificationChannelWebhookType string

// NotificationChannelWebhookCreateRequest Request with input parameters for creating new notification channel with webhook type.
type NotificationChannelWebhookCreateRequest struct {
	// CustomHeaders Custom HTTP headers sent as part of the webhook request.
	CustomHeaders *map[string]string `json:"customHeaders,omitempty"`

	// Disabled Whether the channel is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Name User friendly name of the channel.
	Name string `json:"name"`

	// SigningSecret Signing secret used for webhook request validation on the receiving end.
	//
	// Format: `base64` encoded random bytes optionally prefixed with `whsec_`. Recommended size: 24
	SigningSecret *string `json:"signingSecret,omitempty"`

	// Type Notification channel type.
	Type NotificationChannelWebhookCreateRequestType `json:"type"`

	// Url Webhook URL where the notification is sent.
	Url string `json:"url"`
}

// NotificationChannelWebhookCreateRequestType Notification channel type.
type NotificationChannelWebhookCreateRequestType string

// NotificationEvent Type of the notification event.
type NotificationEvent struct {
	// Annotations Set of key-value pairs managed by the system. Cannot be modified by user.
	Annotations *Annotations `json:"annotations,omitempty"`

	// CreatedAt Timestamp when the notification event was created in RFC 3339 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeliveryStatus The delivery status of the notification event.
	DeliveryStatus *[]NotificationEventDeliveryStatus `json:"deliveryStatus,omitempty"`

	// Id A unique identifier of the notification event.
	Id *string `json:"id,omitempty"`

	// Payload Timestamp when the notification event was created in RFC 3339 format.
	Payload *NotificationEventPayload `json:"payload,omitempty"`

	// Rule The nnotification rule which generated this event.
	Rule *NotificationRule `json:"rule,omitempty"`

	// Type Type of the notification event.
	Type *NotificationEventType `json:"type,omitempty"`
}

// NotificationEventBalanceThresholdPayload Payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayload struct {
	// Data The data of the payload.
	Data *NotificationEventBalanceThresholdPayloadData `json:"data,omitempty"`

	// Id A unique identifier for the notification event the payload belongs to.
	Id *string `json:"id,omitempty"`

	// Timestamp Timestamp when the notification event was created in RFC 3339 format.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// Type Type of the notification event.
	Type *NotificationEventBalanceThresholdPayloadType `json:"type,omitempty"`
}

// NotificationEventBalanceThresholdPayloadType Type of the notification event.
type NotificationEventBalanceThresholdPayloadType string

// NotificationEventBalanceThresholdPayloadData Data of the payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventBalanceThresholdPayloadData struct {
	Entitlement *EntitlementMetered                    `json:"entitlement,omitempty"`
	Feature     *Feature                               `json:"feature,omitempty"`
	Subject     *Subject                               `json:"subject,omitempty"`
	Threshold   *NotificationRuleBalanceThresholdValue `json:"threshold,omitempty"`
	Value       *EntitlementValue                      `json:"value,omitempty"`
}

// NotificationEventDeliveryStatus The delivery status of the notification event.
type NotificationEventDeliveryStatus struct {
	// Channel Notification channel the delivery sattus associated with.
	Channel *NotificationChannelMeta `json:"channel,omitempty"`

	// Reason The reason of the last deliverry state update.
	Reason *string `json:"reason,omitempty"`

	// State Delivery state of the notification event to the channel.
	State *NotificationEventDeliveryStatusState `json:"state,omitempty"`

	// UpdatedAt Timestamp of when the status was last updated in RFC 3339 format.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NotificationEventDeliveryStatusState The delivery state of the notification event to the channel.
type NotificationEventDeliveryStatusState string

// NotificationEventOrderBy Order by options for notification channels.
type NotificationEventOrderBy string

// NotificationEventPaginatedResponse Paginated response
type NotificationEventPaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationEvent `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// NotificationEventPayload Payload for notification event with `entitlements.balance.threshold` type.
type NotificationEventPayload = NotificationEventBalanceThresholdPayload

// NotificationEventType Type of the notification event.
type NotificationEventType string

// NotificationRule Notification rule with entitlements.balance.threshold type.
type NotificationRule = NotificationRuleBalanceThreshold

// NotificationRuleBalanceThreshold Notification rule with entitlements.balance.threshold type.
type NotificationRuleBalanceThreshold struct {
	// Channels List of notification channels the rule applies to.
	Channels []NotificationChannelMeta `json:"channels"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field containing list of features the rule applies to.
	Features *[]FeatureMeta `json:"features,omitempty"`

	// Id Identifies the notification rule.
	Id *string `json:"id,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NotificationRuleBalanceThresholdType Notification rule type.
type NotificationRuleBalanceThresholdType string

// NotificationRuleBalanceThresholdCreateRequest Request with input parameters for creating new notification rule with entitlements.balance.threashold type.
type NotificationRuleBalanceThresholdCreateRequest struct {
	// Channels List of notification channels the rule is applied to.
	Channels []string `json:"channels"`

	// Disabled Whether the rule is disabled or not.
	Disabled *bool `json:"disabled,omitempty"`

	// Features Optional field for defining the scope of notification by feature. It may contain features by id or key.
	Features *[]string `json:"features,omitempty"`

	// Name The user friendly name of the notification rule.
	Name string `json:"name"`

	// Thresholds List of thresholds the rule suppose to be triggered.
	Thresholds []NotificationRuleBalanceThresholdValue `json:"thresholds"`

	// Type Notification rule type.
	Type NotificationRuleBalanceThresholdCreateRequestType `json:"type"`
}

// NotificationRuleBalanceThresholdCreateRequestType Notification rule type.
type NotificationRuleBalanceThresholdCreateRequestType string

// NotificationRuleBalanceThresholdValue Threshold value with multiple supported types.
type NotificationRuleBalanceThresholdValue struct {
	// Type Type of the threshold.
	Type NotificationRuleBalanceThresholdValueType `json:"type"`

	// Value Value of the threshold.
	Value float64 `json:"value"`
}

// NotificationRuleBalanceThresholdValueType Type of the rule in the balance threshold specification.
type NotificationRuleBalanceThresholdValueType string

// NotificationRuleCreateRequest Request with input parameters for creating new notification rule with entitlements.balance.threashold type.
type NotificationRuleCreateRequest = NotificationRuleBalanceThresholdCreateRequest

// NotificationRuleOrderBy Order by options for notification channels.
type NotificationRuleOrderBy string

// NotificationRulePaginatedResponse Paginated response
type NotificationRulePaginatedResponse struct {
	// Items The items in the current page.
	Items []NotificationRule `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// Numeric Numeric represents an arbitrary precision number.
type Numeric = string

// OAuth2AuthorizationCodeGrantErrorType OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorType string

// OpenMeterProductCatalogCreateSubscriptionRequestBody defines model for OpenMeter.ProductCatalog.CreateSubscriptionRequestBody.
type OpenMeterProductCatalogCreateSubscriptionRequestBody struct {
	// ActiveFrom [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	ActiveFrom time.Time `json:"activeFrom"`

	// Currency Three-letter [ISO4217](https://www.iso.org/iso-4217-currency-codes.html) currency code.
	// Custom three-letter currency codes are also supported for convenience.
	Currency CurrencyCode `json:"currency"`

	// CustomerId ULID (Universally Unique Lexicographically Sortable Identifier).
	CustomerId string `json:"customerId"`

	// Customizations Batch processing commands for customizing the susbcription.
	// The key format is `/phases/{phaseKey}/items/{itemKey}`.
	//
	// Add operations insert a new member based on the creation input without altering the existing members.
	//
	// Remove operations remove the member from the document.
	Customizations []OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item `json:"customizations"`
	Plan           struct {
		// Key A key is a unique string that is used to identify a resource.
		Key     string `json:"key"`
		Version int    `json:"version"`
	} `json:"plan"`
}

// OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0 defines model for .
type OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0 struct {
	Op   OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0Op `json:"op"`
	Path string                                                                `json:"path"`

	// Value A rate card defines the pricing and entitlement of a feature or service.
	Value RateCard `json:"value"`
}

// OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0Op defines model for OpenMeterProductCatalogCreateSubscriptionRequestBody.Customizations.0.Op.
type OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0Op string

// OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1 defines model for .
type OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1 struct {
	Op   OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1Op `json:"op"`
	Path string                                                                `json:"path"`
}

// OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1Op defines model for OpenMeterProductCatalogCreateSubscriptionRequestBody.Customizations.1.Op.
type OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1Op string

// OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item defines model for OpenMeter.ProductCatalog.CreateSubscriptionRequestBody.customizations.Item.
type OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item struct {
	union json.RawMessage
}

// Percentage Numeric representation of a percentage
type Percentage = string

// Period A period with a start and end time.
type Period struct {
	// From Period start time.
	From time.Time `json:"from"`

	// To Period end time.
	To time.Time `json:"to"`
}

// PhasesOrderBy Order by options for plan phases.
type PhasesOrderBy string

// Plan Plans provide a template for subscriptions.
type Plan struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the plan becomes effective. When not specified, the plan is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`

	// Status The status of the plan.
	// Computed based on the effective start and end dates:
	// - draft = no effectiveStartDate
	// - active = effectiveStartDate <= now < effectiveEndDate
	// - archived / inactive = effectiveEndDate <= now
	Status *PlanStatus `json:"status,omitempty"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Version Version of the plan. Incremented when the plan is updated.
	Version *int `json:"version,omitempty"`
}

// PlanCreate Resource create operation model.
type PlanCreate struct {
	// Currency The currency code of the plan.
	Currency CurrencyCode `json:"currency"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the plan becomes effective. When not specified, the plan is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases []PlanPhase `json:"phases"`
}

// PlanOrderBy Order by options for plans.
type PlanOrderBy string

// PlanPaginatedResponse Paginated response
type PlanPaginatedResponse struct {
	// Items The items in the current page.
	Items []Plan `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// PlanPhase The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
type PlanPhase struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]AppliedDiscount `json:"discounts,omitempty"`

	// Duration The duration (length) of the phase.
	Duration *string `json:"duration"`

	// Key Unique key among the plan phases. Used to reference the phase in the subscription & plan.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the plan.
	RateCards []RateCard `json:"rateCards"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PlanPhaseCreate Resource create operation model.
type PlanPhaseCreate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]AppliedDiscount `json:"discounts,omitempty"`

	// Duration The duration (length) of the phase.
	Duration *string `json:"duration"`

	// Key Unique key among the plan phases. Used to reference the phase in the subscription & plan.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// RateCards The rate cards of the plan.
	RateCards []RateCard `json:"rateCards"`
}

// PlanPhasePaginatedResponse Paginated response
type PlanPhasePaginatedResponse struct {
	// Items The items in the current page.
	Items []PlanPhase `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// PlanPhaseUpdate Resource create or update operation model.
type PlanPhaseUpdate struct {
	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]AppliedDiscount `json:"discounts,omitempty"`

	// Duration The duration (length) of the phase.
	Duration *string `json:"duration"`

	// Key Unique key among the plan phases. Used to reference the phase in the subscription & plan.
	Key *string `json:"key,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name *string `json:"name,omitempty"`

	// RateCards The rate cards of the plan.
	RateCards *[]RateCard `json:"rateCards,omitempty"`
}

// PlanReference Referebces an exact plan.
type PlanReference struct {
	// Key The plan key.
	Key string `json:"key"`

	// Version The plan version.
	Version int `json:"version"`
}

// PlanStatus The status of a plan.
type PlanStatus string

// PlanUpdate Resource create or update operation model.
type PlanUpdate struct {
	// Currency The currency code of the plan.
	Currency *CurrencyCode `json:"currency,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EffectiveFrom The date and time when the plan becomes effective. When not specified, the plan is a draft.
	EffectiveFrom *time.Time `json:"effectiveFrom,omitempty"`

	// EffectiveTo The date and time when the plan is no longer effective. When not specified, the plan is effective indefinitely.
	EffectiveTo *time.Time `json:"effectiveTo,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name *string `json:"name,omitempty"`

	// Phases The plan phase or pricing ramp allows changing a plan's rate cards over time as a subscription progresses.
	// A phase switch occurs only at the end of a billing period, ensuring that a single subscription invoice will not include charges from different phase prices.
	Phases *[]PlanPhase `json:"phases,omitempty"`
}

// PortalToken A consumer portal token.
//
// Validator doesn't obey required for readOnly properties
// See: https://github.com/stoplightio/spectral/issues/1274
type PortalToken struct {
	// AllowedMeterSlugs Optional, if defined only the specified meters will be allowed.
	AllowedMeterSlugs *[]string `json:"allowedMeterSlugs,omitempty"`

	// CreatedAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Expired   *bool      `json:"expired,omitempty"`

	// ExpiresAt [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// Id ULID (Universally Unique Lexicographically Sortable Identifier).
	Id      *string `json:"id,omitempty"`
	Subject string  `json:"subject"`

	// Token The token is only returned at creation.
	Token *string `json:"token,omitempty"`
}

// PricePaymentTerm The payment term of a flat price.
// One of: in_advance or in_arrears.
type PricePaymentTerm string

// PriceTier A price tier.
// At least one price component is required in each tier.
type PriceTier struct {
	// FlatPrice The flat price component of the tier.
	FlatPrice *FlatPrice `json:"flatPrice"`

	// UnitPrice The unit price component of the tier.
	UnitPrice *UnitPrice `json:"unitPrice"`

	// UpToAmount Up to and including to this quantity will be contained in the tier.
	// If null, the tier is open-ended.
	UpToAmount *float64 `json:"upToAmount"`
}

// PriceTierUpdateItem A price tier.
// At least one price component is required in each tier.
type PriceTierUpdateItem struct {
	// FlatPrice The flat price component of the tier.
	FlatPrice *FlatPriceUpdateItem `json:"flatPrice"`

	// UnitPrice The unit price component of the tier.
	UnitPrice *UnitPriceUpdateItem `json:"unitPrice"`

	// UpToAmount Up to and including to this quantity will be contained in the tier.
	// If null, the tier is open-ended.
	UpToAmount *float64 `json:"upToAmount"`
}

// ProfilePaginatedResponse Paginated response
type ProfilePaginatedResponse struct {
	// Items The items in the current page.
	Items []BillingProfile `json:"items"`

	// Page The items in the current page.
	Page int `json:"page"`

	// PageSize The items in the current page.
	PageSize int `json:"pageSize"`

	// TotalCount The items in the current page.
	TotalCount int `json:"totalCount"`
}

// RateCard A rate card defines the pricing and entitlement of a feature or service.
type RateCard struct {
	union json.RawMessage
}

// RateCardBooleanEntitlement Entitlement template of a boolean entitlement.
type RateCardBooleanEntitlement struct {
	// Metadata Additional metadata for the feature.
	Metadata *Metadata                      `json:"metadata,omitempty"`
	Type     RateCardBooleanEntitlementType `json:"type"`
}

// RateCardBooleanEntitlementType defines model for RateCardBooleanEntitlement.Type.
type RateCardBooleanEntitlementType string

// RateCardEntitlement Entitlement templates are used to define the entitlements of a plan.
// Features are omitted from the entitlement template, as they are defined in the rate card.
type RateCardEntitlement struct {
	union json.RawMessage
}

// RateCardFlatFee A flat fee rate card defines a one-time purchase or a recurring fee.
type RateCardFlatFee struct {
	// BillingCadence The billing cadence of the rate card.
	BillingCadence *string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTerm `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardFlatFeeType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// RateCardFlatFeeType The type of the RateCard.
type RateCardFlatFeeType string

// RateCardFlatFeeUpdateItem A flat fee rate card defines a one-time purchase or a recurring fee.
type RateCardFlatFeeUpdateItem struct {
	// BillingCadence The billing cadence of the rate card.
	BillingCadence *string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price *FlatPriceWithPaymentTermUpdateItem `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardFlatFeeUpdateItemType `json:"type"`
}

// RateCardFlatFeeUpdateItemType The type of the RateCard.
type RateCardFlatFeeUpdateItemType string

// RateCardMeteredEntitlement The entitlement template with a metered entitlement.
type RateCardMeteredEntitlement struct {
	// IsSoftLimit If softLimit=true the subject can use the feature even if the entitlement is exhausted, hasAccess will always be true.
	IsSoftLimit *bool `json:"isSoftLimit,omitempty"`

	// IssueAfterReset You can grant usage automatically alongside the entitlement, the example scenario would be creating a starting balance.
	// If an amount is specified here, a grant will be created alongside the entitlement with the specified amount.
	// That grant will have it's rollover settings configured in a way that after each reset operation, the balance will return the original amount specified here.
	// Manually creating such a grant would mean having the "amount", "minRolloverAmount", and "maxRolloverAmount" fields all be the same.
	IssueAfterReset *float64 `json:"issueAfterReset,omitempty"`

	// IssueAfterResetPriority Defines the grant priority for the default grant.
	IssueAfterResetPriority *uint8 `json:"issueAfterResetPriority,omitempty"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata `json:"metadata,omitempty"`

	// PreserveOverageAtReset If true, the overage is preserved at reset. If false, the usage is reset to 0.
	PreserveOverageAtReset *bool                          `json:"preserveOverageAtReset,omitempty"`
	Type                   RateCardMeteredEntitlementType `json:"type"`

	// UsagePeriod The interval of the metered entitlement.
	// Defaults to the billing cadence of the rate card.
	UsagePeriod *string `json:"usagePeriod,omitempty"`
}

// RateCardMeteredEntitlementType defines model for RateCardMeteredEntitlement.Type.
type RateCardMeteredEntitlementType string

// RateCardStaticEntitlement Entitlement template of a static entitlement.
type RateCardStaticEntitlement struct {
	// Config The JSON parsable config of the entitlement. This value is also returned when checking entitlement access and it is useful for configuring fine-grained access settings to the feature, implemented in your own system. Has to be an object.
	Config json.RawMessage `json:"config"`

	// Metadata Additional metadata for the feature.
	Metadata *Metadata                     `json:"metadata,omitempty"`
	Type     RateCardStaticEntitlementType `json:"type"`
}

// RateCardStaticEntitlementType defines model for RateCardStaticEntitlement.Type.
type RateCardStaticEntitlementType string

// RateCardUpdateItem A rate card defines the pricing and entitlement of a feature or service.
type RateCardUpdateItem struct {
	union json.RawMessage
}

// RateCardUsageBased A usage-based rate card defines a price based on usage.
type RateCardUsageBased struct {
	// BillingCadence The billing cadence of the rate card.
	// When null, the rate card is a one-time purchase.
	BillingCadence string `json:"billingCadence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Key A semi-unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price RateCardUsageBased_Price `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardUsageBasedType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// RateCardUsageBasedPrice0 Unit price with spend commitments.
type RateCardUsageBasedPrice0 = UnitPriceWithCommitments

// RateCardUsageBasedPrice1 Tiered price with spend commitments.
type RateCardUsageBasedPrice1 = TieredPriceWithCommitments

// RateCardUsageBasedPrice2 Flat price with payment term.
type RateCardUsageBasedPrice2 = FlatPriceWithPaymentTerm

// RateCardUsageBased_Price The price of the rate card.
// When null, the feature or service is free.
type RateCardUsageBased_Price struct {
	union json.RawMessage
}

// RateCardUsageBasedType The type of the RateCard.
type RateCardUsageBasedType string

// RateCardUsageBasedUpdateItem A usage-based rate card defines a price based on usage.
type RateCardUsageBasedUpdateItem struct {
	// BillingCadence The billing cadence of the rate card.
	// When null, the rate card is a one-time purchase.
	BillingCadence string `json:"billingCadence"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// EntitlementTemplate The entitlement of the rate card.
	// Only available when featureKey is set.
	EntitlementTemplate *RateCardEntitlement `json:"entitlementTemplate,omitempty"`

	// FeatureKey The feature the customer is entitled to use.
	FeatureKey *string `json:"featureKey,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price RateCardUsageBasedUpdateItem_Price `json:"price"`

	// TaxConfig The tax config of the rate card.
	// When undefined, the tax config of the feature or the default tax config of the plan is used.
	TaxConfig *TaxConfig `json:"taxConfig,omitempty"`

	// Type The type of the RateCard.
	Type RateCardUsageBasedUpdateItemType `json:"type"`
}

// RateCardUsageBasedUpdateItemPrice0 Unit price with spend commitments.
type RateCardUsageBasedUpdateItemPrice0 = UnitPriceWithCommitmentsUpdateItem

// RateCardUsageBasedUpdateItemPrice1 Tiered price with spend commitments.
type RateCardUsageBasedUpdateItemPrice1 = TieredPriceWithCommitmentsUpdateItem

// RateCardUsageBasedUpdateItemPrice2 Flat price with payment term.
type RateCardUsageBasedUpdateItemPrice2 = FlatPriceWithPaymentTermUpdateItem

// RateCardUsageBasedUpdateItem_Price The price of the rate card.
// When null, the feature or service is free.
type RateCardUsageBasedUpdateItem_Price struct {
	union json.RawMessage
}

// RateCardUsageBasedUpdateItemType The type of the RateCard.
type RateCardUsageBasedUpdateItemType string

// RecurringPeriod Recurring period with an interval and an anchor.
type RecurringPeriod struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor time.Time `json:"anchor"`

	// Interval The unit of time for the interval.
	Interval RecurringPeriodInterval `json:"interval"`
}

// RecurringPeriodCreateInput Recurring period with an interval and an anchor.
type RecurringPeriodCreateInput struct {
	// Anchor A date-time anchor to base the recurring period on.
	Anchor *time.Time `json:"anchor,omitempty"`

	// Interval The unit of time for the interval.
	Interval RecurringPeriodInterval `json:"interval"`
}

// RecurringPeriodInterval The unit of time for the interval.
// One of: `day`, `week`, `month`, or `year`.
type RecurringPeriodInterval string

// ResetEntitlementUsageInput Reset parameters
type ResetEntitlementUsageInput struct {
	// EffectiveAt The time at which the reset takes effect, defaults to now. The reset cannot be in the future. The provided value is truncated to the minute due to how historical meter data is stored.
	EffectiveAt *time.Time `json:"effectiveAt,omitempty"`

	// PreserveOverage Determines whether the overage is preserved or forgiven, overriding the entitlement's default behavior.
	// - If true, the overage is preserved.
	// - If false, the overage is forgiven.
	PreserveOverage *bool `json:"preserveOverage,omitempty"`

	// RetainAnchor Determines whether the usage period anchor is retained or reset to the effectiveAt time.
	// - If true, the usage period anchor is retained.
	// - If false, the usage period anchor is reset to the effectiveAt time.
	RetainAnchor *bool `json:"retainAnchor,omitempty"`
}

// SandboxApp defines model for SandboxApp.
type SandboxApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Listing The marketplace listing that this installed app is based on.
	Listing *MarketplaceListing `json:"listing,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status *AppStatus `json:"status,omitempty"`

	// Type The app's type is Sandbox.
	Type SandboxAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SandboxAppType The app's type is Sandbox.
type SandboxAppType string

// ServiceUnavailableProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type ServiceUnavailableProblemResponse = UnexpectedProblemResponse

// SortOrder The order direction.
type SortOrder string

// StripeApp A installed Stripe app object.
type StripeApp struct {
	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Listing The marketplace listing that this installed app is based on.
	Listing *MarketplaceListing `json:"listing,omitempty"`

	// Livemode Livemode, true if the app is in production mode.
	Livemode bool `json:"livemode"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Status Status of the app connection.
	Status *AppStatus `json:"status,omitempty"`

	// StripeAccountId The Stripe account ID.
	StripeAccountId string `json:"stripeAccountId"`

	// Type The app's type is Stripe.
	Type StripeAppType `json:"type"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// StripeAppType The app's type is Stripe.
type StripeAppType string

// StripeCheckoutSessionMode Stripe CheckoutSession.mode
type StripeCheckoutSessionMode string

// StripePaymentIntentStatus Stripe payment intent status.
type StripePaymentIntentStatus string

// StripeSetupIntent Stripe setup intent.
type StripeSetupIntent struct {
	// Customer The setup intent customer.
	Customer string `json:"customer"`

	// Id The setup intent id.
	Id string `json:"id"`

	// Metadata The setup intent metadata.
	Metadata map[string]string `json:"metadata"`

	// PaymentMethod The setup intent payment method.
	PaymentMethod *string `json:"payment_method,omitempty"`

	// PaymentMethodTypes The setup intent payment method types.
	PaymentMethodTypes *[]string `json:"payment_method_types,omitempty"`

	// Status The setup intent status.
	Status StripePaymentIntentStatus `json:"status"`
}

// StripeTaxConfig The tax config for Stripe.
type StripeTaxConfig struct {
	// Code Product tax code.
	//
	// See: https://docs.stripe.com/tax/tax-codes
	Code string `json:"code"`
}

// StripeWebhookEvent Stripe webhook event.
type StripeWebhookEvent struct {
	// Created The event created timestamp.
	Created int32 `json:"created"`

	// Data The event data.
	Data struct {
		// Object Stripe setup intent.
		Object StripeSetupIntent `json:"object"`
	} `json:"data"`

	// Id The event ID.
	Id string `json:"id"`

	// Livemode Live mode.
	Livemode bool `json:"livemode"`

	// Type The event type.
	Type string `json:"type"`
}

// StripeWebhookResponse Stripe webhook response.
type StripeWebhookResponse struct {
	// AppId ULID (Universally Unique Lexicographically Sortable Identifier).
	AppId string `json:"appId"`

	// CustomerId ULID (Universally Unique Lexicographically Sortable Identifier).
	CustomerId *string `json:"customerId,omitempty"`

	// NamespaceId ULID (Universally Unique Lexicographically Sortable Identifier).
	NamespaceId string `json:"namespaceId"`
}

// Subject A subject is a unique identifier for a user or entity.
type Subject struct {
	// CurrentPeriodEnd [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodEnd *time.Time `json:"currentPeriodEnd,omitempty"`

	// CurrentPeriodStart [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodStart *time.Time `json:"currentPeriodStart,omitempty"`

	// DisplayName A human-readable display name for the subject.
	DisplayName *string `json:"displayName"`

	// Id A unique identifier for the subject.
	Id *string `json:"id,omitempty"`

	// Key A unique, human-readable identifier for the subject.
	Key              string                  `json:"key"`
	Metadata         *map[string]interface{} `json:"metadata"`
	StripeCustomerId *string                 `json:"stripeCustomerId"`
}

// SubjectUpsert A subject is a unique identifier for a user or entity.
type SubjectUpsert struct {
	// CurrentPeriodEnd [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodEnd *time.Time `json:"currentPeriodEnd,omitempty"`

	// CurrentPeriodStart [RFC3339](https://tools.ietf.org/html/rfc3339) formatted date-time string in UTC.
	CurrentPeriodStart *time.Time `json:"currentPeriodStart,omitempty"`

	// DisplayName A human-readable display name for the subject.
	DisplayName *string `json:"displayName"`

	// Key A unique, human-readable identifier for the subject.
	Key              string                  `json:"key"`
	Metadata         *map[string]interface{} `json:"metadata"`
	StripeCustomerId *string                 `json:"stripeCustomerId"`
}

// Subscription Subscription is an exact subscription instance.
type Subscription struct {
	// ActiveTo If the subscription is canceled or otherwise have to end activeTo denotes the end date.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Plan The base plan of the subscription.
	Plan PlanReference `json:"plan"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SubscriptionExpanded Expanded subscription
type SubscriptionExpanded struct {
	// ActiveTo If the subscription is canceled or otherwise have to end activeTo denotes the end date.
	ActiveTo *time.Time `json:"activeTo,omitempty"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Currency The currency code of the subscription.
	// Will be revised once we add multi currency support.
	Currency CurrencyCode `json:"currency"`

	// CustomerId The customer ID of the subscription.
	CustomerId string `json:"customerId"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Id A unique identifier for the resource.
	Id *string `json:"id,omitempty"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name   string                      `json:"name"`
	Phases []SubscriptionPhaseExpanded `json:"phases"`

	// Plan The base plan of the subscription.
	Plan PlanReference `json:"plan"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SubscriptionItem The actual contents of the Subscription, what the user gets, what they pay, etc...
type SubscriptionItem struct {
	// BillingCandence The billing cadence of the rate card.
	// When null, the rate card is a one-time purchase.
	BillingCandence *string `json:"billingCandence"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Included Describes what access is gained via the SubscriptionItem
	Included *struct {
		// Entitlement The entitlement of the Subscription Item.
		Entitlement *Entitlement `json:"entitlement,omitempty"`

		// Feature The feature the customer is entitled to use.
		Feature Feature `json:"feature"`
	} `json:"included,omitempty"`

	// Key The identifier of the RateCard.
	// SubscriptionItem/RateCard can be identified, it has a reference:
	//
	// 1. If a Feature is associated with the SubscriptionItem, it is identified by the Feature
	// 1.1 It can be an ID reference, for an exact version of the Feature (Features can change across versions)
	// 1.2 It can be a Key reference, which always refers to the latest (active or inactive) version of a Feature
	//
	// 2. If a Feature is not associated with the SubscriptionItem, it is referenced by the Price
	//
	// We say “referenced by the Price” regardless of how a price itself is referenced, it colloquially makes sense to say “paying the same price for the same thing”. In practice this should be derived from what's printed on the invoice line-item.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// Price The price of the rate card.
	// When null, the feature or service is free.
	Price SubscriptionItem_Price `json:"price"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SubscriptionItemPrice0 Flat price with payment term.
type SubscriptionItemPrice0 = FlatPriceWithPaymentTerm

// SubscriptionItemPrice1 Unit price with spend commitments.
type SubscriptionItemPrice1 = UnitPriceWithCommitments

// SubscriptionItemPrice2 Tiered price with spend commitments.
type SubscriptionItemPrice2 = TieredPriceWithCommitments

// SubscriptionItemPrice3 Flat price with payment term.
type SubscriptionItemPrice3 = FlatPriceWithPaymentTerm

// SubscriptionItem_Price The price of the rate card.
// When null, the feature or service is free.
type SubscriptionItem_Price struct {
	union json.RawMessage
}

// SubscriptionPhaseCreateInput defines model for SubscriptionPhaseCreateInput.
type SubscriptionPhaseCreateInput struct {
	// Discounts The discounts on the plan.
	Discounts *[]AppliedDiscountUpdateItem `json:"discounts,omitempty"`

	// StartAfter Interval after the subscription starts to transition to the phase.
	// When null, the phase starts immediately after the subscription starts.
	StartAfter *string `json:"startAfter"`
}

// SubscriptionPhaseExpanded Expanded subscription phase
type SubscriptionPhaseExpanded struct {
	// ActiveFrom The time from which the phase is active.
	ActiveFrom time.Time `json:"activeFrom"`

	// CreatedAt Timestamp of when the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// DeletedAt Timestamp of when the resource was permanently deleted.
	DeletedAt *time.Time `json:"deletedAt,omitempty"`

	// Description Optional description of the resource. Maximum 1024 characters.
	Description *string `json:"description,omitempty"`

	// Discounts The discounts on the plan.
	Discounts *[]AppliedDiscount `json:"discounts,omitempty"`
	Items     []SubscriptionItem `json:"items"`

	// Key A locally unique identifier for the resource.
	Key string `json:"key"`

	// Metadata Additional metadata for the resource.
	Metadata *Metadata `json:"metadata,omitempty"`

	// Name Human-readable name for the resource. Between 1 and 256 characters.
	Name string `json:"name"`

	// UpdatedAt Timestamp of when the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// SvixOperationalWebhookRequest Operational webhook reqeuest sent by Svix.
type SvixOperationalWebhookRequest struct {
	// Data The payload of the Svix operational webhook request.
	Data map[string]string `json:"data"`

	// Type The type of the Svix operational webhook request.
	Type SvixOperationalWebhookRequestType `json:"type"`
}

// SvixOperationalWebhookRequestType The type of the Svix operational webhook request.
type SvixOperationalWebhookRequestType string

// TaxConfig Set of provider specific tax configs.
type TaxConfig struct {
	// Stripe Stripe tax config.
	Stripe *StripeTaxConfig `json:"stripe,omitempty"`
}

// TieredPriceMode The mode of the tiered price.
type TieredPriceMode string

// TieredPriceWithCommitments Tiered price with spend commitments.
type TieredPriceWithCommitments struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Mode Defines if the tiering mode is volume-based or graduated:
	// - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
	// - In `graduated` tiering, pricing can change as the quantity grows.
	Mode TieredPriceMode `json:"mode"`

	// Tiers The tiers of the tiered price.
	// At least one price component is required in each tier.
	Tiers []PriceTier                    `json:"tiers"`
	Type  TieredPriceWithCommitmentsType `json:"type"`
}

// TieredPriceWithCommitmentsType defines model for TieredPriceWithCommitments.Type.
type TieredPriceWithCommitmentsType string

// TieredPriceWithCommitmentsUpdateItem Tiered price with spend commitments.
type TieredPriceWithCommitmentsUpdateItem struct {
	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`

	// Mode Defines if the tiering mode is volume-based or graduated:
	// - In `volume`-based tiering, the maximum quantity within a period determines the per unit price.
	// - In `graduated` tiering, pricing can change as the quantity grows.
	Mode TieredPriceMode `json:"mode"`

	// Tiers The tiers of the tiered price.
	// At least one price component is required in each tier.
	Tiers []PriceTierUpdateItem `json:"tiers"`
}

// UnauthorizedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnauthorizedProblemResponse = UnexpectedProblemResponse

// UnexpectedProblemResponse A Problem Details object (RFC 7807).
// Additional properties specific to the problem type may be present.
type UnexpectedProblemResponse = models.StatusProblem

// UnitPrice Unit price.
type UnitPrice struct {
	// Amount The amount of the unit price.
	Amount Numeric       `json:"amount"`
	Type   UnitPriceType `json:"type"`
}

// UnitPriceType defines model for UnitPrice.Type.
type UnitPriceType string

// UnitPriceUpdateItem Unit price.
type UnitPriceUpdateItem struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`
}

// UnitPriceWithCommitments Unit price with spend commitments.
type UnitPriceWithCommitments struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`

	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric                     `json:"minimumAmount,omitempty"`
	Type          UnitPriceWithCommitmentsType `json:"type"`
}

// UnitPriceWithCommitmentsType defines model for UnitPriceWithCommitments.Type.
type UnitPriceWithCommitmentsType string

// UnitPriceWithCommitmentsUpdateItem Unit price with spend commitments.
type UnitPriceWithCommitmentsUpdateItem struct {
	// Amount The amount of the unit price.
	Amount Numeric `json:"amount"`

	// MaximumAmount The customer is limited to spend at most the amount.
	MaximumAmount *Numeric `json:"maximumAmount,omitempty"`

	// MinimumAmount The customer is committed to spend at least the amount.
	MinimumAmount *Numeric `json:"minimumAmount,omitempty"`
}

// WindowSize Aggregation window size.
type WindowSize = models.WindowSize

// WindowedBalanceHistory The windowed balance history.
type WindowedBalanceHistory struct {
	// BurndownHistory Grant burndown history.
	BurndownHistory []GrantBurnDownHistorySegment `json:"burndownHistory"`

	// WindowedHistory The windowed balance history.
	// - It only returns rows for windows where there was usage.
	// - The windows are inclusive at their start and exclusive at their end.
	// - The last window may be smaller than the window size and is inclusive at both ends.
	WindowedHistory []BalanceHistoryWindow `json:"windowedHistory"`
}

// BillingInvoiceListParamsExpand defines model for BillingInvoiceListParams.expand.
type BillingInvoiceListParamsExpand = []BillingInvoiceExpand

// BillingInvoiceListParamsIssuedAfter defines model for BillingInvoiceListParams.issuedAfter.
type BillingInvoiceListParamsIssuedAfter = time.Time

// BillingInvoiceListParamsIssuedBefore defines model for BillingInvoiceListParams.issuedBefore.
type BillingInvoiceListParamsIssuedBefore = time.Time

// BillingInvoiceListParamsStatuses defines model for BillingInvoiceListParams.statuses.
type BillingInvoiceListParamsStatuses = []BillingInvoiceStatus

// CustomerOverrideOrderByOrderingOrder The order direction.
type CustomerOverrideOrderByOrderingOrder = SortOrder

// CustomerOverrideOrderByOrderingOrderBy Order by options for customers.
type CustomerOverrideOrderByOrderingOrderBy = BillingCustomerOverrideOrderBy

// EntitlementOrderByOrderingOrder The order direction.
type EntitlementOrderByOrderingOrder = SortOrder

// EntitlementOrderByOrderingOrderBy Order by options for entitlements.
type EntitlementOrderByOrderingOrderBy = EntitlementOrderBy

// FeatureOrderByOrderingOrder The order direction.
type FeatureOrderByOrderingOrder = SortOrder

// FeatureOrderByOrderingOrderBy Order by options for features.
type FeatureOrderByOrderingOrderBy = FeatureOrderBy

// GrantOrderByOrderingOrder The order direction.
type GrantOrderByOrderingOrder = SortOrder

// GrantOrderByOrderingOrderBy Order by options for grants.
type GrantOrderByOrderingOrderBy = GrantOrderBy

// InvoiceOrderByOrderingOrder The order direction.
type InvoiceOrderByOrderingOrder = SortOrder

// InvoiceOrderByOrderingOrderBy InvoiceOrderBy specifies the ordering options for invoice listing.
type InvoiceOrderByOrderingOrderBy = BillingInvoiceOrderBy

// LimitOffsetLimit defines model for LimitOffset.limit.
type LimitOffsetLimit = int

// LimitOffsetOffset defines model for LimitOffset.offset.
type LimitOffsetOffset = int

// MarketplaceApiKeyInstallRequestType Type of the app.
type MarketplaceApiKeyInstallRequestType = AppType

// MarketplaceOAuth2InstallAuthorizeRequestType Type of the app.
type MarketplaceOAuth2InstallAuthorizeRequestType = AppType

// MeterQueryFilterGroupBy defines model for MeterQuery.filterGroupBy.
type MeterQueryFilterGroupBy map[string]string

// MeterQueryFrom defines model for MeterQuery.from.
type MeterQueryFrom = time.Time

// MeterQueryGroupBy defines model for MeterQuery.groupBy.
type MeterQueryGroupBy = []string

// MeterQuerySubject defines model for MeterQuery.subject.
type MeterQuerySubject = []string

// MeterQueryTo defines model for MeterQuery.to.
type MeterQueryTo = time.Time

// MeterQueryWindowSize Aggregation window size.
type MeterQueryWindowSize = WindowSize

// MeterQueryWindowTimeZone defines model for MeterQuery.windowTimeZone.
type MeterQueryWindowTimeZone = string

// NotificationChannelOrderByOrderingOrder The order direction.
type NotificationChannelOrderByOrderingOrder = SortOrder

// NotificationChannelOrderByOrderingOrderBy Order by options for notification channels.
type NotificationChannelOrderByOrderingOrderBy = NotificationChannelOrderBy

// NotificationEventOrderByOrderingOrder The order direction.
type NotificationEventOrderByOrderingOrder = SortOrder

// NotificationEventOrderByOrderingOrderBy Order by options for notification channels.
type NotificationEventOrderByOrderingOrderBy = NotificationEventOrderBy

// NotificationRuleOrderByOrderingOrder The order direction.
type NotificationRuleOrderByOrderingOrder = SortOrder

// NotificationRuleOrderByOrderingOrderBy Order by options for notification channels.
type NotificationRuleOrderByOrderingOrderBy = NotificationRuleOrderBy

// OAuth2AuthorizationCodeGrantErrorParamsError OAuth2 authorization code grant error types.
type OAuth2AuthorizationCodeGrantErrorParamsError = OAuth2AuthorizationCodeGrantErrorType

// OAuth2AuthorizationCodeGrantErrorParamsErrorDescription defines model for OAuth2AuthorizationCodeGrantErrorParams.error_description.
type OAuth2AuthorizationCodeGrantErrorParamsErrorDescription = string

// OAuth2AuthorizationCodeGrantErrorParamsErrorUri defines model for OAuth2AuthorizationCodeGrantErrorParams.error_uri.
type OAuth2AuthorizationCodeGrantErrorParamsErrorUri = string

// OAuth2AuthorizationCodeGrantSuccessParamsCode defines model for OAuth2AuthorizationCodeGrantSuccessParams.code.
type OAuth2AuthorizationCodeGrantSuccessParamsCode = string

// OAuth2AuthorizationCodeGrantSuccessParamsState defines model for OAuth2AuthorizationCodeGrantSuccessParams.state.
type OAuth2AuthorizationCodeGrantSuccessParamsState = string

// PaginatedQueryPage defines model for PaginatedQuery.page.
type PaginatedQueryPage = int

// PaginatedQueryPageSize defines model for PaginatedQuery.pageSize.
type PaginatedQueryPageSize = int

// PaginationPage defines model for Pagination.page.
type PaginationPage = int

// PaginationPageSize defines model for Pagination.pageSize.
type PaginationPageSize = int

// PhasesOrderByOrderingOrder The order direction.
type PhasesOrderByOrderingOrder = SortOrder

// PhasesOrderByOrderingOrderBy Order by options for plan phases.
type PhasesOrderByOrderingOrderBy = PhasesOrderBy

// PlanOrderByOrderingOrder The order direction.
type PlanOrderByOrderingOrder = SortOrder

// PlanOrderByOrderingOrderBy Order by options for plans.
type PlanOrderByOrderingOrderBy = PlanOrderBy

// ProfileOrderByOrderingOrder The order direction.
type ProfileOrderByOrderingOrder = SortOrder

// ProfileOrderByOrderingOrderBy ProfileOrderBy specifies the ordering options for profiles
type ProfileOrderByOrderingOrderBy = BillingProfileOrderBy

// QueryCustomerList defines model for queryCustomerList.
type QueryCustomerList = bool

// ListAppsParams defines parameters for ListApps.
type ListAppsParams struct {
	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// BillingListCustomerOverridesParams defines parameters for BillingListCustomerOverrides.
type BillingListCustomerOverridesParams struct {
	BillingProfile *[]string `form:"billingProfile,omitempty" json:"billingProfile,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *CustomerOverrideOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *CustomerOverrideOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingListInvoicesParams defines parameters for BillingListInvoices.
type BillingListInvoicesParams struct {
	Customers    *[]string                             `form:"customers,omitempty" json:"customers,omitempty"`
	Statuses     *BillingInvoiceListParamsStatuses     `form:"statuses,omitempty" json:"statuses,omitempty"`
	IssuedAfter  *BillingInvoiceListParamsIssuedAfter  `form:"issuedAfter,omitempty" json:"issuedAfter,omitempty"`
	IssuedBefore *BillingInvoiceListParamsIssuedBefore `form:"issuedBefore,omitempty" json:"issuedBefore,omitempty"`
	Expand       *BillingInvoiceListParamsExpand       `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *InvoiceOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *InvoiceOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingListInvoicesByCustomerParams defines parameters for BillingListInvoicesByCustomer.
type BillingListInvoicesByCustomerParams struct {
	Statuses     *BillingInvoiceListParamsStatuses     `form:"statuses,omitempty" json:"statuses,omitempty"`
	IssuedAfter  *BillingInvoiceListParamsIssuedAfter  `form:"issuedAfter,omitempty" json:"issuedAfter,omitempty"`
	IssuedBefore *BillingInvoiceListParamsIssuedBefore `form:"issuedBefore,omitempty" json:"issuedBefore,omitempty"`
	Expand       *BillingInvoiceListParamsExpand       `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *InvoiceOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *InvoiceOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingGetInvoiceByCustomerInvoiceIdParams defines parameters for BillingGetInvoiceByCustomerInvoiceId.
type BillingGetInvoiceByCustomerInvoiceIdParams struct {
	Expand []BillingInvoiceExpand `form:"expand" json:"expand"`
}

// BillingListProfilesParams defines parameters for BillingListProfiles.
type BillingListProfilesParams struct {
	IncludeArchived *bool                   `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`
	Expand          *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *ProfileOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *ProfileOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// BillingGetProfileParams defines parameters for BillingGetProfile.
type BillingGetProfileParams struct {
	Expand *[]BillingProfileExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListCustomersParams defines parameters for ListCustomers.
type ListCustomersParams struct {
	// IncludeDeleted Include deleted customers.
	IncludeDeleted *QueryCustomerList `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// ListEntitlementsParams defines parameters for ListEntitlements.
type ListEntitlementsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// EntitlementType Filtering by multiple entitlement types.
	//
	// Usage: `?entitlementType=metered&entitlementType=boolean`
	EntitlementType *[]EntitlementType `form:"entitlementType,omitempty" json:"entitlementType,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *EntitlementOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *EntitlementOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// IngestedAtFrom Start date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtFrom *time.Time `form:"ingestedAtFrom,omitempty" json:"ingestedAtFrom,omitempty"`

	// IngestedAtTo End date-time in RFC 3339 format.
	//
	// Inclusive.
	IngestedAtTo *time.Time `form:"ingestedAtTo,omitempty" json:"ingestedAtTo,omitempty"`

	// HasError If not provided lists all events.
	//
	// If provided with true, only list events with processing error.
	//
	// If provided with false, only list events without processing error.
	HasError *bool `form:"hasError,omitempty" json:"hasError,omitempty"`

	// Id The event ID.
	//
	// Accepts partial ID.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Subject The event subject.
	//
	// Accepts partial subject.
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`

	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Limit Number of events to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// IngestEventsApplicationCloudeventsBatchPlusJSONBody defines parameters for IngestEvents.
type IngestEventsApplicationCloudeventsBatchPlusJSONBody = []Event

// ListFeaturesParams defines parameters for ListFeatures.
type ListFeaturesParams struct {
	// MeterSlug Filter by meterSlug
	MeterSlug *[]string `form:"meterSlug,omitempty" json:"meterSlug,omitempty"`

	// IncludeArchived Filter by meterGroupByFilters
	IncludeArchived *bool `form:"includeArchived,omitempty" json:"includeArchived,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *FeatureOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *FeatureOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// Feature Filtering by multiple features.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subjects.
	//
	// Usage: `?subject=customer-1&subject=customer-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// IncludeDeleted Include deleted
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Offset Number of items to skip.
	//
	// Default is 0.
	Offset *LimitOffsetOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return.
	//
	// Default is 100.
	Limit *LimitOffsetLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Order The order direction.
	Order *GrantOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *GrantOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListMarketplaceListingsParams defines parameters for ListMarketplaceListings.
type ListMarketplaceListingsParams struct {
	// Page The page number.
	Page *PaginatedQueryPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The number of items in the page.
	PageSize *PaginatedQueryPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// MarketplaceAppAPIKeyInstallJSONBody defines parameters for MarketplaceAppAPIKeyInstall.
type MarketplaceAppAPIKeyInstallJSONBody struct {
	// ApiKey The API key for the provider.
	// For example, the Stripe API key.
	ApiKey string `json:"apiKey"`

	// Name Name of the application to install.
	//
	// If not set defaults to the marketplace item's description.
	Name *string `json:"name,omitempty"`
}

// MarketplaceOAuth2InstallAuthorizeParams defines parameters for MarketplaceOAuth2InstallAuthorize.
type MarketplaceOAuth2InstallAuthorizeParams struct {
	// State Required if the "state" parameter was present in the client authorization request.
	// The exact value received from the client:
	//
	// Unique, randomly generated, opaque, and non-guessable string that is sent
	// when starting an authentication request and validated when processing the response.
	State *OAuth2AuthorizationCodeGrantSuccessParamsState `form:"state,omitempty" json:"state,omitempty"`

	// Code Authorization code which the client will later exchange for an access token.
	// Required with the success response.
	Code *OAuth2AuthorizationCodeGrantSuccessParamsCode `form:"code,omitempty" json:"code,omitempty"`

	// Error Error code.
	// Required with the error response.
	Error *OAuth2AuthorizationCodeGrantErrorParamsError `form:"error,omitempty" json:"error,omitempty"`

	// ErrorDescription Optional human-readable text providing additional information,
	// used to assist the client developer in understanding the error that occurred.
	ErrorDescription *OAuth2AuthorizationCodeGrantErrorParamsErrorDescription `form:"error_description,omitempty" json:"error_description,omitempty"`

	// ErrorUri Optional uri identifying a human-readable web page with
	// information about the error, used to provide the client
	// developer with additional information about the error
	ErrorUri *OAuth2AuthorizationCodeGrantErrorParamsErrorUri `form:"error_uri,omitempty" json:"error_uri,omitempty"`
}

// QueryMeterParams defines parameters for QueryMeter.
type QueryMeterParams struct {
	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// Subject Filtering by multiple subjects.
	Subject *MeterQuerySubject `form:"subject,omitempty" json:"subject,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListNotificationChannelsParams defines parameters for ListNotificationChannels.
type ListNotificationChannelsParams struct {
	// IncludeDeleted Include deleted notification channels in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification channels in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationChannelOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationChannelOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationEventsParams defines parameters for ListNotificationEvents.
type ListNotificationEventsParams struct {
	// From Start date-time in RFC 3339 format.
	// Inclusive.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	// Inclusive.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// Feature Filtering by multiple feature ids or keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Subject Filtering by multiple subject ids or keys.
	//
	// Usage: `?subject=subject-1&subject=subject-2`
	Subject *[]string `form:"subject,omitempty" json:"subject,omitempty"`

	// Rule Filtering by multiple rule ids.
	//
	// Usage: `?rule=01J8J2XYZ2N5WBYK09EDZFBSZM&rule=01J8J4R4VZH180KRKQ63NB2VA5`
	Rule *[]string `form:"rule,omitempty" json:"rule,omitempty"`

	// Channel Filtering by multiple channel ids.
	//
	// Usage: `?channel=01J8J4RXH778XB056JS088PCYT&channel=01J8J4S1R1G9EVN62RG23A9M6J`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationEventOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationEventOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListNotificationRulesParams defines parameters for ListNotificationRules.
type ListNotificationRulesParams struct {
	// IncludeDeleted Include deleted notification rules in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// IncludeDisabled Include disabled notification rules in response.
	//
	// Usage: `?includeDisabled=false`
	IncludeDisabled *bool `form:"includeDisabled,omitempty" json:"includeDisabled,omitempty"`

	// Feature Filtering by multiple feature ids/keys.
	//
	// Usage: `?feature=feature-1&feature=feature-2`
	Feature *[]string `form:"feature,omitempty" json:"feature,omitempty"`

	// Channel Filtering by multiple notifiaction channel ids.
	//
	// Usage: `?channel=01ARZ3NDEKTSV4RRFFQ69G5FAV&channel=01J8J2Y5X4NNGQS32CF81W95E3`
	Channel *[]string `form:"channel,omitempty" json:"channel,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *NotificationRuleOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *NotificationRuleOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListPlansParams defines parameters for ListPlans.
type ListPlansParams struct {
	// IncludeDeleted Include deleted plans in response.
	//
	// Usage: `?includeDeleted=true`
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`

	// Id Filter by plan.id attribute
	Id *[]string `form:"id,omitempty" json:"id,omitempty"`

	// Key Filter by plan.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// KeyVersion Filter by plan.key and plan.version attributes
	KeyVersion *map[string]int `json:"keyVersion,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PlanOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PlanOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// ListPlanPhasesParams defines parameters for ListPlanPhases.
type ListPlanPhasesParams struct {
	// Key Filter by phase.key attribute
	Key *[]string `form:"key,omitempty" json:"key,omitempty"`

	// Page Start date-time in RFC 3339 format.
	//
	// Inclusive.
	Page *PaginationPage `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page.
	//
	// Default is 100.
	PageSize *PaginationPageSize `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Order The order direction.
	Order *PhasesOrderByOrderingOrder `form:"order,omitempty" json:"order,omitempty"`

	// OrderBy The order by field.
	OrderBy *PhasesOrderByOrderingOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// QueryPortalMeterParams defines parameters for QueryPortalMeter.
type QueryPortalMeterParams struct {
	// From Start date-time in RFC 3339 format.
	//
	// Inclusive.
	From *MeterQueryFrom `form:"from,omitempty" json:"from,omitempty"`

	// To End date-time in RFC 3339 format.
	//
	// Inclusive.
	To *MeterQueryTo `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize If not specified, a single usage aggregate will be returned for the entirety of the specified period for each subject and group.
	WindowSize *MeterQueryWindowSize `form:"windowSize,omitempty" json:"windowSize,omitempty"`

	// WindowTimeZone The value is the name of the time zone as defined in the IANA Time Zone Database (http://www.iana.org/time-zones).
	// If not specified, the UTC timezone will be used.
	WindowTimeZone *MeterQueryWindowTimeZone `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`

	// FilterGroupBy Simple filter for group bys with exact match.
	FilterGroupBy *MeterQueryFilterGroupBy `json:"filterGroupBy,omitempty"`

	// GroupBy If not specified a single aggregate will be returned for each subject and time window.
	// `subject` is a reserved group by value.
	GroupBy *MeterQueryGroupBy `form:"groupBy,omitempty" json:"groupBy,omitempty"`
}

// ListPortalTokensParams defines parameters for ListPortalTokens.
type ListPortalTokensParams struct {
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// InvalidatePortalTokensJSONBody defines parameters for InvalidatePortalTokens.
type InvalidatePortalTokensJSONBody struct {
	// Id Invalidate a portal token by ID.
	Id *string `json:"id,omitempty"`

	// Subject Invalidate all portal tokens for a subject.
	Subject *string `json:"subject,omitempty"`
}

// UpsertSubjectJSONBody defines parameters for UpsertSubject.
type UpsertSubjectJSONBody = []SubjectUpsert

// ListSubjectEntitlementsParams defines parameters for ListSubjectEntitlements.
type ListSubjectEntitlementsParams struct {
	IncludeDeleted *bool `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
}

// ListEntitlementGrantsParams defines parameters for ListEntitlementGrants.
type ListEntitlementGrantsParams struct {
	IncludeDeleted *bool         `form:"includeDeleted,omitempty" json:"includeDeleted,omitempty"`
	OrderBy        *GrantOrderBy `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// GetEntitlementValueParams defines parameters for GetEntitlementValue.
type GetEntitlementValueParams struct {
	Time *time.Time `form:"time,omitempty" json:"time,omitempty"`
}

// GetEntitlementHistoryParams defines parameters for GetEntitlementHistory.
type GetEntitlementHistoryParams struct {
	// From Start of time range to query entitlement: date-time in RFC 3339 format. Defaults to the last reset. Gets truncated to the granularity of the underlying meter.
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End of time range to query entitlement: date-time in RFC 3339 format. Defaults to now.
	// If not now then gets truncated to the granularity of the underlying meter.
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// WindowSize Windowsize
	WindowSize WindowSize `form:"windowSize" json:"windowSize"`

	// WindowTimeZone The timezone used when calculating the windows.
	WindowTimeZone *string `form:"windowTimeZone,omitempty" json:"windowTimeZone,omitempty"`
}

// GetSubscriptionGetSubscriptionParams defines parameters for GetSubscriptionGetSubscription.
type GetSubscriptionGetSubscriptionParams struct {
	Expand *GetSubscriptionGetSubscriptionParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`

	// At The time at which the subscription should be queried. If not provided the current time is used.
	At *time.Time `form:"at,omitempty" json:"at,omitempty"`
}

// GetSubscriptionGetSubscriptionParamsExpand defines parameters for GetSubscriptionGetSubscription.
type GetSubscriptionGetSubscriptionParamsExpand bool

// EditSubscriptionJSONBody defines parameters for EditSubscription.
type EditSubscriptionJSONBody = []EditSubscriptionJSONBody_Item

// EditSubscriptionJSONBody0 defines parameters for EditSubscription.
type EditSubscriptionJSONBody0 struct {
	Op   EditSubscriptionJSONBody0Op `json:"op"`
	Path string                      `json:"path"`

	// Value A rate card defines the pricing and entitlement of a feature or service.
	Value RateCardUpdateItem `json:"value"`
}

// EditSubscriptionJSONBody0Op defines parameters for EditSubscription.
type EditSubscriptionJSONBody0Op string

// EditSubscriptionJSONBody1 defines parameters for EditSubscription.
type EditSubscriptionJSONBody1 struct {
	Op   EditSubscriptionJSONBody1Op `json:"op"`
	Path string                      `json:"path"`
}

// EditSubscriptionJSONBody1Op defines parameters for EditSubscription.
type EditSubscriptionJSONBody1Op string

// EditSubscriptionJSONBody2 defines parameters for EditSubscription.
type EditSubscriptionJSONBody2 struct {
	Op    EditSubscriptionJSONBody2Op  `json:"op"`
	Path  string                       `json:"path"`
	Value SubscriptionPhaseCreateInput `json:"value"`
}

// EditSubscriptionJSONBody2Op defines parameters for EditSubscription.
type EditSubscriptionJSONBody2Op string

// EditSubscriptionJSONBody3 defines parameters for EditSubscription.
type EditSubscriptionJSONBody3 struct {
	Op    EditSubscriptionJSONBody3Op `json:"op"`
	Path  string                      `json:"path"`
	Value struct {
		ExtendBy string `json:"extendBy"`
	} `json:"value"`
}

// EditSubscriptionJSONBody3Op defines parameters for EditSubscription.
type EditSubscriptionJSONBody3Op string

// EditSubscriptionJSONBody4 defines parameters for EditSubscription.
type EditSubscriptionJSONBody4 struct {
	Op   EditSubscriptionJSONBody4Op `json:"op"`
	Path string                      `json:"path"`
}

// EditSubscriptionJSONBody4Op defines parameters for EditSubscription.
type EditSubscriptionJSONBody4Op string

// EditSubscriptionJSONBody_Item defines parameters for EditSubscription.
type EditSubscriptionJSONBody_Item struct {
	union json.RawMessage
}

// CancelSubscriptionJSONBody defines parameters for CancelSubscription.
type CancelSubscriptionJSONBody struct {
	// EffectiveDate If not provided the subscription is canceled immediately.
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
}

// MigrateSubscriptionJSONBody defines parameters for MigrateSubscription.
type MigrateSubscriptionJSONBody struct {
	TargetVersion int `json:"targetVersion"`
}

// AppStripeWebhookJSONRequestBody defines body for AppStripeWebhook for application/json ContentType.
type AppStripeWebhookJSONRequestBody = StripeWebhookEvent

// BillingUpsertCustomerOverrideJSONRequestBody defines body for BillingUpsertCustomerOverride for application/json ContentType.
type BillingUpsertCustomerOverrideJSONRequestBody = BillingCustomerWorkflowOverrideCreate

// BillingCreateInvoiceJSONRequestBody defines body for BillingCreateInvoice for application/json ContentType.
type BillingCreateInvoiceJSONRequestBody = BillingInvoiceCreateInput

// BillingUpdateInvoiceLineJSONRequestBody defines body for BillingUpdateInvoiceLine for application/json ContentType.
type BillingUpdateInvoiceLineJSONRequestBody = BillingInvoiceLineCreateOrUpdate

// BillingVoidInvoiceJSONRequestBody defines body for BillingVoidInvoice for application/json ContentType.
type BillingVoidInvoiceJSONRequestBody = BillingVoidInvoiceInput

// BillingCreateLineByCustomerJSONRequestBody defines body for BillingCreateLineByCustomer for application/json ContentType.
type BillingCreateLineByCustomerJSONRequestBody = BillingCreateLinesRequest

// BillingCreateProfileJSONRequestBody defines body for BillingCreateProfile for application/json ContentType.
type BillingCreateProfileJSONRequestBody = BillingProfileCreateInput

// BillingUpdateProfileJSONRequestBody defines body for BillingUpdateProfile for application/json ContentType.
type BillingUpdateProfileJSONRequestBody = BillingProfileCreateOrUpdate

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = Customer

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = Customer

// IngestEventsApplicationCloudeventsPlusJSONRequestBody defines body for IngestEvents for application/cloudevents+json ContentType.
type IngestEventsApplicationCloudeventsPlusJSONRequestBody = Event

// IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody defines body for IngestEvents for application/cloudevents-batch+json ContentType.
type IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody = IngestEventsApplicationCloudeventsBatchPlusJSONBody

// CreateFeatureJSONRequestBody defines body for CreateFeature for application/json ContentType.
type CreateFeatureJSONRequestBody = FeatureCreateInputs

// CreateStripeCheckoutSessionJSONRequestBody defines body for CreateStripeCheckoutSession for application/json ContentType.
type CreateStripeCheckoutSessionJSONRequestBody = CreateStripeCheckoutSessionRequest

// MarketplaceAppAPIKeyInstallJSONRequestBody defines body for MarketplaceAppAPIKeyInstall for application/json ContentType.
type MarketplaceAppAPIKeyInstallJSONRequestBody MarketplaceAppAPIKeyInstallJSONBody

// CreateMeterJSONRequestBody defines body for CreateMeter for application/json ContentType.
type CreateMeterJSONRequestBody = MeterCreate

// CreateNotificationChannelJSONRequestBody defines body for CreateNotificationChannel for application/json ContentType.
type CreateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// UpdateNotificationChannelJSONRequestBody defines body for UpdateNotificationChannel for application/json ContentType.
type UpdateNotificationChannelJSONRequestBody = NotificationChannelCreateRequest

// CreateNotificationRuleJSONRequestBody defines body for CreateNotificationRule for application/json ContentType.
type CreateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// UpdateNotificationRuleJSONRequestBody defines body for UpdateNotificationRule for application/json ContentType.
type UpdateNotificationRuleJSONRequestBody = NotificationRuleCreateRequest

// ReceiveSvixOperationalEventJSONRequestBody defines body for ReceiveSvixOperationalEvent for application/json ContentType.
type ReceiveSvixOperationalEventJSONRequestBody = SvixOperationalWebhookRequest

// CreatePlanJSONRequestBody defines body for CreatePlan for application/json ContentType.
type CreatePlanJSONRequestBody = PlanCreate

// UpdatePlanJSONRequestBody defines body for UpdatePlan for application/json ContentType.
type UpdatePlanJSONRequestBody = PlanUpdate

// CreatePlanPhasesJSONRequestBody defines body for CreatePlanPhases for application/json ContentType.
type CreatePlanPhasesJSONRequestBody = PlanPhaseCreate

// UpdatePlanPhasesJSONRequestBody defines body for UpdatePlanPhases for application/json ContentType.
type UpdatePlanPhasesJSONRequestBody = PlanPhaseUpdate

// CreatePortalTokenJSONRequestBody defines body for CreatePortalToken for application/json ContentType.
type CreatePortalTokenJSONRequestBody = PortalToken

// InvalidatePortalTokensJSONRequestBody defines body for InvalidatePortalTokens for application/json ContentType.
type InvalidatePortalTokensJSONRequestBody InvalidatePortalTokensJSONBody

// UpsertSubjectJSONRequestBody defines body for UpsertSubject for application/json ContentType.
type UpsertSubjectJSONRequestBody = UpsertSubjectJSONBody

// CreateEntitlementJSONRequestBody defines body for CreateEntitlement for application/json ContentType.
type CreateEntitlementJSONRequestBody = EntitlementCreateInputs

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = EntitlementGrantCreateInput

// OverrideEntitlementJSONRequestBody defines body for OverrideEntitlement for application/json ContentType.
type OverrideEntitlementJSONRequestBody = EntitlementCreateInputs

// ResetEntitlementUsageJSONRequestBody defines body for ResetEntitlementUsage for application/json ContentType.
type ResetEntitlementUsageJSONRequestBody = ResetEntitlementUsageInput

// SubscriptionsCreateJSONRequestBody defines body for SubscriptionsCreate for application/json ContentType.
type SubscriptionsCreateJSONRequestBody = OpenMeterProductCatalogCreateSubscriptionRequestBody

// EditSubscriptionJSONRequestBody defines body for EditSubscription for application/json ContentType.
type EditSubscriptionJSONRequestBody = EditSubscriptionJSONBody

// CancelSubscriptionJSONRequestBody defines body for CancelSubscription for application/json ContentType.
type CancelSubscriptionJSONRequestBody CancelSubscriptionJSONBody

// MigrateSubscriptionJSONRequestBody defines body for MigrateSubscription for application/json ContentType.
type MigrateSubscriptionJSONRequestBody MigrateSubscriptionJSONBody

// AsStripeApp returns the union data inside the App as a StripeApp
func (t App) AsStripeApp() (StripeApp, error) {
	var body StripeApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStripeApp overwrites any union data inside the App as the provided StripeApp
func (t *App) FromStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStripeApp performs a merge with any union data inside the App, using the provided StripeApp
func (t *App) MergeStripeApp(v StripeApp) error {
	v.Type = "stripe"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSandboxApp returns the union data inside the App as a SandboxApp
func (t App) AsSandboxApp() (SandboxApp, error) {
	var body SandboxApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSandboxApp overwrites any union data inside the App as the provided SandboxApp
func (t *App) FromSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSandboxApp performs a merge with any union data inside the App, using the provided SandboxApp
func (t *App) MergeSandboxApp(v SandboxApp) error {
	v.Type = "sandbox"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t App) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t App) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "sandbox":
		return t.AsSandboxApp()
	case "stripe":
		return t.AsStripeApp()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t App) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *App) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingFlatFeeLine returns the union data inside the BillingInvoiceLine as a BillingFlatFeeLine
func (t BillingInvoiceLine) AsBillingFlatFeeLine() (BillingFlatFeeLine, error) {
	var body BillingFlatFeeLine
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLine overwrites any union data inside the BillingInvoiceLine as the provided BillingFlatFeeLine
func (t *BillingInvoiceLine) FromBillingFlatFeeLine(v BillingFlatFeeLine) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLine performs a merge with any union data inside the BillingInvoiceLine, using the provided BillingFlatFeeLine
func (t *BillingInvoiceLine) MergeBillingFlatFeeLine(v BillingFlatFeeLine) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingManualFeeLine returns the union data inside the BillingInvoiceLine as a BillingManualFeeLine
func (t BillingInvoiceLine) AsBillingManualFeeLine() (BillingManualFeeLine, error) {
	var body BillingManualFeeLine
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingManualFeeLine overwrites any union data inside the BillingInvoiceLine as the provided BillingManualFeeLine
func (t *BillingInvoiceLine) FromBillingManualFeeLine(v BillingManualFeeLine) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingManualFeeLine performs a merge with any union data inside the BillingInvoiceLine, using the provided BillingManualFeeLine
func (t *BillingInvoiceLine) MergeBillingManualFeeLine(v BillingManualFeeLine) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLine) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLine) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLine()
	case "manual_fee":
		return t.AsBillingManualFeeLine()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLine) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLine) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingFlatFeeLineCreateItem returns the union data inside the BillingInvoiceLineCreateItem as a BillingFlatFeeLineCreateItem
func (t BillingInvoiceLineCreateItem) AsBillingFlatFeeLineCreateItem() (BillingFlatFeeLineCreateItem, error) {
	var body BillingFlatFeeLineCreateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLineCreateItem overwrites any union data inside the BillingInvoiceLineCreateItem as the provided BillingFlatFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) FromBillingFlatFeeLineCreateItem(v BillingFlatFeeLineCreateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLineCreateItem performs a merge with any union data inside the BillingInvoiceLineCreateItem, using the provided BillingFlatFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) MergeBillingFlatFeeLineCreateItem(v BillingFlatFeeLineCreateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingManualFeeLineCreateItem returns the union data inside the BillingInvoiceLineCreateItem as a BillingManualFeeLineCreateItem
func (t BillingInvoiceLineCreateItem) AsBillingManualFeeLineCreateItem() (BillingManualFeeLineCreateItem, error) {
	var body BillingManualFeeLineCreateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingManualFeeLineCreateItem overwrites any union data inside the BillingInvoiceLineCreateItem as the provided BillingManualFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) FromBillingManualFeeLineCreateItem(v BillingManualFeeLineCreateItem) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingManualFeeLineCreateItem performs a merge with any union data inside the BillingInvoiceLineCreateItem, using the provided BillingManualFeeLineCreateItem
func (t *BillingInvoiceLineCreateItem) MergeBillingManualFeeLineCreateItem(v BillingManualFeeLineCreateItem) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLineCreateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLineCreateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLineCreateItem()
	case "manual_fee":
		return t.AsBillingManualFeeLineCreateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLineCreateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLineCreateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingFlatFeeLineCreateOrUpdate returns the union data inside the BillingInvoiceLineCreateOrUpdate as a BillingFlatFeeLineCreateOrUpdate
func (t BillingInvoiceLineCreateOrUpdate) AsBillingFlatFeeLineCreateOrUpdate() (BillingFlatFeeLineCreateOrUpdate, error) {
	var body BillingFlatFeeLineCreateOrUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingFlatFeeLineCreateOrUpdate overwrites any union data inside the BillingInvoiceLineCreateOrUpdate as the provided BillingFlatFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) FromBillingFlatFeeLineCreateOrUpdate(v BillingFlatFeeLineCreateOrUpdate) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingFlatFeeLineCreateOrUpdate performs a merge with any union data inside the BillingInvoiceLineCreateOrUpdate, using the provided BillingFlatFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) MergeBillingFlatFeeLineCreateOrUpdate(v BillingFlatFeeLineCreateOrUpdate) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingManualFeeLineCreateOrUpdate returns the union data inside the BillingInvoiceLineCreateOrUpdate as a BillingManualFeeLineCreateOrUpdate
func (t BillingInvoiceLineCreateOrUpdate) AsBillingManualFeeLineCreateOrUpdate() (BillingManualFeeLineCreateOrUpdate, error) {
	var body BillingManualFeeLineCreateOrUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingManualFeeLineCreateOrUpdate overwrites any union data inside the BillingInvoiceLineCreateOrUpdate as the provided BillingManualFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) FromBillingManualFeeLineCreateOrUpdate(v BillingManualFeeLineCreateOrUpdate) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingManualFeeLineCreateOrUpdate performs a merge with any union data inside the BillingInvoiceLineCreateOrUpdate, using the provided BillingManualFeeLineCreateOrUpdate
func (t *BillingInvoiceLineCreateOrUpdate) MergeBillingManualFeeLineCreateOrUpdate(v BillingManualFeeLineCreateOrUpdate) error {
	v.Type = "manual_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingInvoiceLineCreateOrUpdate) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingInvoiceLineCreateOrUpdate) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsBillingFlatFeeLineCreateOrUpdate()
	case "manual_fee":
		return t.AsBillingManualFeeLineCreateOrUpdate()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingInvoiceLineCreateOrUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingInvoiceLineCreateOrUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingPaymentTermInstant returns the union data inside the BillingPaymentTerms as a BillingPaymentTermInstant
func (t BillingPaymentTerms) AsBillingPaymentTermInstant() (BillingPaymentTermInstant, error) {
	var body BillingPaymentTermInstant
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingPaymentTermInstant overwrites any union data inside the BillingPaymentTerms as the provided BillingPaymentTermInstant
func (t *BillingPaymentTerms) FromBillingPaymentTermInstant(v BillingPaymentTermInstant) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingPaymentTermInstant performs a merge with any union data inside the BillingPaymentTerms, using the provided BillingPaymentTermInstant
func (t *BillingPaymentTerms) MergeBillingPaymentTermInstant(v BillingPaymentTermInstant) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingPaymentTermDueDate returns the union data inside the BillingPaymentTerms as a BillingPaymentTermDueDate
func (t BillingPaymentTerms) AsBillingPaymentTermDueDate() (BillingPaymentTermDueDate, error) {
	var body BillingPaymentTermDueDate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingPaymentTermDueDate overwrites any union data inside the BillingPaymentTerms as the provided BillingPaymentTermDueDate
func (t *BillingPaymentTerms) FromBillingPaymentTermDueDate(v BillingPaymentTermDueDate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingPaymentTermDueDate performs a merge with any union data inside the BillingPaymentTerms, using the provided BillingPaymentTermDueDate
func (t *BillingPaymentTerms) MergeBillingPaymentTermDueDate(v BillingPaymentTermDueDate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingPaymentTerms) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingPaymentTerms) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingProfileApps returns the union data inside the BillingProfileAppsOrReference as a BillingProfileApps
func (t BillingProfileAppsOrReference) AsBillingProfileApps() (BillingProfileApps, error) {
	var body BillingProfileApps
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileApps overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) FromBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileApps performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileApps
func (t *BillingProfileAppsOrReference) MergeBillingProfileApps(v BillingProfileApps) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingProfileAppReferences returns the union data inside the BillingProfileAppsOrReference as a BillingProfileAppReferences
func (t BillingProfileAppsOrReference) AsBillingProfileAppReferences() (BillingProfileAppReferences, error) {
	var body BillingProfileAppReferences
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingProfileAppReferences overwrites any union data inside the BillingProfileAppsOrReference as the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) FromBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingProfileAppReferences performs a merge with any union data inside the BillingProfileAppsOrReference, using the provided BillingProfileAppReferences
func (t *BillingProfileAppsOrReference) MergeBillingProfileAppReferences(v BillingProfileAppReferences) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingProfileAppsOrReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingProfileAppsOrReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCustomerId returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a CustomerId
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomerId() (CustomerId, error) {
	var body CustomerId
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerId overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerId performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided CustomerId
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomerId(v CustomerId) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomer returns the union data inside the CreateStripeCheckoutSessionRequest_Customer as a Customer
func (t CreateStripeCheckoutSessionRequest_Customer) AsCustomer() (Customer, error) {
	var body Customer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomer overwrites any union data inside the CreateStripeCheckoutSessionRequest_Customer as the provided Customer
func (t *CreateStripeCheckoutSessionRequest_Customer) FromCustomer(v Customer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomer performs a merge with any union data inside the CreateStripeCheckoutSessionRequest_Customer, using the provided Customer
func (t *CreateStripeCheckoutSessionRequest_Customer) MergeCustomer(v Customer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateStripeCheckoutSessionRequest_Customer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateStripeCheckoutSessionRequest_Customer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMetered returns the union data inside the Entitlement as a EntitlementMetered
func (t Entitlement) AsEntitlementMetered() (EntitlementMetered, error) {
	var body EntitlementMetered
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMetered overwrites any union data inside the Entitlement as the provided EntitlementMetered
func (t *Entitlement) FromEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMetered performs a merge with any union data inside the Entitlement, using the provided EntitlementMetered
func (t *Entitlement) MergeEntitlementMetered(v EntitlementMetered) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStatic returns the union data inside the Entitlement as a EntitlementStatic
func (t Entitlement) AsEntitlementStatic() (EntitlementStatic, error) {
	var body EntitlementStatic
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStatic overwrites any union data inside the Entitlement as the provided EntitlementStatic
func (t *Entitlement) FromEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStatic performs a merge with any union data inside the Entitlement, using the provided EntitlementStatic
func (t *Entitlement) MergeEntitlementStatic(v EntitlementStatic) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBoolean returns the union data inside the Entitlement as a EntitlementBoolean
func (t Entitlement) AsEntitlementBoolean() (EntitlementBoolean, error) {
	var body EntitlementBoolean
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBoolean overwrites any union data inside the Entitlement as the provided EntitlementBoolean
func (t *Entitlement) FromEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBoolean performs a merge with any union data inside the Entitlement, using the provided EntitlementBoolean
func (t *Entitlement) MergeEntitlementBoolean(v EntitlementBoolean) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Entitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Entitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBoolean()
	case "metered":
		return t.AsEntitlementMetered()
	case "static":
		return t.AsEntitlementStatic()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Entitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Entitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEntitlementMeteredCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementMeteredCreateInputs
func (t EntitlementCreateInputs) AsEntitlementMeteredCreateInputs() (EntitlementMeteredCreateInputs, error) {
	var body EntitlementMeteredCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementMeteredCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementMeteredCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementMeteredCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementMeteredCreateInputs(v EntitlementMeteredCreateInputs) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementStaticCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementStaticCreateInputs
func (t EntitlementCreateInputs) AsEntitlementStaticCreateInputs() (EntitlementStaticCreateInputs, error) {
	var body EntitlementStaticCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementStaticCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementStaticCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementStaticCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementStaticCreateInputs(v EntitlementStaticCreateInputs) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementBooleanCreateInputs returns the union data inside the EntitlementCreateInputs as a EntitlementBooleanCreateInputs
func (t EntitlementCreateInputs) AsEntitlementBooleanCreateInputs() (EntitlementBooleanCreateInputs, error) {
	var body EntitlementBooleanCreateInputs
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementBooleanCreateInputs overwrites any union data inside the EntitlementCreateInputs as the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) FromEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementBooleanCreateInputs performs a merge with any union data inside the EntitlementCreateInputs, using the provided EntitlementBooleanCreateInputs
func (t *EntitlementCreateInputs) MergeEntitlementBooleanCreateInputs(v EntitlementBooleanCreateInputs) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntitlementCreateInputs) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t EntitlementCreateInputs) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsEntitlementBooleanCreateInputs()
	case "metered":
		return t.AsEntitlementMeteredCreateInputs()
	case "static":
		return t.AsEntitlementStaticCreateInputs()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t EntitlementCreateInputs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EntitlementCreateInputs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListEntitlementsResult0 returns the union data inside the ListEntitlementsResult as a ListEntitlementsResult0
func (t ListEntitlementsResult) AsListEntitlementsResult0() (ListEntitlementsResult0, error) {
	var body ListEntitlementsResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListEntitlementsResult0 overwrites any union data inside the ListEntitlementsResult as the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) FromListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListEntitlementsResult0 performs a merge with any union data inside the ListEntitlementsResult, using the provided ListEntitlementsResult0
func (t *ListEntitlementsResult) MergeListEntitlementsResult0(v ListEntitlementsResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntitlementPaginatedResponse returns the union data inside the ListEntitlementsResult as a EntitlementPaginatedResponse
func (t ListEntitlementsResult) AsEntitlementPaginatedResponse() (EntitlementPaginatedResponse, error) {
	var body EntitlementPaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntitlementPaginatedResponse overwrites any union data inside the ListEntitlementsResult as the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) FromEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntitlementPaginatedResponse performs a merge with any union data inside the ListEntitlementsResult, using the provided EntitlementPaginatedResponse
func (t *ListEntitlementsResult) MergeEntitlementPaginatedResponse(v EntitlementPaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListEntitlementsResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListEntitlementsResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsListFeaturesResult0 returns the union data inside the ListFeaturesResult as a ListFeaturesResult0
func (t ListFeaturesResult) AsListFeaturesResult0() (ListFeaturesResult0, error) {
	var body ListFeaturesResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromListFeaturesResult0 overwrites any union data inside the ListFeaturesResult as the provided ListFeaturesResult0
func (t *ListFeaturesResult) FromListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeListFeaturesResult0 performs a merge with any union data inside the ListFeaturesResult, using the provided ListFeaturesResult0
func (t *ListFeaturesResult) MergeListFeaturesResult0(v ListFeaturesResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFeaturePaginatedResponse returns the union data inside the ListFeaturesResult as a FeaturePaginatedResponse
func (t ListFeaturesResult) AsFeaturePaginatedResponse() (FeaturePaginatedResponse, error) {
	var body FeaturePaginatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFeaturePaginatedResponse overwrites any union data inside the ListFeaturesResult as the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) FromFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFeaturePaginatedResponse performs a merge with any union data inside the ListFeaturesResult, using the provided FeaturePaginatedResponse
func (t *ListFeaturesResult) MergeFeaturePaginatedResponse(v FeaturePaginatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ListFeaturesResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ListFeaturesResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMeasureUsageFromPreset returns the union data inside the MeasureUsageFrom as a MeasureUsageFromPreset
func (t MeasureUsageFrom) AsMeasureUsageFromPreset() (MeasureUsageFromPreset, error) {
	var body MeasureUsageFromPreset
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromPreset overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) FromMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromPreset performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromPreset
func (t *MeasureUsageFrom) MergeMeasureUsageFromPreset(v MeasureUsageFromPreset) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMeasureUsageFromTime returns the union data inside the MeasureUsageFrom as a MeasureUsageFromTime
func (t MeasureUsageFrom) AsMeasureUsageFromTime() (MeasureUsageFromTime, error) {
	var body MeasureUsageFromTime
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMeasureUsageFromTime overwrites any union data inside the MeasureUsageFrom as the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) FromMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMeasureUsageFromTime performs a merge with any union data inside the MeasureUsageFrom, using the provided MeasureUsageFromTime
func (t *MeasureUsageFrom) MergeMeasureUsageFromTime(v MeasureUsageFromTime) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MeasureUsageFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MeasureUsageFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0 returns the union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item as a OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0
func (t OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) AsOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0() (OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0, error) {
	var body OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0 overwrites any union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item as the provided OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0
func (t *OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) FromOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0(v OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0 performs a merge with any union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item, using the provided OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0
func (t *OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) MergeOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0(v OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1 returns the union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item as a OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1
func (t OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) AsOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1() (OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1, error) {
	var body OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1 overwrites any union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item as the provided OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1
func (t *OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) FromOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1(v OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1 performs a merge with any union data inside the OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item, using the provided OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1
func (t *OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) MergeOpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1(v OpenMeterProductCatalogCreateSubscriptionRequestBodyCustomizations1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OpenMeterProductCatalogCreateSubscriptionRequestBody_Customizations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardFlatFee returns the union data inside the RateCard as a RateCardFlatFee
func (t RateCard) AsRateCardFlatFee() (RateCardFlatFee, error) {
	var body RateCardFlatFee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardFlatFee overwrites any union data inside the RateCard as the provided RateCardFlatFee
func (t *RateCard) FromRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardFlatFee performs a merge with any union data inside the RateCard, using the provided RateCardFlatFee
func (t *RateCard) MergeRateCardFlatFee(v RateCardFlatFee) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBased returns the union data inside the RateCard as a RateCardUsageBased
func (t RateCard) AsRateCardUsageBased() (RateCardUsageBased, error) {
	var body RateCardUsageBased
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBased overwrites any union data inside the RateCard as the provided RateCardUsageBased
func (t *RateCard) FromRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBased performs a merge with any union data inside the RateCard, using the provided RateCardUsageBased
func (t *RateCard) MergeRateCardUsageBased(v RateCardUsageBased) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCard) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCard) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsRateCardFlatFee()
	case "usage_based":
		return t.AsRateCardUsageBased()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCard) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCard) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardMeteredEntitlement returns the union data inside the RateCardEntitlement as a RateCardMeteredEntitlement
func (t RateCardEntitlement) AsRateCardMeteredEntitlement() (RateCardMeteredEntitlement, error) {
	var body RateCardMeteredEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardMeteredEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) FromRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardMeteredEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardMeteredEntitlement
func (t *RateCardEntitlement) MergeRateCardMeteredEntitlement(v RateCardMeteredEntitlement) error {
	v.Type = "metered"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardStaticEntitlement returns the union data inside the RateCardEntitlement as a RateCardStaticEntitlement
func (t RateCardEntitlement) AsRateCardStaticEntitlement() (RateCardStaticEntitlement, error) {
	var body RateCardStaticEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardStaticEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) FromRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardStaticEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardStaticEntitlement
func (t *RateCardEntitlement) MergeRateCardStaticEntitlement(v RateCardStaticEntitlement) error {
	v.Type = "static"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardBooleanEntitlement returns the union data inside the RateCardEntitlement as a RateCardBooleanEntitlement
func (t RateCardEntitlement) AsRateCardBooleanEntitlement() (RateCardBooleanEntitlement, error) {
	var body RateCardBooleanEntitlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardBooleanEntitlement overwrites any union data inside the RateCardEntitlement as the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) FromRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardBooleanEntitlement performs a merge with any union data inside the RateCardEntitlement, using the provided RateCardBooleanEntitlement
func (t *RateCardEntitlement) MergeRateCardBooleanEntitlement(v RateCardBooleanEntitlement) error {
	v.Type = "boolean"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardEntitlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardEntitlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "boolean":
		return t.AsRateCardBooleanEntitlement()
	case "metered":
		return t.AsRateCardMeteredEntitlement()
	case "static":
		return t.AsRateCardStaticEntitlement()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardEntitlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardEntitlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardFlatFeeUpdateItem returns the union data inside the RateCardUpdateItem as a RateCardFlatFeeUpdateItem
func (t RateCardUpdateItem) AsRateCardFlatFeeUpdateItem() (RateCardFlatFeeUpdateItem, error) {
	var body RateCardFlatFeeUpdateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardFlatFeeUpdateItem overwrites any union data inside the RateCardUpdateItem as the provided RateCardFlatFeeUpdateItem
func (t *RateCardUpdateItem) FromRateCardFlatFeeUpdateItem(v RateCardFlatFeeUpdateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardFlatFeeUpdateItem performs a merge with any union data inside the RateCardUpdateItem, using the provided RateCardFlatFeeUpdateItem
func (t *RateCardUpdateItem) MergeRateCardFlatFeeUpdateItem(v RateCardFlatFeeUpdateItem) error {
	v.Type = "flat_fee"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedUpdateItem returns the union data inside the RateCardUpdateItem as a RateCardUsageBasedUpdateItem
func (t RateCardUpdateItem) AsRateCardUsageBasedUpdateItem() (RateCardUsageBasedUpdateItem, error) {
	var body RateCardUsageBasedUpdateItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedUpdateItem overwrites any union data inside the RateCardUpdateItem as the provided RateCardUsageBasedUpdateItem
func (t *RateCardUpdateItem) FromRateCardUsageBasedUpdateItem(v RateCardUsageBasedUpdateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedUpdateItem performs a merge with any union data inside the RateCardUpdateItem, using the provided RateCardUsageBasedUpdateItem
func (t *RateCardUpdateItem) MergeRateCardUsageBasedUpdateItem(v RateCardUsageBasedUpdateItem) error {
	v.Type = "usage_based"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUpdateItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RateCardUpdateItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "flat_fee":
		return t.AsRateCardFlatFeeUpdateItem()
	case "usage_based":
		return t.AsRateCardUsageBasedUpdateItem()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RateCardUpdateItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUpdateItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardUsageBasedPrice0 returns the union data inside the RateCardUsageBased_Price as a RateCardUsageBasedPrice0
func (t RateCardUsageBased_Price) AsRateCardUsageBasedPrice0() (RateCardUsageBasedPrice0, error) {
	var body RateCardUsageBasedPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedPrice0 overwrites any union data inside the RateCardUsageBased_Price as the provided RateCardUsageBasedPrice0
func (t *RateCardUsageBased_Price) FromRateCardUsageBasedPrice0(v RateCardUsageBasedPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedPrice0 performs a merge with any union data inside the RateCardUsageBased_Price, using the provided RateCardUsageBasedPrice0
func (t *RateCardUsageBased_Price) MergeRateCardUsageBasedPrice0(v RateCardUsageBasedPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedPrice1 returns the union data inside the RateCardUsageBased_Price as a RateCardUsageBasedPrice1
func (t RateCardUsageBased_Price) AsRateCardUsageBasedPrice1() (RateCardUsageBasedPrice1, error) {
	var body RateCardUsageBasedPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedPrice1 overwrites any union data inside the RateCardUsageBased_Price as the provided RateCardUsageBasedPrice1
func (t *RateCardUsageBased_Price) FromRateCardUsageBasedPrice1(v RateCardUsageBasedPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedPrice1 performs a merge with any union data inside the RateCardUsageBased_Price, using the provided RateCardUsageBasedPrice1
func (t *RateCardUsageBased_Price) MergeRateCardUsageBasedPrice1(v RateCardUsageBasedPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedPrice2 returns the union data inside the RateCardUsageBased_Price as a RateCardUsageBasedPrice2
func (t RateCardUsageBased_Price) AsRateCardUsageBasedPrice2() (RateCardUsageBasedPrice2, error) {
	var body RateCardUsageBasedPrice2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedPrice2 overwrites any union data inside the RateCardUsageBased_Price as the provided RateCardUsageBasedPrice2
func (t *RateCardUsageBased_Price) FromRateCardUsageBasedPrice2(v RateCardUsageBasedPrice2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedPrice2 performs a merge with any union data inside the RateCardUsageBased_Price, using the provided RateCardUsageBasedPrice2
func (t *RateCardUsageBased_Price) MergeRateCardUsageBasedPrice2(v RateCardUsageBasedPrice2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUsageBased_Price) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUsageBased_Price) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsRateCardUsageBasedUpdateItemPrice0 returns the union data inside the RateCardUsageBasedUpdateItem_Price as a RateCardUsageBasedUpdateItemPrice0
func (t RateCardUsageBasedUpdateItem_Price) AsRateCardUsageBasedUpdateItemPrice0() (RateCardUsageBasedUpdateItemPrice0, error) {
	var body RateCardUsageBasedUpdateItemPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedUpdateItemPrice0 overwrites any union data inside the RateCardUsageBasedUpdateItem_Price as the provided RateCardUsageBasedUpdateItemPrice0
func (t *RateCardUsageBasedUpdateItem_Price) FromRateCardUsageBasedUpdateItemPrice0(v RateCardUsageBasedUpdateItemPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedUpdateItemPrice0 performs a merge with any union data inside the RateCardUsageBasedUpdateItem_Price, using the provided RateCardUsageBasedUpdateItemPrice0
func (t *RateCardUsageBasedUpdateItem_Price) MergeRateCardUsageBasedUpdateItemPrice0(v RateCardUsageBasedUpdateItemPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedUpdateItemPrice1 returns the union data inside the RateCardUsageBasedUpdateItem_Price as a RateCardUsageBasedUpdateItemPrice1
func (t RateCardUsageBasedUpdateItem_Price) AsRateCardUsageBasedUpdateItemPrice1() (RateCardUsageBasedUpdateItemPrice1, error) {
	var body RateCardUsageBasedUpdateItemPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedUpdateItemPrice1 overwrites any union data inside the RateCardUsageBasedUpdateItem_Price as the provided RateCardUsageBasedUpdateItemPrice1
func (t *RateCardUsageBasedUpdateItem_Price) FromRateCardUsageBasedUpdateItemPrice1(v RateCardUsageBasedUpdateItemPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedUpdateItemPrice1 performs a merge with any union data inside the RateCardUsageBasedUpdateItem_Price, using the provided RateCardUsageBasedUpdateItemPrice1
func (t *RateCardUsageBasedUpdateItem_Price) MergeRateCardUsageBasedUpdateItemPrice1(v RateCardUsageBasedUpdateItemPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRateCardUsageBasedUpdateItemPrice2 returns the union data inside the RateCardUsageBasedUpdateItem_Price as a RateCardUsageBasedUpdateItemPrice2
func (t RateCardUsageBasedUpdateItem_Price) AsRateCardUsageBasedUpdateItemPrice2() (RateCardUsageBasedUpdateItemPrice2, error) {
	var body RateCardUsageBasedUpdateItemPrice2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRateCardUsageBasedUpdateItemPrice2 overwrites any union data inside the RateCardUsageBasedUpdateItem_Price as the provided RateCardUsageBasedUpdateItemPrice2
func (t *RateCardUsageBasedUpdateItem_Price) FromRateCardUsageBasedUpdateItemPrice2(v RateCardUsageBasedUpdateItemPrice2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRateCardUsageBasedUpdateItemPrice2 performs a merge with any union data inside the RateCardUsageBasedUpdateItem_Price, using the provided RateCardUsageBasedUpdateItemPrice2
func (t *RateCardUsageBasedUpdateItem_Price) MergeRateCardUsageBasedUpdateItemPrice2(v RateCardUsageBasedUpdateItemPrice2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RateCardUsageBasedUpdateItem_Price) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RateCardUsageBasedUpdateItem_Price) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSubscriptionItemPrice0 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice0
func (t SubscriptionItem_Price) AsSubscriptionItemPrice0() (SubscriptionItemPrice0, error) {
	var body SubscriptionItemPrice0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice0 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice0
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice0(v SubscriptionItemPrice0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice0 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice0
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice0(v SubscriptionItemPrice0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice1 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice1
func (t SubscriptionItem_Price) AsSubscriptionItemPrice1() (SubscriptionItemPrice1, error) {
	var body SubscriptionItemPrice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice1 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice1
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice1(v SubscriptionItemPrice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice1 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice1
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice1(v SubscriptionItemPrice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice2 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice2
func (t SubscriptionItem_Price) AsSubscriptionItemPrice2() (SubscriptionItemPrice2, error) {
	var body SubscriptionItemPrice2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice2 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice2
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice2(v SubscriptionItemPrice2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice2 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice2
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice2(v SubscriptionItemPrice2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSubscriptionItemPrice3 returns the union data inside the SubscriptionItem_Price as a SubscriptionItemPrice3
func (t SubscriptionItem_Price) AsSubscriptionItemPrice3() (SubscriptionItemPrice3, error) {
	var body SubscriptionItemPrice3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSubscriptionItemPrice3 overwrites any union data inside the SubscriptionItem_Price as the provided SubscriptionItemPrice3
func (t *SubscriptionItem_Price) FromSubscriptionItemPrice3(v SubscriptionItemPrice3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSubscriptionItemPrice3 performs a merge with any union data inside the SubscriptionItem_Price, using the provided SubscriptionItemPrice3
func (t *SubscriptionItem_Price) MergeSubscriptionItemPrice3(v SubscriptionItemPrice3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionItem_Price) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionItem_Price) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListApps request
	ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UninstallApp request
	UninstallApp(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppStripeWebhookWithBody request with any body
	AppStripeWebhookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppStripeWebhook(ctx context.Context, id string, body AppStripeWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingListCustomerOverrides request
	BillingListCustomerOverrides(ctx context.Context, params *BillingListCustomerOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingDeleteCustomerOverride request
	BillingDeleteCustomerOverride(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingGetCustomerOverrideById request
	BillingGetCustomerOverrideById(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingUpsertCustomerOverrideWithBody request with any body
	BillingUpsertCustomerOverrideWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingUpsertCustomerOverride(ctx context.Context, customerId string, body BillingUpsertCustomerOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingListInvoices request
	BillingListInvoices(ctx context.Context, params *BillingListInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingListInvoicesByCustomer request
	BillingListInvoicesByCustomer(ctx context.Context, customerId string, params *BillingListInvoicesByCustomerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingCreateInvoiceWithBody request with any body
	BillingCreateInvoiceWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingCreateInvoice(ctx context.Context, customerId string, body BillingCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingDeleteInvoiceByCustomerInvoiceId request
	BillingDeleteInvoiceByCustomerInvoiceId(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingGetInvoiceByCustomerInvoiceId request
	BillingGetInvoiceByCustomerInvoiceId(ctx context.Context, customerId string, invoiceId string, params *BillingGetInvoiceByCustomerInvoiceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingApproveInvoice request
	BillingApproveInvoice(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingDeleteInvoiceLine request
	BillingDeleteInvoiceLine(ctx context.Context, customerId string, invoiceId string, lineId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingUpdateInvoiceLineWithBody request with any body
	BillingUpdateInvoiceLineWithBody(ctx context.Context, customerId string, invoiceId string, lineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingUpdateInvoiceLine(ctx context.Context, customerId string, invoiceId string, lineId string, body BillingUpdateInvoiceLineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingRecalculateInvoiceTax request
	BillingRecalculateInvoiceTax(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingVoidInvoiceWithBody request with any body
	BillingVoidInvoiceWithBody(ctx context.Context, customerId string, invoiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingVoidInvoice(ctx context.Context, customerId string, invoiceId string, body BillingVoidInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingInvoiceWorkflowAdvance request
	BillingInvoiceWorkflowAdvance(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingCreateLineByCustomerWithBody request with any body
	BillingCreateLineByCustomerWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingCreateLineByCustomer(ctx context.Context, customerId string, body BillingCreateLineByCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingListProfiles request
	BillingListProfiles(ctx context.Context, params *BillingListProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingCreateProfileWithBody request with any body
	BillingCreateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingCreateProfile(ctx context.Context, body BillingCreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingArchiveProfile request
	BillingArchiveProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingGetProfile request
	BillingGetProfile(ctx context.Context, id string, params *BillingGetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BillingUpdateProfileWithBody request with any body
	BillingUpdateProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BillingUpdateProfile(ctx context.Context, id string, body BillingUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomers request
	ListCustomers(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomerWithBody request with any body
	CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomer request
	DeleteCustomer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomer request
	GetCustomer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomerWithBody request with any body
	UpdateCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomer(ctx context.Context, id string, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDebugMetrics request
	GetDebugMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEntitlements request
	ListEntitlements(ctx context.Context, params *ListEntitlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntitlementById request
	GetEntitlementById(ctx context.Context, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEvents request
	ListEvents(ctx context.Context, params *ListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IngestEventsWithBody request with any body
	IngestEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IngestEventsWithApplicationCloudeventsPlusJSONBody(ctx context.Context, body IngestEventsApplicationCloudeventsPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	IngestEventsWithApplicationCloudeventsBatchPlusJSONBody(ctx context.Context, body IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFeatures request
	ListFeatures(ctx context.Context, params *ListFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFeatureWithBody request with any body
	CreateFeatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFeature(ctx context.Context, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFeature request
	DeleteFeature(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeature request
	GetFeature(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGrants request
	ListGrants(ctx context.Context, params *ListGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoidGrant request
	VoidGrant(ctx context.Context, grantId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStripeCheckoutSessionWithBody request with any body
	CreateStripeCheckoutSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStripeCheckoutSession(ctx context.Context, body CreateStripeCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMarketplaceListings request
	ListMarketplaceListings(ctx context.Context, params *ListMarketplaceListingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMarketplaceListing request
	GetMarketplaceListing(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceAppAPIKeyInstallWithBody request with any body
	MarketplaceAppAPIKeyInstallWithBody(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MarketplaceAppAPIKeyInstall(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, body MarketplaceAppAPIKeyInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceOAuth2InstallGetURL request
	MarketplaceOAuth2InstallGetURL(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarketplaceOAuth2InstallAuthorize request
	MarketplaceOAuth2InstallAuthorize(ctx context.Context, pType MarketplaceOAuth2InstallAuthorizeRequestType, params *MarketplaceOAuth2InstallAuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMeters request
	ListMeters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMeterWithBody request with any body
	CreateMeterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMeter(ctx context.Context, body CreateMeterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMeter request
	DeleteMeter(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeter request
	GetMeter(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMeter request
	QueryMeter(ctx context.Context, meterIdOrSlug string, params *QueryMeterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMeterSubjects request
	ListMeterSubjects(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNotificationChannels request
	ListNotificationChannels(ctx context.Context, params *ListNotificationChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNotificationChannelWithBody request with any body
	CreateNotificationChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNotificationChannel(ctx context.Context, body CreateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationChannel request
	DeleteNotificationChannel(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationChannel request
	GetNotificationChannel(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNotificationChannelWithBody request with any body
	UpdateNotificationChannelWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNotificationChannel(ctx context.Context, channelId string, body UpdateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNotificationEvents request
	ListNotificationEvents(ctx context.Context, params *ListNotificationEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationEvent request
	GetNotificationEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNotificationRules request
	ListNotificationRules(ctx context.Context, params *ListNotificationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNotificationRuleWithBody request with any body
	CreateNotificationRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNotificationRule(ctx context.Context, body CreateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNotificationRule request
	DeleteNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotificationRule request
	GetNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateNotificationRuleWithBody request with any body
	UpdateNotificationRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateNotificationRule(ctx context.Context, ruleId string, body UpdateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TestNotificationRule request
	TestNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReceiveSvixOperationalEventWithBody request with any body
	ReceiveSvixOperationalEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReceiveSvixOperationalEvent(ctx context.Context, body ReceiveSvixOperationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlans request
	ListPlans(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlanWithBody request with any body
	CreatePlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlan(ctx context.Context, body CreatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NewDraftPlan request
	NewDraftPlan(ctx context.Context, planIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlan request
	DeletePlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlan request
	GetPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlanWithBody request with any body
	UpdatePlanWithBody(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlan(ctx context.Context, planId string, body UpdatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlanPhases request
	ListPlanPhases(ctx context.Context, planId string, params *ListPlanPhasesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlanPhasesWithBody request with any body
	CreatePlanPhasesWithBody(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlanPhases(ctx context.Context, planId string, body CreatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlanPhases request
	DeletePlanPhases(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlanPhases request
	GetPlanPhases(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlanPhasesWithBody request with any body
	UpdatePlanPhasesWithBody(ctx context.Context, planId string, planPhaseKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlanPhases(ctx context.Context, planId string, planPhaseKey string, body UpdatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishPlan request
	PublishPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnpublishPlan request
	UnpublishPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryPortalMeter request
	QueryPortalMeter(ctx context.Context, meterSlug string, params *QueryPortalMeterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPortalTokens request
	ListPortalTokens(ctx context.Context, params *ListPortalTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePortalTokenWithBody request with any body
	CreatePortalTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePortalToken(ctx context.Context, body CreatePortalTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InvalidatePortalTokensWithBody request with any body
	InvalidatePortalTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InvalidatePortalTokens(ctx context.Context, body InvalidatePortalTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubjects request
	ListSubjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertSubjectWithBody request with any body
	UpsertSubjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertSubject(ctx context.Context, body UpsertSubjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubject request
	DeleteSubject(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubject request
	GetSubject(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSubjectEntitlements request
	ListSubjectEntitlements(ctx context.Context, subjectIdOrKey string, params *ListSubjectEntitlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEntitlementWithBody request with any body
	CreateEntitlementWithBody(ctx context.Context, subjectIdOrKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEntitlement(ctx context.Context, subjectIdOrKey string, body CreateEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEntitlementGrants request
	ListEntitlementGrants(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *ListEntitlementGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGrantWithBody request with any body
	CreateGrantWithBody(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGrant(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OverrideEntitlementWithBody request with any body
	OverrideEntitlementWithBody(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OverrideEntitlement(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body OverrideEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntitlementValue request
	GetEntitlementValue(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *GetEntitlementValueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEntitlement request
	DeleteEntitlement(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntitlement request
	GetEntitlement(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntitlementHistory request
	GetEntitlementHistory(ctx context.Context, subjectIdOrKey string, entitlementId string, params *GetEntitlementHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetEntitlementUsageWithBody request with any body
	ResetEntitlementUsageWithBody(ctx context.Context, subjectIdOrKey string, entitlementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetEntitlementUsage(ctx context.Context, subjectIdOrKey string, entitlementId string, body ResetEntitlementUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscriptionsCreateWithBody request with any body
	SubscriptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubscriptionsCreate(ctx context.Context, body SubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubscriptionGetSubscription request
	GetSubscriptionGetSubscription(ctx context.Context, subscriptionId string, params *GetSubscriptionGetSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditSubscriptionWithBody request with any body
	EditSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditSubscription(ctx context.Context, subscriptionId string, body EditSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelSubscriptionWithBody request with any body
	CancelSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelSubscription(ctx context.Context, subscriptionId string, body CancelSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrateSubscriptionWithBody request with any body
	MigrateSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MigrateSubscription(ctx context.Context, subscriptionId string, body MigrateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnscheduleCancelation request
	UnscheduleCancelation(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListApps(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UninstallApp(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUninstallAppRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStripeWebhookWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStripeWebhookRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppStripeWebhook(ctx context.Context, id string, body AppStripeWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppStripeWebhookRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingListCustomerOverrides(ctx context.Context, params *BillingListCustomerOverridesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingListCustomerOverridesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingDeleteCustomerOverride(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingDeleteCustomerOverrideRequest(c.Server, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingGetCustomerOverrideById(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetCustomerOverrideByIdRequest(c.Server, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpsertCustomerOverrideWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpsertCustomerOverrideRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpsertCustomerOverride(ctx context.Context, customerId string, body BillingUpsertCustomerOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpsertCustomerOverrideRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingListInvoices(ctx context.Context, params *BillingListInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingListInvoicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingListInvoicesByCustomer(ctx context.Context, customerId string, params *BillingListInvoicesByCustomerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingListInvoicesByCustomerRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateInvoiceWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateInvoiceRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateInvoice(ctx context.Context, customerId string, body BillingCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateInvoiceRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingDeleteInvoiceByCustomerInvoiceId(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingDeleteInvoiceByCustomerInvoiceIdRequest(c.Server, customerId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingGetInvoiceByCustomerInvoiceId(ctx context.Context, customerId string, invoiceId string, params *BillingGetInvoiceByCustomerInvoiceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetInvoiceByCustomerInvoiceIdRequest(c.Server, customerId, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingApproveInvoice(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingApproveInvoiceRequest(c.Server, customerId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingDeleteInvoiceLine(ctx context.Context, customerId string, invoiceId string, lineId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingDeleteInvoiceLineRequest(c.Server, customerId, invoiceId, lineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpdateInvoiceLineWithBody(ctx context.Context, customerId string, invoiceId string, lineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpdateInvoiceLineRequestWithBody(c.Server, customerId, invoiceId, lineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpdateInvoiceLine(ctx context.Context, customerId string, invoiceId string, lineId string, body BillingUpdateInvoiceLineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpdateInvoiceLineRequest(c.Server, customerId, invoiceId, lineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingRecalculateInvoiceTax(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingRecalculateInvoiceTaxRequest(c.Server, customerId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingVoidInvoiceWithBody(ctx context.Context, customerId string, invoiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingVoidInvoiceRequestWithBody(c.Server, customerId, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingVoidInvoice(ctx context.Context, customerId string, invoiceId string, body BillingVoidInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingVoidInvoiceRequest(c.Server, customerId, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingInvoiceWorkflowAdvance(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingInvoiceWorkflowAdvanceRequest(c.Server, customerId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateLineByCustomerWithBody(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateLineByCustomerRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateLineByCustomer(ctx context.Context, customerId string, body BillingCreateLineByCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateLineByCustomerRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingListProfiles(ctx context.Context, params *BillingListProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingListProfilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingCreateProfile(ctx context.Context, body BillingCreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingCreateProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingArchiveProfile(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingArchiveProfileRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingGetProfile(ctx context.Context, id string, params *BillingGetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingGetProfileRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpdateProfileWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpdateProfileRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BillingUpdateProfile(ctx context.Context, id string, body BillingUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBillingUpdateProfileRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomers(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomer(ctx context.Context, id string, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDebugMetrics(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDebugMetricsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEntitlements(ctx context.Context, params *ListEntitlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEntitlementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntitlementById(ctx context.Context, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntitlementByIdRequest(c.Server, entitlementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEvents(ctx context.Context, params *ListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestEventsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestEventsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestEventsWithApplicationCloudeventsPlusJSONBody(ctx context.Context, body IngestEventsApplicationCloudeventsPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestEventsRequestWithApplicationCloudeventsPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestEventsWithApplicationCloudeventsBatchPlusJSONBody(ctx context.Context, body IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestEventsRequestWithApplicationCloudeventsBatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFeatures(ctx context.Context, params *ListFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeatureWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFeature(ctx context.Context, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFeatureRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFeature(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFeatureRequest(c.Server, featureId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeature(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeatureRequest(c.Server, featureId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGrants(ctx context.Context, params *ListGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGrantsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoidGrant(ctx context.Context, grantId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoidGrantRequest(c.Server, grantId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStripeCheckoutSessionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStripeCheckoutSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStripeCheckoutSession(ctx context.Context, body CreateStripeCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStripeCheckoutSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMarketplaceListings(ctx context.Context, params *ListMarketplaceListingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMarketplaceListingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMarketplaceListing(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMarketplaceListingRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceAppAPIKeyInstallWithBody(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceAppAPIKeyInstallRequestWithBody(c.Server, pType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceAppAPIKeyInstall(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, body MarketplaceAppAPIKeyInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceAppAPIKeyInstallRequest(c.Server, pType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceOAuth2InstallGetURL(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceOAuth2InstallGetURLRequest(c.Server, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarketplaceOAuth2InstallAuthorize(ctx context.Context, pType MarketplaceOAuth2InstallAuthorizeRequestType, params *MarketplaceOAuth2InstallAuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarketplaceOAuth2InstallAuthorizeRequest(c.Server, pType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMeters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMetersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMeterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMeterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMeter(ctx context.Context, body CreateMeterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMeterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMeter(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMeterRequest(c.Server, meterIdOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeter(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeterRequest(c.Server, meterIdOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMeter(ctx context.Context, meterIdOrSlug string, params *QueryMeterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMeterRequest(c.Server, meterIdOrSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMeterSubjects(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMeterSubjectsRequest(c.Server, meterIdOrSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNotificationChannels(ctx context.Context, params *ListNotificationChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationChannelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotificationChannelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationChannelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotificationChannel(ctx context.Context, body CreateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationChannelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationChannel(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationChannelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationChannel(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationChannelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationChannelWithBody(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationChannelRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationChannel(ctx context.Context, channelId string, body UpdateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationChannelRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNotificationEvents(ctx context.Context, params *ListNotificationEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationEvent(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNotificationRules(ctx context.Context, params *ListNotificationRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotificationRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNotificationRule(ctx context.Context, body CreateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNotificationRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNotificationRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNotificationRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationRuleRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateNotificationRule(ctx context.Context, ruleId string, body UpdateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateNotificationRuleRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TestNotificationRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTestNotificationRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReceiveSvixOperationalEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReceiveSvixOperationalEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReceiveSvixOperationalEvent(ctx context.Context, body ReceiveSvixOperationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReceiveSvixOperationalEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlans(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlan(ctx context.Context, body CreatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewDraftPlan(ctx context.Context, planIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewDraftPlanRequest(c.Server, planIdOrKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlanWithBody(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlanRequestWithBody(c.Server, planId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlan(ctx context.Context, planId string, body UpdatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlanRequest(c.Server, planId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlanPhases(ctx context.Context, planId string, params *ListPlanPhasesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlanPhasesRequest(c.Server, planId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlanPhasesWithBody(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlanPhasesRequestWithBody(c.Server, planId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlanPhases(ctx context.Context, planId string, body CreatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlanPhasesRequest(c.Server, planId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlanPhases(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlanPhasesRequest(c.Server, planId, planPhaseKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlanPhases(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlanPhasesRequest(c.Server, planId, planPhaseKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlanPhasesWithBody(ctx context.Context, planId string, planPhaseKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlanPhasesRequestWithBody(c.Server, planId, planPhaseKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlanPhases(ctx context.Context, planId string, planPhaseKey string, body UpdatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlanPhasesRequest(c.Server, planId, planPhaseKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishPlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishPlan(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishPlanRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryPortalMeter(ctx context.Context, meterSlug string, params *QueryPortalMeterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryPortalMeterRequest(c.Server, meterSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPortalTokens(ctx context.Context, params *ListPortalTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPortalTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortalTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePortalToken(ctx context.Context, body CreatePortalTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePortalTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvalidatePortalTokensWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvalidatePortalTokensRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InvalidatePortalTokens(ctx context.Context, body InvalidatePortalTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInvalidatePortalTokensRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertSubjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertSubjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertSubject(ctx context.Context, body UpsertSubjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertSubjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubject(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubjectRequest(c.Server, subjectIdOrKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubject(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubjectRequest(c.Server, subjectIdOrKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSubjectEntitlements(ctx context.Context, subjectIdOrKey string, params *ListSubjectEntitlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSubjectEntitlementsRequest(c.Server, subjectIdOrKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntitlementWithBody(ctx context.Context, subjectIdOrKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntitlementRequestWithBody(c.Server, subjectIdOrKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntitlement(ctx context.Context, subjectIdOrKey string, body CreateEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntitlementRequest(c.Server, subjectIdOrKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEntitlementGrants(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *ListEntitlementGrantsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEntitlementGrantsRequest(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGrantWithBody(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGrantRequestWithBody(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGrant(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGrantRequest(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverrideEntitlementWithBody(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverrideEntitlementRequestWithBody(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OverrideEntitlement(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body OverrideEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOverrideEntitlementRequest(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntitlementValue(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *GetEntitlementValueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntitlementValueRequest(c.Server, subjectIdOrKey, entitlementIdOrFeatureKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntitlement(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntitlementRequest(c.Server, subjectIdOrKey, entitlementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntitlement(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntitlementRequest(c.Server, subjectIdOrKey, entitlementId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntitlementHistory(ctx context.Context, subjectIdOrKey string, entitlementId string, params *GetEntitlementHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntitlementHistoryRequest(c.Server, subjectIdOrKey, entitlementId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetEntitlementUsageWithBody(ctx context.Context, subjectIdOrKey string, entitlementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetEntitlementUsageRequestWithBody(c.Server, subjectIdOrKey, entitlementId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetEntitlementUsage(ctx context.Context, subjectIdOrKey string, entitlementId string, body ResetEntitlementUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetEntitlementUsageRequest(c.Server, subjectIdOrKey, entitlementId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionsCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionsCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscriptionsCreate(ctx context.Context, body SubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscriptionsCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscriptionGetSubscription(ctx context.Context, subscriptionId string, params *GetSubscriptionGetSubscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubscriptionGetSubscriptionRequest(c.Server, subscriptionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditSubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditSubscription(ctx context.Context, subscriptionId string, body EditSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditSubscriptionRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelSubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelSubscription(ctx context.Context, subscriptionId string, body CancelSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelSubscriptionRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateSubscriptionWithBody(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateSubscriptionRequestWithBody(c.Server, subscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrateSubscription(ctx context.Context, subscriptionId string, body MigrateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrateSubscriptionRequest(c.Server, subscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnscheduleCancelation(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnscheduleCancelationRequest(c.Server, subscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAppsRequest generates requests for ListApps
func NewListAppsRequest(server string, params *ListAppsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUninstallAppRequest generates requests for UninstallApp
func NewUninstallAppRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppStripeWebhookRequest calls the generic AppStripeWebhook builder with application/json body
func NewAppStripeWebhookRequest(server string, id string, body AppStripeWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppStripeWebhookRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAppStripeWebhookRequestWithBody generates requests for AppStripeWebhook with any type of body
func NewAppStripeWebhookRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/apps/%s/stripe/webhook", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingListCustomerOverridesRequest generates requests for BillingListCustomerOverrides
func NewBillingListCustomerOverridesRequest(server string, params *BillingListCustomerOverridesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/customer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BillingProfile != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "billingProfile", runtime.ParamLocationQuery, *params.BillingProfile); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingDeleteCustomerOverrideRequest generates requests for BillingDeleteCustomerOverride
func NewBillingDeleteCustomerOverrideRequest(server string, customerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/customer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingGetCustomerOverrideByIdRequest generates requests for BillingGetCustomerOverrideById
func NewBillingGetCustomerOverrideByIdRequest(server string, customerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/customer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingUpsertCustomerOverrideRequest calls the generic BillingUpsertCustomerOverride builder with application/json body
func NewBillingUpsertCustomerOverrideRequest(server string, customerId string, body BillingUpsertCustomerOverrideJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingUpsertCustomerOverrideRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewBillingUpsertCustomerOverrideRequestWithBody generates requests for BillingUpsertCustomerOverride with any type of body
func NewBillingUpsertCustomerOverrideRequestWithBody(server string, customerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/customer/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingListInvoicesRequest generates requests for BillingListInvoices
func NewBillingListInvoicesRequest(server string, params *BillingListInvoicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Customers != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "customers", runtime.ParamLocationQuery, *params.Customers); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssuedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "issuedAfter", runtime.ParamLocationQuery, *params.IssuedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssuedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "issuedBefore", runtime.ParamLocationQuery, *params.IssuedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingListInvoicesByCustomerRequest generates requests for BillingListInvoicesByCustomer
func NewBillingListInvoicesByCustomerRequest(server string, customerId string, params *BillingListInvoicesByCustomerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Statuses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "statuses", runtime.ParamLocationQuery, *params.Statuses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssuedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "issuedAfter", runtime.ParamLocationQuery, *params.IssuedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IssuedBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "issuedBefore", runtime.ParamLocationQuery, *params.IssuedBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingCreateInvoiceRequest calls the generic BillingCreateInvoice builder with application/json body
func NewBillingCreateInvoiceRequest(server string, customerId string, body BillingCreateInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingCreateInvoiceRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewBillingCreateInvoiceRequestWithBody generates requests for BillingCreateInvoice with any type of body
func NewBillingCreateInvoiceRequestWithBody(server string, customerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingDeleteInvoiceByCustomerInvoiceIdRequest generates requests for BillingDeleteInvoiceByCustomerInvoiceId
func NewBillingDeleteInvoiceByCustomerInvoiceIdRequest(server string, customerId string, invoiceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingGetInvoiceByCustomerInvoiceIdRequest generates requests for BillingGetInvoiceByCustomerInvoiceId
func NewBillingGetInvoiceByCustomerInvoiceIdRequest(server string, customerId string, invoiceId string, params *BillingGetInvoiceByCustomerInvoiceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, params.Expand); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingApproveInvoiceRequest generates requests for BillingApproveInvoice
func NewBillingApproveInvoiceRequest(server string, customerId string, invoiceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/approve", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingDeleteInvoiceLineRequest generates requests for BillingDeleteInvoiceLine
func NewBillingDeleteInvoiceLineRequest(server string, customerId string, invoiceId string, lineId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "lineId", runtime.ParamLocationPath, lineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/lines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingUpdateInvoiceLineRequest calls the generic BillingUpdateInvoiceLine builder with application/json body
func NewBillingUpdateInvoiceLineRequest(server string, customerId string, invoiceId string, lineId string, body BillingUpdateInvoiceLineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingUpdateInvoiceLineRequestWithBody(server, customerId, invoiceId, lineId, "application/json", bodyReader)
}

// NewBillingUpdateInvoiceLineRequestWithBody generates requests for BillingUpdateInvoiceLine with any type of body
func NewBillingUpdateInvoiceLineRequestWithBody(server string, customerId string, invoiceId string, lineId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "lineId", runtime.ParamLocationPath, lineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/lines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingRecalculateInvoiceTaxRequest generates requests for BillingRecalculateInvoiceTax
func NewBillingRecalculateInvoiceTaxRequest(server string, customerId string, invoiceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/tax/recalculate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingVoidInvoiceRequest calls the generic BillingVoidInvoice builder with application/json body
func NewBillingVoidInvoiceRequest(server string, customerId string, invoiceId string, body BillingVoidInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingVoidInvoiceRequestWithBody(server, customerId, invoiceId, "application/json", bodyReader)
}

// NewBillingVoidInvoiceRequestWithBody generates requests for BillingVoidInvoice with any type of body
func NewBillingVoidInvoiceRequestWithBody(server string, customerId string, invoiceId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/void", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingInvoiceWorkflowAdvanceRequest generates requests for BillingInvoiceWorkflowAdvance
func NewBillingInvoiceWorkflowAdvanceRequest(server string, customerId string, invoiceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/invoices/%s/workflow/advance", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingCreateLineByCustomerRequest calls the generic BillingCreateLineByCustomer builder with application/json body
func NewBillingCreateLineByCustomerRequest(server string, customerId string, body BillingCreateLineByCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingCreateLineByCustomerRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewBillingCreateLineByCustomerRequestWithBody generates requests for BillingCreateLineByCustomer with any type of body
func NewBillingCreateLineByCustomerRequestWithBody(server string, customerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/invoices/%s/lines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingListProfilesRequest generates requests for BillingListProfiles
func NewBillingListProfilesRequest(server string, params *BillingListProfilesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeArchived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingCreateProfileRequest calls the generic BillingCreateProfile builder with application/json body
func NewBillingCreateProfileRequest(server string, body BillingCreateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingCreateProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewBillingCreateProfileRequestWithBody generates requests for BillingCreateProfile with any type of body
func NewBillingCreateProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBillingArchiveProfileRequest generates requests for BillingArchiveProfile
func NewBillingArchiveProfileRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingGetProfileRequest generates requests for BillingGetProfile
func NewBillingGetProfileRequest(server string, id string, params *BillingGetProfileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBillingUpdateProfileRequest calls the generic BillingUpdateProfile builder with application/json body
func NewBillingUpdateProfileRequest(server string, id string, body BillingUpdateProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBillingUpdateProfileRequestWithBody(server, id, "application/json", bodyReader)
}

// NewBillingUpdateProfileRequestWithBody generates requests for BillingUpdateProfile with any type of body
func NewBillingUpdateProfileRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/billing/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomersRequest generates requests for ListCustomers
func NewListCustomersRequest(server string, params *ListCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomerRequest calls the generic CreateCustomer builder with application/json body
func NewCreateCustomerRequest(server string, body CreateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCustomerRequestWithBody generates requests for CreateCustomer with any type of body
func NewCreateCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomerRequest generates requests for DeleteCustomer
func NewDeleteCustomerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomerRequest generates requests for GetCustomer
func NewGetCustomerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomerRequest calls the generic UpdateCustomer builder with application/json body
func NewUpdateCustomerRequest(server string, id string, body UpdateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateCustomerRequestWithBody generates requests for UpdateCustomer with any type of body
func NewUpdateCustomerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDebugMetricsRequest generates requests for GetDebugMetrics
func NewGetDebugMetricsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/debug/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEntitlementsRequest generates requests for ListEntitlements
func NewListEntitlementsRequest(server string, params *ListEntitlementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/entitlements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Feature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature", runtime.ParamLocationQuery, *params.Feature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntitlementType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entitlementType", runtime.ParamLocationQuery, *params.EntitlementType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntitlementByIdRequest generates requests for GetEntitlementById
func NewGetEntitlementByIdRequest(server string, entitlementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entitlementId", runtime.ParamLocationPath, entitlementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/entitlements/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEventsRequest generates requests for ListEvents
func NewListEventsRequest(server string, params *ListEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IngestedAtFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ingestedAtFrom", runtime.ParamLocationQuery, *params.IngestedAtFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IngestedAtTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ingestedAtTo", runtime.ParamLocationQuery, *params.IngestedAtTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HasError != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hasError", runtime.ParamLocationQuery, *params.HasError); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIngestEventsRequestWithApplicationCloudeventsPlusJSONBody calls the generic IngestEvents builder with application/cloudevents+json body
func NewIngestEventsRequestWithApplicationCloudeventsPlusJSONBody(server string, body IngestEventsApplicationCloudeventsPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIngestEventsRequestWithBody(server, "application/cloudevents+json", bodyReader)
}

// NewIngestEventsRequestWithApplicationCloudeventsBatchPlusJSONBody calls the generic IngestEvents builder with application/cloudevents-batch+json body
func NewIngestEventsRequestWithApplicationCloudeventsBatchPlusJSONBody(server string, body IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIngestEventsRequestWithBody(server, "application/cloudevents-batch+json", bodyReader)
}

// NewIngestEventsRequestWithBody generates requests for IngestEvents with any type of body
func NewIngestEventsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFeaturesRequest generates requests for ListFeatures
func NewListFeaturesRequest(server string, params *ListFeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MeterSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "meterSlug", runtime.ParamLocationQuery, *params.MeterSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeArchived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFeatureRequest calls the generic CreateFeature builder with application/json body
func NewCreateFeatureRequest(server string, body CreateFeatureJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFeatureRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateFeatureRequestWithBody generates requests for CreateFeature with any type of body
func NewCreateFeatureRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFeatureRequest generates requests for DeleteFeature
func NewDeleteFeatureRequest(server string, featureId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureId", runtime.ParamLocationPath, featureId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeatureRequest generates requests for GetFeature
func NewGetFeatureRequest(server string, featureId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "featureId", runtime.ParamLocationPath, featureId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/features/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListGrantsRequest generates requests for ListGrants
func NewListGrantsRequest(server string, params *ListGrantsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Feature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature", runtime.ParamLocationQuery, *params.Feature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVoidGrantRequest generates requests for VoidGrant
func NewVoidGrantRequest(server string, grantId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "grantId", runtime.ParamLocationPath, grantId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/grants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStripeCheckoutSessionRequest calls the generic CreateStripeCheckoutSession builder with application/json body
func NewCreateStripeCheckoutSessionRequest(server string, body CreateStripeCheckoutSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStripeCheckoutSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStripeCheckoutSessionRequestWithBody generates requests for CreateStripeCheckoutSession with any type of body
func NewCreateStripeCheckoutSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integration/stripe/checkout/sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMarketplaceListingsRequest generates requests for ListMarketplaceListings
func NewListMarketplaceListingsRequest(server string, params *ListMarketplaceListingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/marketplace/listings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMarketplaceListingRequest generates requests for GetMarketplaceListing
func NewGetMarketplaceListingRequest(server string, pType AppType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/marketplace/listings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceAppAPIKeyInstallRequest calls the generic MarketplaceAppAPIKeyInstall builder with application/json body
func NewMarketplaceAppAPIKeyInstallRequest(server string, pType MarketplaceApiKeyInstallRequestType, body MarketplaceAppAPIKeyInstallJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMarketplaceAppAPIKeyInstallRequestWithBody(server, pType, "application/json", bodyReader)
}

// NewMarketplaceAppAPIKeyInstallRequestWithBody generates requests for MarketplaceAppAPIKeyInstall with any type of body
func NewMarketplaceAppAPIKeyInstallRequestWithBody(server string, pType MarketplaceApiKeyInstallRequestType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/marketplace/listings/%s/install/apikey", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMarketplaceOAuth2InstallGetURLRequest generates requests for MarketplaceOAuth2InstallGetURL
func NewMarketplaceOAuth2InstallGetURLRequest(server string, pType AppType) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/marketplace/listings/%s/install/oauth2", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarketplaceOAuth2InstallAuthorizeRequest generates requests for MarketplaceOAuth2InstallAuthorize
func NewMarketplaceOAuth2InstallAuthorizeRequest(server string, pType MarketplaceOAuth2InstallAuthorizeRequestType, params *MarketplaceOAuth2InstallAuthorizeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/marketplace/listings/%s/install/oauth2/authorize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Code != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Error != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "error", runtime.ParamLocationQuery, *params.Error); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ErrorDescription != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "error_description", runtime.ParamLocationQuery, *params.ErrorDescription); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ErrorUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "error_uri", runtime.ParamLocationQuery, *params.ErrorUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMetersRequest generates requests for ListMeters
func NewListMetersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMeterRequest calls the generic CreateMeter builder with application/json body
func NewCreateMeterRequest(server string, body CreateMeterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMeterRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMeterRequestWithBody generates requests for CreateMeter with any type of body
func NewCreateMeterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMeterRequest generates requests for DeleteMeter
func NewDeleteMeterRequest(server string, meterIdOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, meterIdOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeterRequest generates requests for GetMeter
func NewGetMeterRequest(server string, meterIdOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, meterIdOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryMeterRequest generates requests for QueryMeter
func NewQueryMeterRequest(server string, meterIdOrSlug string, params *QueryMeterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, meterIdOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WindowSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowSize", runtime.ParamLocationQuery, *params.WindowSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WindowTimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowTimeZone", runtime.ParamLocationQuery, *params.WindowTimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterGroupBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "filterGroupBy", runtime.ParamLocationQuery, *params.FilterGroupBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupBy", runtime.ParamLocationQuery, *params.GroupBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMeterSubjectsRequest generates requests for ListMeterSubjects
func NewListMeterSubjectsRequest(server string, meterIdOrSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meterIdOrSlug", runtime.ParamLocationPath, meterIdOrSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meters/%s/subjects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNotificationChannelsRequest generates requests for ListNotificationChannels
func NewListNotificationChannelsRequest(server string, params *ListNotificationChannelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDisabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDisabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNotificationChannelRequest calls the generic CreateNotificationChannel builder with application/json body
func NewCreateNotificationChannelRequest(server string, body CreateNotificationChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNotificationChannelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNotificationChannelRequestWithBody generates requests for CreateNotificationChannel with any type of body
func NewCreateNotificationChannelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/channels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotificationChannelRequest generates requests for DeleteNotificationChannel
func NewDeleteNotificationChannelRequest(server string, channelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationChannelRequest generates requests for GetNotificationChannel
func NewGetNotificationChannelRequest(server string, channelId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNotificationChannelRequest calls the generic UpdateNotificationChannel builder with application/json body
func NewUpdateNotificationChannelRequest(server string, channelId string, body UpdateNotificationChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNotificationChannelRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewUpdateNotificationChannelRequestWithBody generates requests for UpdateNotificationChannel with any type of body
func NewUpdateNotificationChannelRequestWithBody(server string, channelId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "channelId", runtime.ParamLocationPath, channelId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/channels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListNotificationEventsRequest generates requests for ListNotificationEvents
func NewListNotificationEventsRequest(server string, params *ListNotificationEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Feature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature", runtime.ParamLocationQuery, *params.Feature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Subject != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Rule != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rule", runtime.ParamLocationQuery, *params.Rule); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationEventRequest generates requests for GetNotificationEvent
func NewGetNotificationEventRequest(server string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "eventId", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNotificationRulesRequest generates requests for ListNotificationRules
func NewListNotificationRulesRequest(server string, params *ListNotificationRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeDisabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDisabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Feature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature", runtime.ParamLocationQuery, *params.Feature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Channel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNotificationRuleRequest calls the generic CreateNotificationRule builder with application/json body
func NewCreateNotificationRuleRequest(server string, body CreateNotificationRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNotificationRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNotificationRuleRequestWithBody generates requests for CreateNotificationRule with any type of body
func NewCreateNotificationRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNotificationRuleRequest generates requests for DeleteNotificationRule
func NewDeleteNotificationRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNotificationRuleRequest generates requests for GetNotificationRule
func NewGetNotificationRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateNotificationRuleRequest calls the generic UpdateNotificationRule builder with application/json body
func NewUpdateNotificationRuleRequest(server string, ruleId string, body UpdateNotificationRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateNotificationRuleRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewUpdateNotificationRuleRequestWithBody generates requests for UpdateNotificationRule with any type of body
func NewUpdateNotificationRuleRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTestNotificationRuleRequest generates requests for TestNotificationRule
func NewTestNotificationRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/rules/%s/test", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReceiveSvixOperationalEventRequest calls the generic ReceiveSvixOperationalEvent builder with application/json body
func NewReceiveSvixOperationalEventRequest(server string, body ReceiveSvixOperationalEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReceiveSvixOperationalEventRequestWithBody(server, "application/json", bodyReader)
}

// NewReceiveSvixOperationalEventRequestWithBody generates requests for ReceiveSvixOperationalEvent with any type of body
func NewReceiveSvixOperationalEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/notification/webhook/svix")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlansRequest generates requests for ListPlans
func NewListPlansRequest(server string, params *ListPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeyVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "keyVersion", runtime.ParamLocationQuery, *params.KeyVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlanRequest calls the generic CreatePlan builder with application/json body
func NewCreatePlanRequest(server string, body CreatePlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlanRequestWithBody generates requests for CreatePlan with any type of body
func NewCreatePlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNewDraftPlanRequest generates requests for NewDraftPlan
func NewNewDraftPlanRequest(server string, planIdOrKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planIdOrKey", runtime.ParamLocationPath, planIdOrKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/next", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePlanRequest generates requests for DeletePlan
func NewDeletePlanRequest(server string, planId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlanRequest generates requests for GetPlan
func NewGetPlanRequest(server string, planId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlanRequest calls the generic UpdatePlan builder with application/json body
func NewUpdatePlanRequest(server string, planId string, body UpdatePlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlanRequestWithBody(server, planId, "application/json", bodyReader)
}

// NewUpdatePlanRequestWithBody generates requests for UpdatePlan with any type of body
func NewUpdatePlanRequestWithBody(server string, planId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPlanPhasesRequest generates requests for ListPlanPhases
func NewListPlanPhasesRequest(server string, planId string, params *ListPlanPhasesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/phases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlanPhasesRequest calls the generic CreatePlanPhases builder with application/json body
func NewCreatePlanPhasesRequest(server string, planId string, body CreatePlanPhasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlanPhasesRequestWithBody(server, planId, "application/json", bodyReader)
}

// NewCreatePlanPhasesRequestWithBody generates requests for CreatePlanPhases with any type of body
func NewCreatePlanPhasesRequestWithBody(server string, planId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/phases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlanPhasesRequest generates requests for DeletePlanPhases
func NewDeletePlanPhasesRequest(server string, planId string, planPhaseKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planPhaseKey", runtime.ParamLocationPath, planPhaseKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/phases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlanPhasesRequest generates requests for GetPlanPhases
func NewGetPlanPhasesRequest(server string, planId string, planPhaseKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planPhaseKey", runtime.ParamLocationPath, planPhaseKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/phases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlanPhasesRequest calls the generic UpdatePlanPhases builder with application/json body
func NewUpdatePlanPhasesRequest(server string, planId string, planPhaseKey string, body UpdatePlanPhasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlanPhasesRequestWithBody(server, planId, planPhaseKey, "application/json", bodyReader)
}

// NewUpdatePlanPhasesRequestWithBody generates requests for UpdatePlanPhases with any type of body
func NewUpdatePlanPhasesRequestWithBody(server string, planId string, planPhaseKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planPhaseKey", runtime.ParamLocationPath, planPhaseKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/phases/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishPlanRequest generates requests for PublishPlan
func NewPublishPlanRequest(server string, planId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/publish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnpublishPlanRequest generates requests for UnpublishPlan
func NewUnpublishPlanRequest(server string, planId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "planId", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/plans/%s/unpublish", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryPortalMeterRequest generates requests for QueryPortalMeter
func NewQueryPortalMeterRequest(server string, meterSlug string, params *QueryPortalMeterParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "meterSlug", runtime.ParamLocationPath, meterSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/portal/meters/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WindowSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowSize", runtime.ParamLocationQuery, *params.WindowSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WindowTimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowTimeZone", runtime.ParamLocationQuery, *params.WindowTimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterGroupBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("deepObject", true, "filterGroupBy", runtime.ParamLocationQuery, *params.FilterGroupBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GroupBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groupBy", runtime.ParamLocationQuery, *params.GroupBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPortalTokensRequest generates requests for ListPortalTokens
func NewListPortalTokensRequest(server string, params *ListPortalTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/portal/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePortalTokenRequest calls the generic CreatePortalToken builder with application/json body
func NewCreatePortalTokenRequest(server string, body CreatePortalTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePortalTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePortalTokenRequestWithBody generates requests for CreatePortalToken with any type of body
func NewCreatePortalTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/portal/tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInvalidatePortalTokensRequest calls the generic InvalidatePortalTokens builder with application/json body
func NewInvalidatePortalTokensRequest(server string, body InvalidatePortalTokensJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInvalidatePortalTokensRequestWithBody(server, "application/json", bodyReader)
}

// NewInvalidatePortalTokensRequestWithBody generates requests for InvalidatePortalTokens with any type of body
func NewInvalidatePortalTokensRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/portal/tokens/invalidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSubjectsRequest generates requests for ListSubjects
func NewListSubjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertSubjectRequest calls the generic UpsertSubject builder with application/json body
func NewUpsertSubjectRequest(server string, body UpsertSubjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertSubjectRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertSubjectRequestWithBody generates requests for UpsertSubject with any type of body
func NewUpsertSubjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubjectRequest generates requests for DeleteSubject
func NewDeleteSubjectRequest(server string, subjectIdOrKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubjectRequest generates requests for GetSubject
func NewGetSubjectRequest(server string, subjectIdOrKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSubjectEntitlementsRequest generates requests for ListSubjectEntitlements
func NewListSubjectEntitlementsRequest(server string, subjectIdOrKey string, params *ListSubjectEntitlementsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEntitlementRequest calls the generic CreateEntitlement builder with application/json body
func NewCreateEntitlementRequest(server string, subjectIdOrKey string, body CreateEntitlementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEntitlementRequestWithBody(server, subjectIdOrKey, "application/json", bodyReader)
}

// NewCreateEntitlementRequestWithBody generates requests for CreateEntitlement with any type of body
func NewCreateEntitlementRequestWithBody(server string, subjectIdOrKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEntitlementGrantsRequest generates requests for ListEntitlementGrants
func NewListEntitlementGrantsRequest(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *ListEntitlementGrantsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementIdOrFeatureKey", runtime.ParamLocationPath, entitlementIdOrFeatureKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/grants", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeDeleted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "includeDeleted", runtime.ParamLocationQuery, *params.IncludeDeleted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGrantRequest calls the generic CreateGrant builder with application/json body
func NewCreateGrantRequest(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, body CreateGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGrantRequestWithBody(server, subjectIdOrKey, entitlementIdOrFeatureKey, "application/json", bodyReader)
}

// NewCreateGrantRequestWithBody generates requests for CreateGrant with any type of body
func NewCreateGrantRequestWithBody(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementIdOrFeatureKey", runtime.ParamLocationPath, entitlementIdOrFeatureKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/grants", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOverrideEntitlementRequest calls the generic OverrideEntitlement builder with application/json body
func NewOverrideEntitlementRequest(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, body OverrideEntitlementJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOverrideEntitlementRequestWithBody(server, subjectIdOrKey, entitlementIdOrFeatureKey, "application/json", bodyReader)
}

// NewOverrideEntitlementRequestWithBody generates requests for OverrideEntitlement with any type of body
func NewOverrideEntitlementRequestWithBody(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementIdOrFeatureKey", runtime.ParamLocationPath, entitlementIdOrFeatureKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/override", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEntitlementValueRequest generates requests for GetEntitlementValue
func NewGetEntitlementValueRequest(server string, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *GetEntitlementValueParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementIdOrFeatureKey", runtime.ParamLocationPath, entitlementIdOrFeatureKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/value", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Time != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEntitlementRequest generates requests for DeleteEntitlement
func NewDeleteEntitlementRequest(server string, subjectIdOrKey string, entitlementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementId", runtime.ParamLocationPath, entitlementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntitlementRequest generates requests for GetEntitlement
func NewGetEntitlementRequest(server string, subjectIdOrKey string, entitlementId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementId", runtime.ParamLocationPath, entitlementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntitlementHistoryRequest generates requests for GetEntitlementHistory
func NewGetEntitlementHistoryRequest(server string, subjectIdOrKey string, entitlementId string, params *GetEntitlementHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementId", runtime.ParamLocationPath, entitlementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/history", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowSize", runtime.ParamLocationQuery, params.WindowSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.WindowTimeZone != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "windowTimeZone", runtime.ParamLocationQuery, *params.WindowTimeZone); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetEntitlementUsageRequest calls the generic ResetEntitlementUsage builder with application/json body
func NewResetEntitlementUsageRequest(server string, subjectIdOrKey string, entitlementId string, body ResetEntitlementUsageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetEntitlementUsageRequestWithBody(server, subjectIdOrKey, entitlementId, "application/json", bodyReader)
}

// NewResetEntitlementUsageRequestWithBody generates requests for ResetEntitlementUsage with any type of body
func NewResetEntitlementUsageRequestWithBody(server string, subjectIdOrKey string, entitlementId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subjectIdOrKey", runtime.ParamLocationPath, subjectIdOrKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entitlementId", runtime.ParamLocationPath, entitlementId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subjects/%s/entitlements/%s/reset", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSubscriptionsCreateRequest calls the generic SubscriptionsCreate builder with application/json body
func NewSubscriptionsCreateRequest(server string, body SubscriptionsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubscriptionsCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewSubscriptionsCreateRequestWithBody generates requests for SubscriptionsCreate with any type of body
func NewSubscriptionsCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubscriptionGetSubscriptionRequest generates requests for GetSubscriptionGetSubscription
func NewGetSubscriptionGetSubscriptionRequest(server string, subscriptionId string, params *GetSubscriptionGetSubscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.At != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "at", runtime.ParamLocationQuery, *params.At); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditSubscriptionRequest calls the generic EditSubscription builder with application/json body
func NewEditSubscriptionRequest(server string, subscriptionId string, body EditSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditSubscriptionRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewEditSubscriptionRequestWithBody generates requests for EditSubscription with any type of body
func NewEditSubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelSubscriptionRequest calls the generic CancelSubscription builder with application/json body
func NewCancelSubscriptionRequest(server string, subscriptionId string, body CancelSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelSubscriptionRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewCancelSubscriptionRequestWithBody generates requests for CancelSubscription with any type of body
func NewCancelSubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrateSubscriptionRequest calls the generic MigrateSubscription builder with application/json body
func NewMigrateSubscriptionRequest(server string, subscriptionId string, body MigrateSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMigrateSubscriptionRequestWithBody(server, subscriptionId, "application/json", bodyReader)
}

// NewMigrateSubscriptionRequestWithBody generates requests for MigrateSubscription with any type of body
func NewMigrateSubscriptionRequestWithBody(server string, subscriptionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions/%s/migrate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnscheduleCancelationRequest generates requests for UnscheduleCancelation
func NewUnscheduleCancelationRequest(server string, subscriptionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, subscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/subscriptions/%s/unschedule-cancelation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAppsWithResponse request
	ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error)

	// UninstallAppWithResponse request
	UninstallAppWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UninstallAppResponse, error)

	// GetAppWithResponse request
	GetAppWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// AppStripeWebhookWithBodyWithResponse request with any body
	AppStripeWebhookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStripeWebhookResponse, error)

	AppStripeWebhookWithResponse(ctx context.Context, id string, body AppStripeWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStripeWebhookResponse, error)

	// BillingListCustomerOverridesWithResponse request
	BillingListCustomerOverridesWithResponse(ctx context.Context, params *BillingListCustomerOverridesParams, reqEditors ...RequestEditorFn) (*BillingListCustomerOverridesResponse, error)

	// BillingDeleteCustomerOverrideWithResponse request
	BillingDeleteCustomerOverrideWithResponse(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*BillingDeleteCustomerOverrideResponse, error)

	// BillingGetCustomerOverrideByIdWithResponse request
	BillingGetCustomerOverrideByIdWithResponse(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*BillingGetCustomerOverrideByIdResponse, error)

	// BillingUpsertCustomerOverrideWithBodyWithResponse request with any body
	BillingUpsertCustomerOverrideWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpsertCustomerOverrideResponse, error)

	BillingUpsertCustomerOverrideWithResponse(ctx context.Context, customerId string, body BillingUpsertCustomerOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpsertCustomerOverrideResponse, error)

	// BillingListInvoicesWithResponse request
	BillingListInvoicesWithResponse(ctx context.Context, params *BillingListInvoicesParams, reqEditors ...RequestEditorFn) (*BillingListInvoicesResponse, error)

	// BillingListInvoicesByCustomerWithResponse request
	BillingListInvoicesByCustomerWithResponse(ctx context.Context, customerId string, params *BillingListInvoicesByCustomerParams, reqEditors ...RequestEditorFn) (*BillingListInvoicesByCustomerResponse, error)

	// BillingCreateInvoiceWithBodyWithResponse request with any body
	BillingCreateInvoiceWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateInvoiceResponse, error)

	BillingCreateInvoiceWithResponse(ctx context.Context, customerId string, body BillingCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateInvoiceResponse, error)

	// BillingDeleteInvoiceByCustomerInvoiceIdWithResponse request
	BillingDeleteInvoiceByCustomerInvoiceIdWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingDeleteInvoiceByCustomerInvoiceIdResponse, error)

	// BillingGetInvoiceByCustomerInvoiceIdWithResponse request
	BillingGetInvoiceByCustomerInvoiceIdWithResponse(ctx context.Context, customerId string, invoiceId string, params *BillingGetInvoiceByCustomerInvoiceIdParams, reqEditors ...RequestEditorFn) (*BillingGetInvoiceByCustomerInvoiceIdResponse, error)

	// BillingApproveInvoiceWithResponse request
	BillingApproveInvoiceWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingApproveInvoiceResponse, error)

	// BillingDeleteInvoiceLineWithResponse request
	BillingDeleteInvoiceLineWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, reqEditors ...RequestEditorFn) (*BillingDeleteInvoiceLineResponse, error)

	// BillingUpdateInvoiceLineWithBodyWithResponse request with any body
	BillingUpdateInvoiceLineWithBodyWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpdateInvoiceLineResponse, error)

	BillingUpdateInvoiceLineWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, body BillingUpdateInvoiceLineJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpdateInvoiceLineResponse, error)

	// BillingRecalculateInvoiceTaxWithResponse request
	BillingRecalculateInvoiceTaxWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingRecalculateInvoiceTaxResponse, error)

	// BillingVoidInvoiceWithBodyWithResponse request with any body
	BillingVoidInvoiceWithBodyWithResponse(ctx context.Context, customerId string, invoiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingVoidInvoiceResponse, error)

	BillingVoidInvoiceWithResponse(ctx context.Context, customerId string, invoiceId string, body BillingVoidInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingVoidInvoiceResponse, error)

	// BillingInvoiceWorkflowAdvanceWithResponse request
	BillingInvoiceWorkflowAdvanceWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingInvoiceWorkflowAdvanceResponse, error)

	// BillingCreateLineByCustomerWithBodyWithResponse request with any body
	BillingCreateLineByCustomerWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateLineByCustomerResponse, error)

	BillingCreateLineByCustomerWithResponse(ctx context.Context, customerId string, body BillingCreateLineByCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateLineByCustomerResponse, error)

	// BillingListProfilesWithResponse request
	BillingListProfilesWithResponse(ctx context.Context, params *BillingListProfilesParams, reqEditors ...RequestEditorFn) (*BillingListProfilesResponse, error)

	// BillingCreateProfileWithBodyWithResponse request with any body
	BillingCreateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateProfileResponse, error)

	BillingCreateProfileWithResponse(ctx context.Context, body BillingCreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateProfileResponse, error)

	// BillingArchiveProfileWithResponse request
	BillingArchiveProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BillingArchiveProfileResponse, error)

	// BillingGetProfileWithResponse request
	BillingGetProfileWithResponse(ctx context.Context, id string, params *BillingGetProfileParams, reqEditors ...RequestEditorFn) (*BillingGetProfileResponse, error)

	// BillingUpdateProfileWithBodyWithResponse request with any body
	BillingUpdateProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpdateProfileResponse, error)

	BillingUpdateProfileWithResponse(ctx context.Context, id string, body BillingUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpdateProfileResponse, error)

	// ListCustomersWithResponse request
	ListCustomersWithResponse(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*ListCustomersResponse, error)

	// CreateCustomerWithBodyWithResponse request with any body
	CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	// DeleteCustomerWithResponse request
	DeleteCustomerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomerResponse, error)

	// GetCustomerWithResponse request
	GetCustomerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error)

	// UpdateCustomerWithBodyWithResponse request with any body
	UpdateCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error)

	UpdateCustomerWithResponse(ctx context.Context, id string, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error)

	// GetDebugMetricsWithResponse request
	GetDebugMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDebugMetricsResponse, error)

	// ListEntitlementsWithResponse request
	ListEntitlementsWithResponse(ctx context.Context, params *ListEntitlementsParams, reqEditors ...RequestEditorFn) (*ListEntitlementsResponse, error)

	// GetEntitlementByIdWithResponse request
	GetEntitlementByIdWithResponse(ctx context.Context, entitlementId string, reqEditors ...RequestEditorFn) (*GetEntitlementByIdResponse, error)

	// ListEventsWithResponse request
	ListEventsWithResponse(ctx context.Context, params *ListEventsParams, reqEditors ...RequestEditorFn) (*ListEventsResponse, error)

	// IngestEventsWithBodyWithResponse request with any body
	IngestEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error)

	IngestEventsWithApplicationCloudeventsPlusJSONBodyWithResponse(ctx context.Context, body IngestEventsApplicationCloudeventsPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error)

	IngestEventsWithApplicationCloudeventsBatchPlusJSONBodyWithResponse(ctx context.Context, body IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error)

	// ListFeaturesWithResponse request
	ListFeaturesWithResponse(ctx context.Context, params *ListFeaturesParams, reqEditors ...RequestEditorFn) (*ListFeaturesResponse, error)

	// CreateFeatureWithBodyWithResponse request with any body
	CreateFeatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error)

	CreateFeatureWithResponse(ctx context.Context, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error)

	// DeleteFeatureWithResponse request
	DeleteFeatureWithResponse(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*DeleteFeatureResponse, error)

	// GetFeatureWithResponse request
	GetFeatureWithResponse(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*GetFeatureResponse, error)

	// ListGrantsWithResponse request
	ListGrantsWithResponse(ctx context.Context, params *ListGrantsParams, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error)

	// VoidGrantWithResponse request
	VoidGrantWithResponse(ctx context.Context, grantId string, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error)

	// CreateStripeCheckoutSessionWithBodyWithResponse request with any body
	CreateStripeCheckoutSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStripeCheckoutSessionResponse, error)

	CreateStripeCheckoutSessionWithResponse(ctx context.Context, body CreateStripeCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStripeCheckoutSessionResponse, error)

	// ListMarketplaceListingsWithResponse request
	ListMarketplaceListingsWithResponse(ctx context.Context, params *ListMarketplaceListingsParams, reqEditors ...RequestEditorFn) (*ListMarketplaceListingsResponse, error)

	// GetMarketplaceListingWithResponse request
	GetMarketplaceListingWithResponse(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*GetMarketplaceListingResponse, error)

	// MarketplaceAppAPIKeyInstallWithBodyWithResponse request with any body
	MarketplaceAppAPIKeyInstallWithBodyWithResponse(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceAppAPIKeyInstallResponse, error)

	MarketplaceAppAPIKeyInstallWithResponse(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, body MarketplaceAppAPIKeyInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceAppAPIKeyInstallResponse, error)

	// MarketplaceOAuth2InstallGetURLWithResponse request
	MarketplaceOAuth2InstallGetURLWithResponse(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*MarketplaceOAuth2InstallGetURLResponse, error)

	// MarketplaceOAuth2InstallAuthorizeWithResponse request
	MarketplaceOAuth2InstallAuthorizeWithResponse(ctx context.Context, pType MarketplaceOAuth2InstallAuthorizeRequestType, params *MarketplaceOAuth2InstallAuthorizeParams, reqEditors ...RequestEditorFn) (*MarketplaceOAuth2InstallAuthorizeResponse, error)

	// ListMetersWithResponse request
	ListMetersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMetersResponse, error)

	// CreateMeterWithBodyWithResponse request with any body
	CreateMeterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMeterResponse, error)

	CreateMeterWithResponse(ctx context.Context, body CreateMeterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMeterResponse, error)

	// DeleteMeterWithResponse request
	DeleteMeterWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*DeleteMeterResponse, error)

	// GetMeterWithResponse request
	GetMeterWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*GetMeterResponse, error)

	// QueryMeterWithResponse request
	QueryMeterWithResponse(ctx context.Context, meterIdOrSlug string, params *QueryMeterParams, reqEditors ...RequestEditorFn) (*QueryMeterResponse, error)

	// ListMeterSubjectsWithResponse request
	ListMeterSubjectsWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*ListMeterSubjectsResponse, error)

	// ListNotificationChannelsWithResponse request
	ListNotificationChannelsWithResponse(ctx context.Context, params *ListNotificationChannelsParams, reqEditors ...RequestEditorFn) (*ListNotificationChannelsResponse, error)

	// CreateNotificationChannelWithBodyWithResponse request with any body
	CreateNotificationChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationChannelResponse, error)

	CreateNotificationChannelWithResponse(ctx context.Context, body CreateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationChannelResponse, error)

	// DeleteNotificationChannelWithResponse request
	DeleteNotificationChannelWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*DeleteNotificationChannelResponse, error)

	// GetNotificationChannelWithResponse request
	GetNotificationChannelWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*GetNotificationChannelResponse, error)

	// UpdateNotificationChannelWithBodyWithResponse request with any body
	UpdateNotificationChannelWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationChannelResponse, error)

	UpdateNotificationChannelWithResponse(ctx context.Context, channelId string, body UpdateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationChannelResponse, error)

	// ListNotificationEventsWithResponse request
	ListNotificationEventsWithResponse(ctx context.Context, params *ListNotificationEventsParams, reqEditors ...RequestEditorFn) (*ListNotificationEventsResponse, error)

	// GetNotificationEventWithResponse request
	GetNotificationEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetNotificationEventResponse, error)

	// ListNotificationRulesWithResponse request
	ListNotificationRulesWithResponse(ctx context.Context, params *ListNotificationRulesParams, reqEditors ...RequestEditorFn) (*ListNotificationRulesResponse, error)

	// CreateNotificationRuleWithBodyWithResponse request with any body
	CreateNotificationRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationRuleResponse, error)

	CreateNotificationRuleWithResponse(ctx context.Context, body CreateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationRuleResponse, error)

	// DeleteNotificationRuleWithResponse request
	DeleteNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*DeleteNotificationRuleResponse, error)

	// GetNotificationRuleWithResponse request
	GetNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GetNotificationRuleResponse, error)

	// UpdateNotificationRuleWithBodyWithResponse request with any body
	UpdateNotificationRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationRuleResponse, error)

	UpdateNotificationRuleWithResponse(ctx context.Context, ruleId string, body UpdateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationRuleResponse, error)

	// TestNotificationRuleWithResponse request
	TestNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*TestNotificationRuleResponse, error)

	// ReceiveSvixOperationalEventWithBodyWithResponse request with any body
	ReceiveSvixOperationalEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReceiveSvixOperationalEventResponse, error)

	ReceiveSvixOperationalEventWithResponse(ctx context.Context, body ReceiveSvixOperationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*ReceiveSvixOperationalEventResponse, error)

	// ListPlansWithResponse request
	ListPlansWithResponse(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*ListPlansResponse, error)

	// CreatePlanWithBodyWithResponse request with any body
	CreatePlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlanResponse, error)

	CreatePlanWithResponse(ctx context.Context, body CreatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlanResponse, error)

	// NewDraftPlanWithResponse request
	NewDraftPlanWithResponse(ctx context.Context, planIdOrKey string, reqEditors ...RequestEditorFn) (*NewDraftPlanResponse, error)

	// DeletePlanWithResponse request
	DeletePlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*DeletePlanResponse, error)

	// GetPlanWithResponse request
	GetPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*GetPlanResponse, error)

	// UpdatePlanWithBodyWithResponse request with any body
	UpdatePlanWithBodyWithResponse(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlanResponse, error)

	UpdatePlanWithResponse(ctx context.Context, planId string, body UpdatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlanResponse, error)

	// ListPlanPhasesWithResponse request
	ListPlanPhasesWithResponse(ctx context.Context, planId string, params *ListPlanPhasesParams, reqEditors ...RequestEditorFn) (*ListPlanPhasesResponse, error)

	// CreatePlanPhasesWithBodyWithResponse request with any body
	CreatePlanPhasesWithBodyWithResponse(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlanPhasesResponse, error)

	CreatePlanPhasesWithResponse(ctx context.Context, planId string, body CreatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlanPhasesResponse, error)

	// DeletePlanPhasesWithResponse request
	DeletePlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*DeletePlanPhasesResponse, error)

	// GetPlanPhasesWithResponse request
	GetPlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*GetPlanPhasesResponse, error)

	// UpdatePlanPhasesWithBodyWithResponse request with any body
	UpdatePlanPhasesWithBodyWithResponse(ctx context.Context, planId string, planPhaseKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlanPhasesResponse, error)

	UpdatePlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, body UpdatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlanPhasesResponse, error)

	// PublishPlanWithResponse request
	PublishPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*PublishPlanResponse, error)

	// UnpublishPlanWithResponse request
	UnpublishPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*UnpublishPlanResponse, error)

	// QueryPortalMeterWithResponse request
	QueryPortalMeterWithResponse(ctx context.Context, meterSlug string, params *QueryPortalMeterParams, reqEditors ...RequestEditorFn) (*QueryPortalMeterResponse, error)

	// ListPortalTokensWithResponse request
	ListPortalTokensWithResponse(ctx context.Context, params *ListPortalTokensParams, reqEditors ...RequestEditorFn) (*ListPortalTokensResponse, error)

	// CreatePortalTokenWithBodyWithResponse request with any body
	CreatePortalTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalTokenResponse, error)

	CreatePortalTokenWithResponse(ctx context.Context, body CreatePortalTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalTokenResponse, error)

	// InvalidatePortalTokensWithBodyWithResponse request with any body
	InvalidatePortalTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvalidatePortalTokensResponse, error)

	InvalidatePortalTokensWithResponse(ctx context.Context, body InvalidatePortalTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*InvalidatePortalTokensResponse, error)

	// ListSubjectsWithResponse request
	ListSubjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSubjectsResponse, error)

	// UpsertSubjectWithBodyWithResponse request with any body
	UpsertSubjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertSubjectResponse, error)

	UpsertSubjectWithResponse(ctx context.Context, body UpsertSubjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertSubjectResponse, error)

	// DeleteSubjectWithResponse request
	DeleteSubjectWithResponse(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*DeleteSubjectResponse, error)

	// GetSubjectWithResponse request
	GetSubjectWithResponse(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*GetSubjectResponse, error)

	// ListSubjectEntitlementsWithResponse request
	ListSubjectEntitlementsWithResponse(ctx context.Context, subjectIdOrKey string, params *ListSubjectEntitlementsParams, reqEditors ...RequestEditorFn) (*ListSubjectEntitlementsResponse, error)

	// CreateEntitlementWithBodyWithResponse request with any body
	CreateEntitlementWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntitlementResponse, error)

	CreateEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, body CreateEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntitlementResponse, error)

	// ListEntitlementGrantsWithResponse request
	ListEntitlementGrantsWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *ListEntitlementGrantsParams, reqEditors ...RequestEditorFn) (*ListEntitlementGrantsResponse, error)

	// CreateGrantWithBodyWithResponse request with any body
	CreateGrantWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error)

	CreateGrantWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error)

	// OverrideEntitlementWithBodyWithResponse request with any body
	OverrideEntitlementWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverrideEntitlementResponse, error)

	OverrideEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body OverrideEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*OverrideEntitlementResponse, error)

	// GetEntitlementValueWithResponse request
	GetEntitlementValueWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *GetEntitlementValueParams, reqEditors ...RequestEditorFn) (*GetEntitlementValueResponse, error)

	// DeleteEntitlementWithResponse request
	DeleteEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*DeleteEntitlementResponse, error)

	// GetEntitlementWithResponse request
	GetEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*GetEntitlementResponse, error)

	// GetEntitlementHistoryWithResponse request
	GetEntitlementHistoryWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, params *GetEntitlementHistoryParams, reqEditors ...RequestEditorFn) (*GetEntitlementHistoryResponse, error)

	// ResetEntitlementUsageWithBodyWithResponse request with any body
	ResetEntitlementUsageWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetEntitlementUsageResponse, error)

	ResetEntitlementUsageWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, body ResetEntitlementUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetEntitlementUsageResponse, error)

	// SubscriptionsCreateWithBodyWithResponse request with any body
	SubscriptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionsCreateResponse, error)

	SubscriptionsCreateWithResponse(ctx context.Context, body SubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionsCreateResponse, error)

	// GetSubscriptionGetSubscriptionWithResponse request
	GetSubscriptionGetSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetSubscriptionGetSubscriptionParams, reqEditors ...RequestEditorFn) (*GetSubscriptionGetSubscriptionResponse, error)

	// EditSubscriptionWithBodyWithResponse request with any body
	EditSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditSubscriptionResponse, error)

	EditSubscriptionWithResponse(ctx context.Context, subscriptionId string, body EditSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*EditSubscriptionResponse, error)

	// CancelSubscriptionWithBodyWithResponse request with any body
	CancelSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelSubscriptionResponse, error)

	CancelSubscriptionWithResponse(ctx context.Context, subscriptionId string, body CancelSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelSubscriptionResponse, error)

	// MigrateSubscriptionWithBodyWithResponse request with any body
	MigrateSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateSubscriptionResponse, error)

	MigrateSubscriptionWithResponse(ctx context.Context, subscriptionId string, body MigrateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateSubscriptionResponse, error)

	// UnscheduleCancelationWithResponse request
	UnscheduleCancelationWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnscheduleCancelationResponse, error)
}

type ListAppsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]AppList
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UninstallAppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UninstallAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UninstallAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *App
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppStripeWebhookResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *StripeWebhookResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r AppStripeWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppStripeWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingListCustomerOverridesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *CustomerOverridePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingListCustomerOverridesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingListCustomerOverridesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingDeleteCustomerOverrideResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingDeleteCustomerOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingDeleteCustomerOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingGetCustomerOverrideByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingCustomerOverride
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetCustomerOverrideByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetCustomerOverrideByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingUpsertCustomerOverrideResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingCustomerOverride
	JSON201                       *BillingCustomerOverride
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingUpsertCustomerOverrideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingUpsertCustomerOverrideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingListInvoicesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *InvoicePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingListInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingListInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingListInvoicesByCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *InvoicePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingListInvoicesByCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingListInvoicesByCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingCreateInvoiceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingCreateInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingCreateInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingDeleteInvoiceByCustomerInvoiceIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingDeleteInvoiceByCustomerInvoiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingDeleteInvoiceByCustomerInvoiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingGetInvoiceByCustomerInvoiceIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetInvoiceByCustomerInvoiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetInvoiceByCustomerInvoiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingApproveInvoiceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingApproveInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingApproveInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingDeleteInvoiceLineResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingDeleteInvoiceLineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingDeleteInvoiceLineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingUpdateInvoiceLineResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoiceLine
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingUpdateInvoiceLineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingUpdateInvoiceLineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingRecalculateInvoiceTaxResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingRecalculateInvoiceTaxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingRecalculateInvoiceTaxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingVoidInvoiceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingVoidInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingVoidInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingInvoiceWorkflowAdvanceResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingInvoice
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingInvoiceWorkflowAdvanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingInvoiceWorkflowAdvanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingCreateLineByCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BillingCreateLineResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingCreateLineByCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingCreateLineByCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingListProfilesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ProfilePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingListProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingListProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingCreateProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *BillingProfile
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingCreateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingCreateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingArchiveProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingArchiveProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingArchiveProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingGetProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingProfile
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingGetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingGetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BillingUpdateProfileResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *BillingProfile
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r BillingUpdateProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BillingUpdateProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]CustomerList
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Customer
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Customer
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Customer
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomerResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Customer
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDebugMetricsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetDebugMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDebugMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEntitlementsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ListEntitlementsResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListEntitlementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEntitlementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntitlementByIdResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Entitlement
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetEntitlementByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntitlementByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEventsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]IngestedEvent
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IngestEventsResponse struct {
	Body                               []byte
	HTTPResponse                       *http.Response
	ApplicationcloudeventsJSON200      *Event
	ApplicationcloudeventsBatchJSON200 *[]Event
	ApplicationproblemJSON400          *BadRequestProblemResponse
	ApplicationproblemJSON401          *UnauthorizedProblemResponse
	ApplicationproblemJSON403          *ForbiddenProblemResponse
	ApplicationproblemJSON500          *InternalServerErrorProblemResponse
	ApplicationproblemJSON503          *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault      *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r IngestEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IngestEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFeaturesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ListFeaturesResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFeatureResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Feature
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFeatureResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeatureResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Feature
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetFeatureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeatureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}
type ListGrants2000 = []EntitlementGrant

// Status returns HTTPResponse.Status
func (r ListGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoidGrantResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r VoidGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoidGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStripeCheckoutSessionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *CreateStripeCheckoutSessionResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateStripeCheckoutSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStripeCheckoutSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMarketplaceListingsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *MarketplaceListingList
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListMarketplaceListingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMarketplaceListingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMarketplaceListingResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *MarketplaceListing
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetMarketplaceListingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMarketplaceListingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceAppAPIKeyInstallResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *AppBase
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r MarketplaceAppAPIKeyInstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceAppAPIKeyInstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceOAuth2InstallGetURLResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *ClientAppStartResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r MarketplaceOAuth2InstallGetURLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceOAuth2InstallGetURLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarketplaceOAuth2InstallAuthorizeResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r MarketplaceOAuth2InstallAuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarketplaceOAuth2InstallAuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMetersResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]Meter
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListMetersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMetersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMeterResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Meter
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateMeterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMeterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMeterResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteMeterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMeterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeterResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Meter
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetMeterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMeterResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *MeterQueryResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r QueryMeterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMeterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMeterSubjectsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]string
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListMeterSubjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMeterSubjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNotificationChannelsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationChannelPaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListNotificationChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNotificationChannelResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *NotificationChannel
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateNotificationChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNotificationChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationChannelResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationChannelResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationChannel
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetNotificationChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNotificationChannelResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationChannel
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNotificationChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNotificationChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNotificationEventsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationEventPaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListNotificationEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationEventResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationEvent
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetNotificationEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNotificationRulesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationRulePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListNotificationRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNotificationRuleResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *NotificationRule
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNotificationRuleResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNotificationRuleResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationRule
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateNotificationRuleResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *NotificationRule
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpdateNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TestNotificationRuleResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *NotificationEvent
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r TestNotificationRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TestNotificationRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReceiveSvixOperationalEventResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ReceiveSvixOperationalEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReceiveSvixOperationalEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlansResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PlanPaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Plan
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreatePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NewDraftPlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Plan
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r NewDraftPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewDraftPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeletePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Plan
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Plan
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlanPhasesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PlanPhasePaginatedResponse
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListPlanPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlanPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlanPhasesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *PlanPhase
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreatePlanPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlanPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlanPhasesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeletePlanPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlanPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlanPhasesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PlanPhase
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetPlanPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlanPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlanPhasesResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PlanPhase
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePlanPhasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlanPhasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishPlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r PublishPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishPlanResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UnpublishPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryPortalMeterResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *MeterQueryResult
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r QueryPortalMeterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryPortalMeterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPortalTokensResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]PortalToken
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListPortalTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPortalTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePortalTokenResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *PortalToken
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreatePortalTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePortalTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InvalidatePortalTokensResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r InvalidatePortalTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InvalidatePortalTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubjectsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]Subject
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListSubjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertSubjectResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]Subject
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UpsertSubjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertSubjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubjectResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSubjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubjectResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subject
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetSubjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSubjectEntitlementsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]Entitlement
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListSubjectEntitlementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSubjectEntitlementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEntitlementResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Entitlement
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEntitlementGrantsResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *[]EntitlementGrant
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ListEntitlementGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEntitlementGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGrantResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *EntitlementGrant
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CreateGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OverrideEntitlementResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON201                       *Entitlement
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r OverrideEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OverrideEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntitlementValueResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *EntitlementValue
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetEntitlementValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntitlementValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEntitlementResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r DeleteEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntitlementResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Entitlement
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetEntitlementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntitlementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntitlementHistoryResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *WindowedBalanceHistory
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetEntitlementHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntitlementHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetEntitlementUsageResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r ResetEntitlementUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetEntitlementUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscriptionsCreateResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subscription
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r SubscriptionsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscriptionsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscriptionGetSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r GetSubscriptionGetSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscriptionGetSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subscription
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r EditSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subscription
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r CancelSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrateSubscriptionResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subscription
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r MigrateSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrateSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnscheduleCancelationResponse struct {
	Body                          []byte
	HTTPResponse                  *http.Response
	JSON200                       *Subscription
	ApplicationproblemJSON400     *BadRequestProblemResponse
	ApplicationproblemJSON401     *UnauthorizedProblemResponse
	ApplicationproblemJSON403     *ForbiddenProblemResponse
	ApplicationproblemJSON404     *NotFoundProblemResponse
	ApplicationproblemJSON409     *ConflictProblemResponse
	ApplicationproblemJSON500     *InternalServerErrorProblemResponse
	ApplicationproblemJSON503     *ServiceUnavailableProblemResponse
	ApplicationproblemJSONDefault *UnexpectedProblemResponse
}

// Status returns HTTPResponse.Status
func (r UnscheduleCancelationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnscheduleCancelationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAppsWithResponse request returning *ListAppsResponse
func (c *ClientWithResponses) ListAppsWithResponse(ctx context.Context, params *ListAppsParams, reqEditors ...RequestEditorFn) (*ListAppsResponse, error) {
	rsp, err := c.ListApps(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppsResponse(rsp)
}

// UninstallAppWithResponse request returning *UninstallAppResponse
func (c *ClientWithResponses) UninstallAppWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*UninstallAppResponse, error) {
	rsp, err := c.UninstallApp(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUninstallAppResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// AppStripeWebhookWithBodyWithResponse request with arbitrary body returning *AppStripeWebhookResponse
func (c *ClientWithResponses) AppStripeWebhookWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppStripeWebhookResponse, error) {
	rsp, err := c.AppStripeWebhookWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStripeWebhookResponse(rsp)
}

func (c *ClientWithResponses) AppStripeWebhookWithResponse(ctx context.Context, id string, body AppStripeWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*AppStripeWebhookResponse, error) {
	rsp, err := c.AppStripeWebhook(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppStripeWebhookResponse(rsp)
}

// BillingListCustomerOverridesWithResponse request returning *BillingListCustomerOverridesResponse
func (c *ClientWithResponses) BillingListCustomerOverridesWithResponse(ctx context.Context, params *BillingListCustomerOverridesParams, reqEditors ...RequestEditorFn) (*BillingListCustomerOverridesResponse, error) {
	rsp, err := c.BillingListCustomerOverrides(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingListCustomerOverridesResponse(rsp)
}

// BillingDeleteCustomerOverrideWithResponse request returning *BillingDeleteCustomerOverrideResponse
func (c *ClientWithResponses) BillingDeleteCustomerOverrideWithResponse(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*BillingDeleteCustomerOverrideResponse, error) {
	rsp, err := c.BillingDeleteCustomerOverride(ctx, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingDeleteCustomerOverrideResponse(rsp)
}

// BillingGetCustomerOverrideByIdWithResponse request returning *BillingGetCustomerOverrideByIdResponse
func (c *ClientWithResponses) BillingGetCustomerOverrideByIdWithResponse(ctx context.Context, customerId string, reqEditors ...RequestEditorFn) (*BillingGetCustomerOverrideByIdResponse, error) {
	rsp, err := c.BillingGetCustomerOverrideById(ctx, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetCustomerOverrideByIdResponse(rsp)
}

// BillingUpsertCustomerOverrideWithBodyWithResponse request with arbitrary body returning *BillingUpsertCustomerOverrideResponse
func (c *ClientWithResponses) BillingUpsertCustomerOverrideWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpsertCustomerOverrideResponse, error) {
	rsp, err := c.BillingUpsertCustomerOverrideWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpsertCustomerOverrideResponse(rsp)
}

func (c *ClientWithResponses) BillingUpsertCustomerOverrideWithResponse(ctx context.Context, customerId string, body BillingUpsertCustomerOverrideJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpsertCustomerOverrideResponse, error) {
	rsp, err := c.BillingUpsertCustomerOverride(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpsertCustomerOverrideResponse(rsp)
}

// BillingListInvoicesWithResponse request returning *BillingListInvoicesResponse
func (c *ClientWithResponses) BillingListInvoicesWithResponse(ctx context.Context, params *BillingListInvoicesParams, reqEditors ...RequestEditorFn) (*BillingListInvoicesResponse, error) {
	rsp, err := c.BillingListInvoices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingListInvoicesResponse(rsp)
}

// BillingListInvoicesByCustomerWithResponse request returning *BillingListInvoicesByCustomerResponse
func (c *ClientWithResponses) BillingListInvoicesByCustomerWithResponse(ctx context.Context, customerId string, params *BillingListInvoicesByCustomerParams, reqEditors ...RequestEditorFn) (*BillingListInvoicesByCustomerResponse, error) {
	rsp, err := c.BillingListInvoicesByCustomer(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingListInvoicesByCustomerResponse(rsp)
}

// BillingCreateInvoiceWithBodyWithResponse request with arbitrary body returning *BillingCreateInvoiceResponse
func (c *ClientWithResponses) BillingCreateInvoiceWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateInvoiceResponse, error) {
	rsp, err := c.BillingCreateInvoiceWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateInvoiceResponse(rsp)
}

func (c *ClientWithResponses) BillingCreateInvoiceWithResponse(ctx context.Context, customerId string, body BillingCreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateInvoiceResponse, error) {
	rsp, err := c.BillingCreateInvoice(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateInvoiceResponse(rsp)
}

// BillingDeleteInvoiceByCustomerInvoiceIdWithResponse request returning *BillingDeleteInvoiceByCustomerInvoiceIdResponse
func (c *ClientWithResponses) BillingDeleteInvoiceByCustomerInvoiceIdWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingDeleteInvoiceByCustomerInvoiceIdResponse, error) {
	rsp, err := c.BillingDeleteInvoiceByCustomerInvoiceId(ctx, customerId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingDeleteInvoiceByCustomerInvoiceIdResponse(rsp)
}

// BillingGetInvoiceByCustomerInvoiceIdWithResponse request returning *BillingGetInvoiceByCustomerInvoiceIdResponse
func (c *ClientWithResponses) BillingGetInvoiceByCustomerInvoiceIdWithResponse(ctx context.Context, customerId string, invoiceId string, params *BillingGetInvoiceByCustomerInvoiceIdParams, reqEditors ...RequestEditorFn) (*BillingGetInvoiceByCustomerInvoiceIdResponse, error) {
	rsp, err := c.BillingGetInvoiceByCustomerInvoiceId(ctx, customerId, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetInvoiceByCustomerInvoiceIdResponse(rsp)
}

// BillingApproveInvoiceWithResponse request returning *BillingApproveInvoiceResponse
func (c *ClientWithResponses) BillingApproveInvoiceWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingApproveInvoiceResponse, error) {
	rsp, err := c.BillingApproveInvoice(ctx, customerId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingApproveInvoiceResponse(rsp)
}

// BillingDeleteInvoiceLineWithResponse request returning *BillingDeleteInvoiceLineResponse
func (c *ClientWithResponses) BillingDeleteInvoiceLineWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, reqEditors ...RequestEditorFn) (*BillingDeleteInvoiceLineResponse, error) {
	rsp, err := c.BillingDeleteInvoiceLine(ctx, customerId, invoiceId, lineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingDeleteInvoiceLineResponse(rsp)
}

// BillingUpdateInvoiceLineWithBodyWithResponse request with arbitrary body returning *BillingUpdateInvoiceLineResponse
func (c *ClientWithResponses) BillingUpdateInvoiceLineWithBodyWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpdateInvoiceLineResponse, error) {
	rsp, err := c.BillingUpdateInvoiceLineWithBody(ctx, customerId, invoiceId, lineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpdateInvoiceLineResponse(rsp)
}

func (c *ClientWithResponses) BillingUpdateInvoiceLineWithResponse(ctx context.Context, customerId string, invoiceId string, lineId string, body BillingUpdateInvoiceLineJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpdateInvoiceLineResponse, error) {
	rsp, err := c.BillingUpdateInvoiceLine(ctx, customerId, invoiceId, lineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpdateInvoiceLineResponse(rsp)
}

// BillingRecalculateInvoiceTaxWithResponse request returning *BillingRecalculateInvoiceTaxResponse
func (c *ClientWithResponses) BillingRecalculateInvoiceTaxWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingRecalculateInvoiceTaxResponse, error) {
	rsp, err := c.BillingRecalculateInvoiceTax(ctx, customerId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingRecalculateInvoiceTaxResponse(rsp)
}

// BillingVoidInvoiceWithBodyWithResponse request with arbitrary body returning *BillingVoidInvoiceResponse
func (c *ClientWithResponses) BillingVoidInvoiceWithBodyWithResponse(ctx context.Context, customerId string, invoiceId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingVoidInvoiceResponse, error) {
	rsp, err := c.BillingVoidInvoiceWithBody(ctx, customerId, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingVoidInvoiceResponse(rsp)
}

func (c *ClientWithResponses) BillingVoidInvoiceWithResponse(ctx context.Context, customerId string, invoiceId string, body BillingVoidInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingVoidInvoiceResponse, error) {
	rsp, err := c.BillingVoidInvoice(ctx, customerId, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingVoidInvoiceResponse(rsp)
}

// BillingInvoiceWorkflowAdvanceWithResponse request returning *BillingInvoiceWorkflowAdvanceResponse
func (c *ClientWithResponses) BillingInvoiceWorkflowAdvanceWithResponse(ctx context.Context, customerId string, invoiceId string, reqEditors ...RequestEditorFn) (*BillingInvoiceWorkflowAdvanceResponse, error) {
	rsp, err := c.BillingInvoiceWorkflowAdvance(ctx, customerId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingInvoiceWorkflowAdvanceResponse(rsp)
}

// BillingCreateLineByCustomerWithBodyWithResponse request with arbitrary body returning *BillingCreateLineByCustomerResponse
func (c *ClientWithResponses) BillingCreateLineByCustomerWithBodyWithResponse(ctx context.Context, customerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateLineByCustomerResponse, error) {
	rsp, err := c.BillingCreateLineByCustomerWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateLineByCustomerResponse(rsp)
}

func (c *ClientWithResponses) BillingCreateLineByCustomerWithResponse(ctx context.Context, customerId string, body BillingCreateLineByCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateLineByCustomerResponse, error) {
	rsp, err := c.BillingCreateLineByCustomer(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateLineByCustomerResponse(rsp)
}

// BillingListProfilesWithResponse request returning *BillingListProfilesResponse
func (c *ClientWithResponses) BillingListProfilesWithResponse(ctx context.Context, params *BillingListProfilesParams, reqEditors ...RequestEditorFn) (*BillingListProfilesResponse, error) {
	rsp, err := c.BillingListProfiles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingListProfilesResponse(rsp)
}

// BillingCreateProfileWithBodyWithResponse request with arbitrary body returning *BillingCreateProfileResponse
func (c *ClientWithResponses) BillingCreateProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingCreateProfileResponse, error) {
	rsp, err := c.BillingCreateProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateProfileResponse(rsp)
}

func (c *ClientWithResponses) BillingCreateProfileWithResponse(ctx context.Context, body BillingCreateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingCreateProfileResponse, error) {
	rsp, err := c.BillingCreateProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingCreateProfileResponse(rsp)
}

// BillingArchiveProfileWithResponse request returning *BillingArchiveProfileResponse
func (c *ClientWithResponses) BillingArchiveProfileWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*BillingArchiveProfileResponse, error) {
	rsp, err := c.BillingArchiveProfile(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingArchiveProfileResponse(rsp)
}

// BillingGetProfileWithResponse request returning *BillingGetProfileResponse
func (c *ClientWithResponses) BillingGetProfileWithResponse(ctx context.Context, id string, params *BillingGetProfileParams, reqEditors ...RequestEditorFn) (*BillingGetProfileResponse, error) {
	rsp, err := c.BillingGetProfile(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingGetProfileResponse(rsp)
}

// BillingUpdateProfileWithBodyWithResponse request with arbitrary body returning *BillingUpdateProfileResponse
func (c *ClientWithResponses) BillingUpdateProfileWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BillingUpdateProfileResponse, error) {
	rsp, err := c.BillingUpdateProfileWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpdateProfileResponse(rsp)
}

func (c *ClientWithResponses) BillingUpdateProfileWithResponse(ctx context.Context, id string, body BillingUpdateProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*BillingUpdateProfileResponse, error) {
	rsp, err := c.BillingUpdateProfile(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBillingUpdateProfileResponse(rsp)
}

// ListCustomersWithResponse request returning *ListCustomersResponse
func (c *ClientWithResponses) ListCustomersWithResponse(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*ListCustomersResponse, error) {
	rsp, err := c.ListCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomersResponse(rsp)
}

// CreateCustomerWithBodyWithResponse request with arbitrary body returning *CreateCustomerResponse
func (c *ClientWithResponses) CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

// DeleteCustomerWithResponse request returning *DeleteCustomerResponse
func (c *ClientWithResponses) DeleteCustomerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteCustomerResponse, error) {
	rsp, err := c.DeleteCustomer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerResponse(rsp)
}

// GetCustomerWithResponse request returning *GetCustomerResponse
func (c *ClientWithResponses) GetCustomerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error) {
	rsp, err := c.GetCustomer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerResponse(rsp)
}

// UpdateCustomerWithBodyWithResponse request with arbitrary body returning *UpdateCustomerResponse
func (c *ClientWithResponses) UpdateCustomerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error) {
	rsp, err := c.UpdateCustomerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomerWithResponse(ctx context.Context, id string, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error) {
	rsp, err := c.UpdateCustomer(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerResponse(rsp)
}

// GetDebugMetricsWithResponse request returning *GetDebugMetricsResponse
func (c *ClientWithResponses) GetDebugMetricsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDebugMetricsResponse, error) {
	rsp, err := c.GetDebugMetrics(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDebugMetricsResponse(rsp)
}

// ListEntitlementsWithResponse request returning *ListEntitlementsResponse
func (c *ClientWithResponses) ListEntitlementsWithResponse(ctx context.Context, params *ListEntitlementsParams, reqEditors ...RequestEditorFn) (*ListEntitlementsResponse, error) {
	rsp, err := c.ListEntitlements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEntitlementsResponse(rsp)
}

// GetEntitlementByIdWithResponse request returning *GetEntitlementByIdResponse
func (c *ClientWithResponses) GetEntitlementByIdWithResponse(ctx context.Context, entitlementId string, reqEditors ...RequestEditorFn) (*GetEntitlementByIdResponse, error) {
	rsp, err := c.GetEntitlementById(ctx, entitlementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntitlementByIdResponse(rsp)
}

// ListEventsWithResponse request returning *ListEventsResponse
func (c *ClientWithResponses) ListEventsWithResponse(ctx context.Context, params *ListEventsParams, reqEditors ...RequestEditorFn) (*ListEventsResponse, error) {
	rsp, err := c.ListEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEventsResponse(rsp)
}

// IngestEventsWithBodyWithResponse request with arbitrary body returning *IngestEventsResponse
func (c *ClientWithResponses) IngestEventsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error) {
	rsp, err := c.IngestEventsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestEventsResponse(rsp)
}

func (c *ClientWithResponses) IngestEventsWithApplicationCloudeventsPlusJSONBodyWithResponse(ctx context.Context, body IngestEventsApplicationCloudeventsPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error) {
	rsp, err := c.IngestEventsWithApplicationCloudeventsPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestEventsResponse(rsp)
}

func (c *ClientWithResponses) IngestEventsWithApplicationCloudeventsBatchPlusJSONBodyWithResponse(ctx context.Context, body IngestEventsApplicationCloudeventsBatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestEventsResponse, error) {
	rsp, err := c.IngestEventsWithApplicationCloudeventsBatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestEventsResponse(rsp)
}

// ListFeaturesWithResponse request returning *ListFeaturesResponse
func (c *ClientWithResponses) ListFeaturesWithResponse(ctx context.Context, params *ListFeaturesParams, reqEditors ...RequestEditorFn) (*ListFeaturesResponse, error) {
	rsp, err := c.ListFeatures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFeaturesResponse(rsp)
}

// CreateFeatureWithBodyWithResponse request with arbitrary body returning *CreateFeatureResponse
func (c *ClientWithResponses) CreateFeatureWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error) {
	rsp, err := c.CreateFeatureWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureResponse(rsp)
}

func (c *ClientWithResponses) CreateFeatureWithResponse(ctx context.Context, body CreateFeatureJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFeatureResponse, error) {
	rsp, err := c.CreateFeature(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFeatureResponse(rsp)
}

// DeleteFeatureWithResponse request returning *DeleteFeatureResponse
func (c *ClientWithResponses) DeleteFeatureWithResponse(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*DeleteFeatureResponse, error) {
	rsp, err := c.DeleteFeature(ctx, featureId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFeatureResponse(rsp)
}

// GetFeatureWithResponse request returning *GetFeatureResponse
func (c *ClientWithResponses) GetFeatureWithResponse(ctx context.Context, featureId string, reqEditors ...RequestEditorFn) (*GetFeatureResponse, error) {
	rsp, err := c.GetFeature(ctx, featureId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeatureResponse(rsp)
}

// ListGrantsWithResponse request returning *ListGrantsResponse
func (c *ClientWithResponses) ListGrantsWithResponse(ctx context.Context, params *ListGrantsParams, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error) {
	rsp, err := c.ListGrants(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGrantsResponse(rsp)
}

// VoidGrantWithResponse request returning *VoidGrantResponse
func (c *ClientWithResponses) VoidGrantWithResponse(ctx context.Context, grantId string, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error) {
	rsp, err := c.VoidGrant(ctx, grantId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoidGrantResponse(rsp)
}

// CreateStripeCheckoutSessionWithBodyWithResponse request with arbitrary body returning *CreateStripeCheckoutSessionResponse
func (c *ClientWithResponses) CreateStripeCheckoutSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStripeCheckoutSessionResponse, error) {
	rsp, err := c.CreateStripeCheckoutSessionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStripeCheckoutSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateStripeCheckoutSessionWithResponse(ctx context.Context, body CreateStripeCheckoutSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStripeCheckoutSessionResponse, error) {
	rsp, err := c.CreateStripeCheckoutSession(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStripeCheckoutSessionResponse(rsp)
}

// ListMarketplaceListingsWithResponse request returning *ListMarketplaceListingsResponse
func (c *ClientWithResponses) ListMarketplaceListingsWithResponse(ctx context.Context, params *ListMarketplaceListingsParams, reqEditors ...RequestEditorFn) (*ListMarketplaceListingsResponse, error) {
	rsp, err := c.ListMarketplaceListings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMarketplaceListingsResponse(rsp)
}

// GetMarketplaceListingWithResponse request returning *GetMarketplaceListingResponse
func (c *ClientWithResponses) GetMarketplaceListingWithResponse(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*GetMarketplaceListingResponse, error) {
	rsp, err := c.GetMarketplaceListing(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMarketplaceListingResponse(rsp)
}

// MarketplaceAppAPIKeyInstallWithBodyWithResponse request with arbitrary body returning *MarketplaceAppAPIKeyInstallResponse
func (c *ClientWithResponses) MarketplaceAppAPIKeyInstallWithBodyWithResponse(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MarketplaceAppAPIKeyInstallResponse, error) {
	rsp, err := c.MarketplaceAppAPIKeyInstallWithBody(ctx, pType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceAppAPIKeyInstallResponse(rsp)
}

func (c *ClientWithResponses) MarketplaceAppAPIKeyInstallWithResponse(ctx context.Context, pType MarketplaceApiKeyInstallRequestType, body MarketplaceAppAPIKeyInstallJSONRequestBody, reqEditors ...RequestEditorFn) (*MarketplaceAppAPIKeyInstallResponse, error) {
	rsp, err := c.MarketplaceAppAPIKeyInstall(ctx, pType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceAppAPIKeyInstallResponse(rsp)
}

// MarketplaceOAuth2InstallGetURLWithResponse request returning *MarketplaceOAuth2InstallGetURLResponse
func (c *ClientWithResponses) MarketplaceOAuth2InstallGetURLWithResponse(ctx context.Context, pType AppType, reqEditors ...RequestEditorFn) (*MarketplaceOAuth2InstallGetURLResponse, error) {
	rsp, err := c.MarketplaceOAuth2InstallGetURL(ctx, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceOAuth2InstallGetURLResponse(rsp)
}

// MarketplaceOAuth2InstallAuthorizeWithResponse request returning *MarketplaceOAuth2InstallAuthorizeResponse
func (c *ClientWithResponses) MarketplaceOAuth2InstallAuthorizeWithResponse(ctx context.Context, pType MarketplaceOAuth2InstallAuthorizeRequestType, params *MarketplaceOAuth2InstallAuthorizeParams, reqEditors ...RequestEditorFn) (*MarketplaceOAuth2InstallAuthorizeResponse, error) {
	rsp, err := c.MarketplaceOAuth2InstallAuthorize(ctx, pType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarketplaceOAuth2InstallAuthorizeResponse(rsp)
}

// ListMetersWithResponse request returning *ListMetersResponse
func (c *ClientWithResponses) ListMetersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMetersResponse, error) {
	rsp, err := c.ListMeters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMetersResponse(rsp)
}

// CreateMeterWithBodyWithResponse request with arbitrary body returning *CreateMeterResponse
func (c *ClientWithResponses) CreateMeterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMeterResponse, error) {
	rsp, err := c.CreateMeterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMeterResponse(rsp)
}

func (c *ClientWithResponses) CreateMeterWithResponse(ctx context.Context, body CreateMeterJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMeterResponse, error) {
	rsp, err := c.CreateMeter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMeterResponse(rsp)
}

// DeleteMeterWithResponse request returning *DeleteMeterResponse
func (c *ClientWithResponses) DeleteMeterWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*DeleteMeterResponse, error) {
	rsp, err := c.DeleteMeter(ctx, meterIdOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMeterResponse(rsp)
}

// GetMeterWithResponse request returning *GetMeterResponse
func (c *ClientWithResponses) GetMeterWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*GetMeterResponse, error) {
	rsp, err := c.GetMeter(ctx, meterIdOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeterResponse(rsp)
}

// QueryMeterWithResponse request returning *QueryMeterResponse
func (c *ClientWithResponses) QueryMeterWithResponse(ctx context.Context, meterIdOrSlug string, params *QueryMeterParams, reqEditors ...RequestEditorFn) (*QueryMeterResponse, error) {
	rsp, err := c.QueryMeter(ctx, meterIdOrSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMeterResponse(rsp)
}

// ListMeterSubjectsWithResponse request returning *ListMeterSubjectsResponse
func (c *ClientWithResponses) ListMeterSubjectsWithResponse(ctx context.Context, meterIdOrSlug string, reqEditors ...RequestEditorFn) (*ListMeterSubjectsResponse, error) {
	rsp, err := c.ListMeterSubjects(ctx, meterIdOrSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMeterSubjectsResponse(rsp)
}

// ListNotificationChannelsWithResponse request returning *ListNotificationChannelsResponse
func (c *ClientWithResponses) ListNotificationChannelsWithResponse(ctx context.Context, params *ListNotificationChannelsParams, reqEditors ...RequestEditorFn) (*ListNotificationChannelsResponse, error) {
	rsp, err := c.ListNotificationChannels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationChannelsResponse(rsp)
}

// CreateNotificationChannelWithBodyWithResponse request with arbitrary body returning *CreateNotificationChannelResponse
func (c *ClientWithResponses) CreateNotificationChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationChannelResponse, error) {
	rsp, err := c.CreateNotificationChannelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationChannelResponse(rsp)
}

func (c *ClientWithResponses) CreateNotificationChannelWithResponse(ctx context.Context, body CreateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationChannelResponse, error) {
	rsp, err := c.CreateNotificationChannel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationChannelResponse(rsp)
}

// DeleteNotificationChannelWithResponse request returning *DeleteNotificationChannelResponse
func (c *ClientWithResponses) DeleteNotificationChannelWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*DeleteNotificationChannelResponse, error) {
	rsp, err := c.DeleteNotificationChannel(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationChannelResponse(rsp)
}

// GetNotificationChannelWithResponse request returning *GetNotificationChannelResponse
func (c *ClientWithResponses) GetNotificationChannelWithResponse(ctx context.Context, channelId string, reqEditors ...RequestEditorFn) (*GetNotificationChannelResponse, error) {
	rsp, err := c.GetNotificationChannel(ctx, channelId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationChannelResponse(rsp)
}

// UpdateNotificationChannelWithBodyWithResponse request with arbitrary body returning *UpdateNotificationChannelResponse
func (c *ClientWithResponses) UpdateNotificationChannelWithBodyWithResponse(ctx context.Context, channelId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationChannelResponse, error) {
	rsp, err := c.UpdateNotificationChannelWithBody(ctx, channelId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationChannelResponse(rsp)
}

func (c *ClientWithResponses) UpdateNotificationChannelWithResponse(ctx context.Context, channelId string, body UpdateNotificationChannelJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationChannelResponse, error) {
	rsp, err := c.UpdateNotificationChannel(ctx, channelId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationChannelResponse(rsp)
}

// ListNotificationEventsWithResponse request returning *ListNotificationEventsResponse
func (c *ClientWithResponses) ListNotificationEventsWithResponse(ctx context.Context, params *ListNotificationEventsParams, reqEditors ...RequestEditorFn) (*ListNotificationEventsResponse, error) {
	rsp, err := c.ListNotificationEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationEventsResponse(rsp)
}

// GetNotificationEventWithResponse request returning *GetNotificationEventResponse
func (c *ClientWithResponses) GetNotificationEventWithResponse(ctx context.Context, eventId string, reqEditors ...RequestEditorFn) (*GetNotificationEventResponse, error) {
	rsp, err := c.GetNotificationEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationEventResponse(rsp)
}

// ListNotificationRulesWithResponse request returning *ListNotificationRulesResponse
func (c *ClientWithResponses) ListNotificationRulesWithResponse(ctx context.Context, params *ListNotificationRulesParams, reqEditors ...RequestEditorFn) (*ListNotificationRulesResponse, error) {
	rsp, err := c.ListNotificationRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationRulesResponse(rsp)
}

// CreateNotificationRuleWithBodyWithResponse request with arbitrary body returning *CreateNotificationRuleResponse
func (c *ClientWithResponses) CreateNotificationRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNotificationRuleResponse, error) {
	rsp, err := c.CreateNotificationRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationRuleResponse(rsp)
}

func (c *ClientWithResponses) CreateNotificationRuleWithResponse(ctx context.Context, body CreateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNotificationRuleResponse, error) {
	rsp, err := c.CreateNotificationRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNotificationRuleResponse(rsp)
}

// DeleteNotificationRuleWithResponse request returning *DeleteNotificationRuleResponse
func (c *ClientWithResponses) DeleteNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*DeleteNotificationRuleResponse, error) {
	rsp, err := c.DeleteNotificationRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNotificationRuleResponse(rsp)
}

// GetNotificationRuleWithResponse request returning *GetNotificationRuleResponse
func (c *ClientWithResponses) GetNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*GetNotificationRuleResponse, error) {
	rsp, err := c.GetNotificationRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNotificationRuleResponse(rsp)
}

// UpdateNotificationRuleWithBodyWithResponse request with arbitrary body returning *UpdateNotificationRuleResponse
func (c *ClientWithResponses) UpdateNotificationRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateNotificationRuleResponse, error) {
	rsp, err := c.UpdateNotificationRuleWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationRuleResponse(rsp)
}

func (c *ClientWithResponses) UpdateNotificationRuleWithResponse(ctx context.Context, ruleId string, body UpdateNotificationRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateNotificationRuleResponse, error) {
	rsp, err := c.UpdateNotificationRule(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateNotificationRuleResponse(rsp)
}

// TestNotificationRuleWithResponse request returning *TestNotificationRuleResponse
func (c *ClientWithResponses) TestNotificationRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*TestNotificationRuleResponse, error) {
	rsp, err := c.TestNotificationRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTestNotificationRuleResponse(rsp)
}

// ReceiveSvixOperationalEventWithBodyWithResponse request with arbitrary body returning *ReceiveSvixOperationalEventResponse
func (c *ClientWithResponses) ReceiveSvixOperationalEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReceiveSvixOperationalEventResponse, error) {
	rsp, err := c.ReceiveSvixOperationalEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReceiveSvixOperationalEventResponse(rsp)
}

func (c *ClientWithResponses) ReceiveSvixOperationalEventWithResponse(ctx context.Context, body ReceiveSvixOperationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*ReceiveSvixOperationalEventResponse, error) {
	rsp, err := c.ReceiveSvixOperationalEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReceiveSvixOperationalEventResponse(rsp)
}

// ListPlansWithResponse request returning *ListPlansResponse
func (c *ClientWithResponses) ListPlansWithResponse(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*ListPlansResponse, error) {
	rsp, err := c.ListPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlansResponse(rsp)
}

// CreatePlanWithBodyWithResponse request with arbitrary body returning *CreatePlanResponse
func (c *ClientWithResponses) CreatePlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlanResponse, error) {
	rsp, err := c.CreatePlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlanResponse(rsp)
}

func (c *ClientWithResponses) CreatePlanWithResponse(ctx context.Context, body CreatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlanResponse, error) {
	rsp, err := c.CreatePlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlanResponse(rsp)
}

// NewDraftPlanWithResponse request returning *NewDraftPlanResponse
func (c *ClientWithResponses) NewDraftPlanWithResponse(ctx context.Context, planIdOrKey string, reqEditors ...RequestEditorFn) (*NewDraftPlanResponse, error) {
	rsp, err := c.NewDraftPlan(ctx, planIdOrKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewDraftPlanResponse(rsp)
}

// DeletePlanWithResponse request returning *DeletePlanResponse
func (c *ClientWithResponses) DeletePlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*DeletePlanResponse, error) {
	rsp, err := c.DeletePlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlanResponse(rsp)
}

// GetPlanWithResponse request returning *GetPlanResponse
func (c *ClientWithResponses) GetPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*GetPlanResponse, error) {
	rsp, err := c.GetPlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlanResponse(rsp)
}

// UpdatePlanWithBodyWithResponse request with arbitrary body returning *UpdatePlanResponse
func (c *ClientWithResponses) UpdatePlanWithBodyWithResponse(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlanResponse, error) {
	rsp, err := c.UpdatePlanWithBody(ctx, planId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlanResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlanWithResponse(ctx context.Context, planId string, body UpdatePlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlanResponse, error) {
	rsp, err := c.UpdatePlan(ctx, planId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlanResponse(rsp)
}

// ListPlanPhasesWithResponse request returning *ListPlanPhasesResponse
func (c *ClientWithResponses) ListPlanPhasesWithResponse(ctx context.Context, planId string, params *ListPlanPhasesParams, reqEditors ...RequestEditorFn) (*ListPlanPhasesResponse, error) {
	rsp, err := c.ListPlanPhases(ctx, planId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlanPhasesResponse(rsp)
}

// CreatePlanPhasesWithBodyWithResponse request with arbitrary body returning *CreatePlanPhasesResponse
func (c *ClientWithResponses) CreatePlanPhasesWithBodyWithResponse(ctx context.Context, planId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlanPhasesResponse, error) {
	rsp, err := c.CreatePlanPhasesWithBody(ctx, planId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlanPhasesResponse(rsp)
}

func (c *ClientWithResponses) CreatePlanPhasesWithResponse(ctx context.Context, planId string, body CreatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlanPhasesResponse, error) {
	rsp, err := c.CreatePlanPhases(ctx, planId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlanPhasesResponse(rsp)
}

// DeletePlanPhasesWithResponse request returning *DeletePlanPhasesResponse
func (c *ClientWithResponses) DeletePlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*DeletePlanPhasesResponse, error) {
	rsp, err := c.DeletePlanPhases(ctx, planId, planPhaseKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlanPhasesResponse(rsp)
}

// GetPlanPhasesWithResponse request returning *GetPlanPhasesResponse
func (c *ClientWithResponses) GetPlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, reqEditors ...RequestEditorFn) (*GetPlanPhasesResponse, error) {
	rsp, err := c.GetPlanPhases(ctx, planId, planPhaseKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlanPhasesResponse(rsp)
}

// UpdatePlanPhasesWithBodyWithResponse request with arbitrary body returning *UpdatePlanPhasesResponse
func (c *ClientWithResponses) UpdatePlanPhasesWithBodyWithResponse(ctx context.Context, planId string, planPhaseKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlanPhasesResponse, error) {
	rsp, err := c.UpdatePlanPhasesWithBody(ctx, planId, planPhaseKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlanPhasesResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlanPhasesWithResponse(ctx context.Context, planId string, planPhaseKey string, body UpdatePlanPhasesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlanPhasesResponse, error) {
	rsp, err := c.UpdatePlanPhases(ctx, planId, planPhaseKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlanPhasesResponse(rsp)
}

// PublishPlanWithResponse request returning *PublishPlanResponse
func (c *ClientWithResponses) PublishPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*PublishPlanResponse, error) {
	rsp, err := c.PublishPlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishPlanResponse(rsp)
}

// UnpublishPlanWithResponse request returning *UnpublishPlanResponse
func (c *ClientWithResponses) UnpublishPlanWithResponse(ctx context.Context, planId string, reqEditors ...RequestEditorFn) (*UnpublishPlanResponse, error) {
	rsp, err := c.UnpublishPlan(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishPlanResponse(rsp)
}

// QueryPortalMeterWithResponse request returning *QueryPortalMeterResponse
func (c *ClientWithResponses) QueryPortalMeterWithResponse(ctx context.Context, meterSlug string, params *QueryPortalMeterParams, reqEditors ...RequestEditorFn) (*QueryPortalMeterResponse, error) {
	rsp, err := c.QueryPortalMeter(ctx, meterSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryPortalMeterResponse(rsp)
}

// ListPortalTokensWithResponse request returning *ListPortalTokensResponse
func (c *ClientWithResponses) ListPortalTokensWithResponse(ctx context.Context, params *ListPortalTokensParams, reqEditors ...RequestEditorFn) (*ListPortalTokensResponse, error) {
	rsp, err := c.ListPortalTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPortalTokensResponse(rsp)
}

// CreatePortalTokenWithBodyWithResponse request with arbitrary body returning *CreatePortalTokenResponse
func (c *ClientWithResponses) CreatePortalTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePortalTokenResponse, error) {
	rsp, err := c.CreatePortalTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalTokenResponse(rsp)
}

func (c *ClientWithResponses) CreatePortalTokenWithResponse(ctx context.Context, body CreatePortalTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePortalTokenResponse, error) {
	rsp, err := c.CreatePortalToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePortalTokenResponse(rsp)
}

// InvalidatePortalTokensWithBodyWithResponse request with arbitrary body returning *InvalidatePortalTokensResponse
func (c *ClientWithResponses) InvalidatePortalTokensWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InvalidatePortalTokensResponse, error) {
	rsp, err := c.InvalidatePortalTokensWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvalidatePortalTokensResponse(rsp)
}

func (c *ClientWithResponses) InvalidatePortalTokensWithResponse(ctx context.Context, body InvalidatePortalTokensJSONRequestBody, reqEditors ...RequestEditorFn) (*InvalidatePortalTokensResponse, error) {
	rsp, err := c.InvalidatePortalTokens(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInvalidatePortalTokensResponse(rsp)
}

// ListSubjectsWithResponse request returning *ListSubjectsResponse
func (c *ClientWithResponses) ListSubjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSubjectsResponse, error) {
	rsp, err := c.ListSubjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSubjectsResponse(rsp)
}

// UpsertSubjectWithBodyWithResponse request with arbitrary body returning *UpsertSubjectResponse
func (c *ClientWithResponses) UpsertSubjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertSubjectResponse, error) {
	rsp, err := c.UpsertSubjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertSubjectResponse(rsp)
}

func (c *ClientWithResponses) UpsertSubjectWithResponse(ctx context.Context, body UpsertSubjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertSubjectResponse, error) {
	rsp, err := c.UpsertSubject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertSubjectResponse(rsp)
}

// DeleteSubjectWithResponse request returning *DeleteSubjectResponse
func (c *ClientWithResponses) DeleteSubjectWithResponse(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*DeleteSubjectResponse, error) {
	rsp, err := c.DeleteSubject(ctx, subjectIdOrKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubjectResponse(rsp)
}

// GetSubjectWithResponse request returning *GetSubjectResponse
func (c *ClientWithResponses) GetSubjectWithResponse(ctx context.Context, subjectIdOrKey string, reqEditors ...RequestEditorFn) (*GetSubjectResponse, error) {
	rsp, err := c.GetSubject(ctx, subjectIdOrKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubjectResponse(rsp)
}

// ListSubjectEntitlementsWithResponse request returning *ListSubjectEntitlementsResponse
func (c *ClientWithResponses) ListSubjectEntitlementsWithResponse(ctx context.Context, subjectIdOrKey string, params *ListSubjectEntitlementsParams, reqEditors ...RequestEditorFn) (*ListSubjectEntitlementsResponse, error) {
	rsp, err := c.ListSubjectEntitlements(ctx, subjectIdOrKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSubjectEntitlementsResponse(rsp)
}

// CreateEntitlementWithBodyWithResponse request with arbitrary body returning *CreateEntitlementResponse
func (c *ClientWithResponses) CreateEntitlementWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntitlementResponse, error) {
	rsp, err := c.CreateEntitlementWithBody(ctx, subjectIdOrKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntitlementResponse(rsp)
}

func (c *ClientWithResponses) CreateEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, body CreateEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntitlementResponse, error) {
	rsp, err := c.CreateEntitlement(ctx, subjectIdOrKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntitlementResponse(rsp)
}

// ListEntitlementGrantsWithResponse request returning *ListEntitlementGrantsResponse
func (c *ClientWithResponses) ListEntitlementGrantsWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *ListEntitlementGrantsParams, reqEditors ...RequestEditorFn) (*ListEntitlementGrantsResponse, error) {
	rsp, err := c.ListEntitlementGrants(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEntitlementGrantsResponse(rsp)
}

// CreateGrantWithBodyWithResponse request with arbitrary body returning *CreateGrantResponse
func (c *ClientWithResponses) CreateGrantWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error) {
	rsp, err := c.CreateGrantWithBody(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGrantResponse(rsp)
}

func (c *ClientWithResponses) CreateGrantWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error) {
	rsp, err := c.CreateGrant(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGrantResponse(rsp)
}

// OverrideEntitlementWithBodyWithResponse request with arbitrary body returning *OverrideEntitlementResponse
func (c *ClientWithResponses) OverrideEntitlementWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OverrideEntitlementResponse, error) {
	rsp, err := c.OverrideEntitlementWithBody(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverrideEntitlementResponse(rsp)
}

func (c *ClientWithResponses) OverrideEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, body OverrideEntitlementJSONRequestBody, reqEditors ...RequestEditorFn) (*OverrideEntitlementResponse, error) {
	rsp, err := c.OverrideEntitlement(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOverrideEntitlementResponse(rsp)
}

// GetEntitlementValueWithResponse request returning *GetEntitlementValueResponse
func (c *ClientWithResponses) GetEntitlementValueWithResponse(ctx context.Context, subjectIdOrKey string, entitlementIdOrFeatureKey string, params *GetEntitlementValueParams, reqEditors ...RequestEditorFn) (*GetEntitlementValueResponse, error) {
	rsp, err := c.GetEntitlementValue(ctx, subjectIdOrKey, entitlementIdOrFeatureKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntitlementValueResponse(rsp)
}

// DeleteEntitlementWithResponse request returning *DeleteEntitlementResponse
func (c *ClientWithResponses) DeleteEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*DeleteEntitlementResponse, error) {
	rsp, err := c.DeleteEntitlement(ctx, subjectIdOrKey, entitlementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntitlementResponse(rsp)
}

// GetEntitlementWithResponse request returning *GetEntitlementResponse
func (c *ClientWithResponses) GetEntitlementWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, reqEditors ...RequestEditorFn) (*GetEntitlementResponse, error) {
	rsp, err := c.GetEntitlement(ctx, subjectIdOrKey, entitlementId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntitlementResponse(rsp)
}

// GetEntitlementHistoryWithResponse request returning *GetEntitlementHistoryResponse
func (c *ClientWithResponses) GetEntitlementHistoryWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, params *GetEntitlementHistoryParams, reqEditors ...RequestEditorFn) (*GetEntitlementHistoryResponse, error) {
	rsp, err := c.GetEntitlementHistory(ctx, subjectIdOrKey, entitlementId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntitlementHistoryResponse(rsp)
}

// ResetEntitlementUsageWithBodyWithResponse request with arbitrary body returning *ResetEntitlementUsageResponse
func (c *ClientWithResponses) ResetEntitlementUsageWithBodyWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetEntitlementUsageResponse, error) {
	rsp, err := c.ResetEntitlementUsageWithBody(ctx, subjectIdOrKey, entitlementId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetEntitlementUsageResponse(rsp)
}

func (c *ClientWithResponses) ResetEntitlementUsageWithResponse(ctx context.Context, subjectIdOrKey string, entitlementId string, body ResetEntitlementUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetEntitlementUsageResponse, error) {
	rsp, err := c.ResetEntitlementUsage(ctx, subjectIdOrKey, entitlementId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetEntitlementUsageResponse(rsp)
}

// SubscriptionsCreateWithBodyWithResponse request with arbitrary body returning *SubscriptionsCreateResponse
func (c *ClientWithResponses) SubscriptionsCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscriptionsCreateResponse, error) {
	rsp, err := c.SubscriptionsCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionsCreateResponse(rsp)
}

func (c *ClientWithResponses) SubscriptionsCreateWithResponse(ctx context.Context, body SubscriptionsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SubscriptionsCreateResponse, error) {
	rsp, err := c.SubscriptionsCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscriptionsCreateResponse(rsp)
}

// GetSubscriptionGetSubscriptionWithResponse request returning *GetSubscriptionGetSubscriptionResponse
func (c *ClientWithResponses) GetSubscriptionGetSubscriptionWithResponse(ctx context.Context, subscriptionId string, params *GetSubscriptionGetSubscriptionParams, reqEditors ...RequestEditorFn) (*GetSubscriptionGetSubscriptionResponse, error) {
	rsp, err := c.GetSubscriptionGetSubscription(ctx, subscriptionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscriptionGetSubscriptionResponse(rsp)
}

// EditSubscriptionWithBodyWithResponse request with arbitrary body returning *EditSubscriptionResponse
func (c *ClientWithResponses) EditSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditSubscriptionResponse, error) {
	rsp, err := c.EditSubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) EditSubscriptionWithResponse(ctx context.Context, subscriptionId string, body EditSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*EditSubscriptionResponse, error) {
	rsp, err := c.EditSubscription(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditSubscriptionResponse(rsp)
}

// CancelSubscriptionWithBodyWithResponse request with arbitrary body returning *CancelSubscriptionResponse
func (c *ClientWithResponses) CancelSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelSubscriptionResponse, error) {
	rsp, err := c.CancelSubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CancelSubscriptionWithResponse(ctx context.Context, subscriptionId string, body CancelSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelSubscriptionResponse, error) {
	rsp, err := c.CancelSubscription(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelSubscriptionResponse(rsp)
}

// MigrateSubscriptionWithBodyWithResponse request with arbitrary body returning *MigrateSubscriptionResponse
func (c *ClientWithResponses) MigrateSubscriptionWithBodyWithResponse(ctx context.Context, subscriptionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MigrateSubscriptionResponse, error) {
	rsp, err := c.MigrateSubscriptionWithBody(ctx, subscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) MigrateSubscriptionWithResponse(ctx context.Context, subscriptionId string, body MigrateSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*MigrateSubscriptionResponse, error) {
	rsp, err := c.MigrateSubscription(ctx, subscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrateSubscriptionResponse(rsp)
}

// UnscheduleCancelationWithResponse request returning *UnscheduleCancelationResponse
func (c *ClientWithResponses) UnscheduleCancelationWithResponse(ctx context.Context, subscriptionId string, reqEditors ...RequestEditorFn) (*UnscheduleCancelationResponse, error) {
	rsp, err := c.UnscheduleCancelation(ctx, subscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnscheduleCancelationResponse(rsp)
}

// ParseListAppsResponse parses an HTTP response from a ListAppsWithResponse call
func ParseListAppsResponse(rsp *http.Response) (*ListAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUninstallAppResponse parses an HTTP response from a UninstallAppWithResponse call
func ParseUninstallAppResponse(rsp *http.Response) (*UninstallAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UninstallAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest App
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseAppStripeWebhookResponse parses an HTTP response from a AppStripeWebhookWithResponse call
func ParseAppStripeWebhookResponse(rsp *http.Response) (*AppStripeWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppStripeWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StripeWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingListCustomerOverridesResponse parses an HTTP response from a BillingListCustomerOverridesWithResponse call
func ParseBillingListCustomerOverridesResponse(rsp *http.Response) (*BillingListCustomerOverridesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingListCustomerOverridesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerOverridePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingDeleteCustomerOverrideResponse parses an HTTP response from a BillingDeleteCustomerOverrideWithResponse call
func ParseBillingDeleteCustomerOverrideResponse(rsp *http.Response) (*BillingDeleteCustomerOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingDeleteCustomerOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingGetCustomerOverrideByIdResponse parses an HTTP response from a BillingGetCustomerOverrideByIdWithResponse call
func ParseBillingGetCustomerOverrideByIdResponse(rsp *http.Response) (*BillingGetCustomerOverrideByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetCustomerOverrideByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingCustomerOverride
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingUpsertCustomerOverrideResponse parses an HTTP response from a BillingUpsertCustomerOverrideWithResponse call
func ParseBillingUpsertCustomerOverrideResponse(rsp *http.Response) (*BillingUpsertCustomerOverrideResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingUpsertCustomerOverrideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingCustomerOverride
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingCustomerOverride
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingListInvoicesResponse parses an HTTP response from a BillingListInvoicesWithResponse call
func ParseBillingListInvoicesResponse(rsp *http.Response) (*BillingListInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingListInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingListInvoicesByCustomerResponse parses an HTTP response from a BillingListInvoicesByCustomerWithResponse call
func ParseBillingListInvoicesByCustomerResponse(rsp *http.Response) (*BillingListInvoicesByCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingListInvoicesByCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingCreateInvoiceResponse parses an HTTP response from a BillingCreateInvoiceWithResponse call
func ParseBillingCreateInvoiceResponse(rsp *http.Response) (*BillingCreateInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingCreateInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingDeleteInvoiceByCustomerInvoiceIdResponse parses an HTTP response from a BillingDeleteInvoiceByCustomerInvoiceIdWithResponse call
func ParseBillingDeleteInvoiceByCustomerInvoiceIdResponse(rsp *http.Response) (*BillingDeleteInvoiceByCustomerInvoiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingDeleteInvoiceByCustomerInvoiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingGetInvoiceByCustomerInvoiceIdResponse parses an HTTP response from a BillingGetInvoiceByCustomerInvoiceIdWithResponse call
func ParseBillingGetInvoiceByCustomerInvoiceIdResponse(rsp *http.Response) (*BillingGetInvoiceByCustomerInvoiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetInvoiceByCustomerInvoiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingApproveInvoiceResponse parses an HTTP response from a BillingApproveInvoiceWithResponse call
func ParseBillingApproveInvoiceResponse(rsp *http.Response) (*BillingApproveInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingApproveInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingDeleteInvoiceLineResponse parses an HTTP response from a BillingDeleteInvoiceLineWithResponse call
func ParseBillingDeleteInvoiceLineResponse(rsp *http.Response) (*BillingDeleteInvoiceLineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingDeleteInvoiceLineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingUpdateInvoiceLineResponse parses an HTTP response from a BillingUpdateInvoiceLineWithResponse call
func ParseBillingUpdateInvoiceLineResponse(rsp *http.Response) (*BillingUpdateInvoiceLineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingUpdateInvoiceLineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoiceLine
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingRecalculateInvoiceTaxResponse parses an HTTP response from a BillingRecalculateInvoiceTaxWithResponse call
func ParseBillingRecalculateInvoiceTaxResponse(rsp *http.Response) (*BillingRecalculateInvoiceTaxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingRecalculateInvoiceTaxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingVoidInvoiceResponse parses an HTTP response from a BillingVoidInvoiceWithResponse call
func ParseBillingVoidInvoiceResponse(rsp *http.Response) (*BillingVoidInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingVoidInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingInvoiceWorkflowAdvanceResponse parses an HTTP response from a BillingInvoiceWorkflowAdvanceWithResponse call
func ParseBillingInvoiceWorkflowAdvanceResponse(rsp *http.Response) (*BillingInvoiceWorkflowAdvanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingInvoiceWorkflowAdvanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingInvoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingCreateLineByCustomerResponse parses an HTTP response from a BillingCreateLineByCustomerWithResponse call
func ParseBillingCreateLineByCustomerResponse(rsp *http.Response) (*BillingCreateLineByCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingCreateLineByCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingCreateLineResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingListProfilesResponse parses an HTTP response from a BillingListProfilesWithResponse call
func ParseBillingListProfilesResponse(rsp *http.Response) (*BillingListProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingListProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfilePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingCreateProfileResponse parses an HTTP response from a BillingCreateProfileWithResponse call
func ParseBillingCreateProfileResponse(rsp *http.Response) (*BillingCreateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingCreateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BillingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingArchiveProfileResponse parses an HTTP response from a BillingArchiveProfileWithResponse call
func ParseBillingArchiveProfileResponse(rsp *http.Response) (*BillingArchiveProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingArchiveProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingGetProfileResponse parses an HTTP response from a BillingGetProfileWithResponse call
func ParseBillingGetProfileResponse(rsp *http.Response) (*BillingGetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingGetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseBillingUpdateProfileResponse parses an HTTP response from a BillingUpdateProfileWithResponse call
func ParseBillingUpdateProfileResponse(rsp *http.Response) (*BillingUpdateProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BillingUpdateProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListCustomersResponse parses an HTTP response from a ListCustomersWithResponse call
func ParseListCustomersResponse(rsp *http.Response) (*ListCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCustomerResponse parses an HTTP response from a CreateCustomerWithResponse call
func ParseCreateCustomerResponse(rsp *http.Response) (*CreateCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCustomerResponse parses an HTTP response from a DeleteCustomerWithResponse call
func ParseDeleteCustomerResponse(rsp *http.Response) (*DeleteCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetCustomerResponse parses an HTTP response from a GetCustomerWithResponse call
func ParseGetCustomerResponse(rsp *http.Response) (*GetCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateCustomerResponse parses an HTTP response from a UpdateCustomerWithResponse call
func ParseUpdateCustomerResponse(rsp *http.Response) (*UpdateCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetDebugMetricsResponse parses an HTTP response from a GetDebugMetricsWithResponse call
func ParseGetDebugMetricsResponse(rsp *http.Response) (*GetDebugMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDebugMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListEntitlementsResponse parses an HTTP response from a ListEntitlementsWithResponse call
func ParseListEntitlementsResponse(rsp *http.Response) (*ListEntitlementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEntitlementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListEntitlementsResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEntitlementByIdResponse parses an HTTP response from a GetEntitlementByIdWithResponse call
func ParseGetEntitlementByIdResponse(rsp *http.Response) (*GetEntitlementByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntitlementByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entitlement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListEventsResponse parses an HTTP response from a ListEventsWithResponse call
func ParseListEventsResponse(rsp *http.Response) (*ListEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IngestedEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseIngestEventsResponse parses an HTTP response from a IngestEventsWithResponse call
func ParseIngestEventsResponse(rsp *http.Response) (*IngestEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IngestEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/cloudevents+json" && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationcloudeventsJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/cloudevents-batch+json" && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationcloudeventsBatchJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListFeaturesResponse parses an HTTP response from a ListFeaturesWithResponse call
func ParseListFeaturesResponse(rsp *http.Response) (*ListFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListFeaturesResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateFeatureResponse parses an HTTP response from a CreateFeatureWithResponse call
func ParseCreateFeatureResponse(rsp *http.Response) (*CreateFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Feature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFeatureResponse parses an HTTP response from a DeleteFeatureWithResponse call
func ParseDeleteFeatureResponse(rsp *http.Response) (*DeleteFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetFeatureResponse parses an HTTP response from a GetFeatureWithResponse call
func ParseGetFeatureResponse(rsp *http.Response) (*GetFeatureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeatureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Feature
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListGrantsResponse parses an HTTP response from a ListGrantsWithResponse call
func ParseListGrantsResponse(rsp *http.Response) (*ListGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseVoidGrantResponse parses an HTTP response from a VoidGrantWithResponse call
func ParseVoidGrantResponse(rsp *http.Response) (*VoidGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoidGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateStripeCheckoutSessionResponse parses an HTTP response from a CreateStripeCheckoutSessionWithResponse call
func ParseCreateStripeCheckoutSessionResponse(rsp *http.Response) (*CreateStripeCheckoutSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStripeCheckoutSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateStripeCheckoutSessionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListMarketplaceListingsResponse parses an HTTP response from a ListMarketplaceListingsWithResponse call
func ParseListMarketplaceListingsResponse(rsp *http.Response) (*ListMarketplaceListingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMarketplaceListingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketplaceListingList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetMarketplaceListingResponse parses an HTTP response from a GetMarketplaceListingWithResponse call
func ParseGetMarketplaceListingResponse(rsp *http.Response) (*GetMarketplaceListingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMarketplaceListingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MarketplaceListing
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseMarketplaceAppAPIKeyInstallResponse parses an HTTP response from a MarketplaceAppAPIKeyInstallWithResponse call
func ParseMarketplaceAppAPIKeyInstallResponse(rsp *http.Response) (*MarketplaceAppAPIKeyInstallResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceAppAPIKeyInstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppBase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseMarketplaceOAuth2InstallGetURLResponse parses an HTTP response from a MarketplaceOAuth2InstallGetURLWithResponse call
func ParseMarketplaceOAuth2InstallGetURLResponse(rsp *http.Response) (*MarketplaceOAuth2InstallGetURLResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceOAuth2InstallGetURLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientAppStartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseMarketplaceOAuth2InstallAuthorizeResponse parses an HTTP response from a MarketplaceOAuth2InstallAuthorizeWithResponse call
func ParseMarketplaceOAuth2InstallAuthorizeResponse(rsp *http.Response) (*MarketplaceOAuth2InstallAuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarketplaceOAuth2InstallAuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListMetersResponse parses an HTTP response from a ListMetersWithResponse call
func ParseListMetersResponse(rsp *http.Response) (*ListMetersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMetersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Meter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMeterResponse parses an HTTP response from a CreateMeterWithResponse call
func ParseCreateMeterResponse(rsp *http.Response) (*CreateMeterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMeterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Meter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMeterResponse parses an HTTP response from a DeleteMeterWithResponse call
func ParseDeleteMeterResponse(rsp *http.Response) (*DeleteMeterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMeterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetMeterResponse parses an HTTP response from a GetMeterWithResponse call
func ParseGetMeterResponse(rsp *http.Response) (*GetMeterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Meter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryMeterResponse parses an HTTP response from a QueryMeterWithResponse call
func ParseQueryMeterResponse(rsp *http.Response) (*QueryMeterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMeterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeterQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseListMeterSubjectsResponse parses an HTTP response from a ListMeterSubjectsWithResponse call
func ParseListMeterSubjectsResponse(rsp *http.Response) (*ListMeterSubjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMeterSubjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListNotificationChannelsResponse parses an HTTP response from a ListNotificationChannelsWithResponse call
func ParseListNotificationChannelsResponse(rsp *http.Response) (*ListNotificationChannelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationChannelPaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNotificationChannelResponse parses an HTTP response from a CreateNotificationChannelWithResponse call
func ParseCreateNotificationChannelResponse(rsp *http.Response) (*CreateNotificationChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNotificationChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NotificationChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNotificationChannelResponse parses an HTTP response from a DeleteNotificationChannelWithResponse call
func ParseDeleteNotificationChannelResponse(rsp *http.Response) (*DeleteNotificationChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotificationChannelResponse parses an HTTP response from a GetNotificationChannelWithResponse call
func ParseGetNotificationChannelResponse(rsp *http.Response) (*GetNotificationChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNotificationChannelResponse parses an HTTP response from a UpdateNotificationChannelWithResponse call
func ParseUpdateNotificationChannelResponse(rsp *http.Response) (*UpdateNotificationChannelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNotificationChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListNotificationEventsResponse parses an HTTP response from a ListNotificationEventsWithResponse call
func ParseListNotificationEventsResponse(rsp *http.Response) (*ListNotificationEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationEventPaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotificationEventResponse parses an HTTP response from a GetNotificationEventWithResponse call
func ParseGetNotificationEventResponse(rsp *http.Response) (*GetNotificationEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListNotificationRulesResponse parses an HTTP response from a ListNotificationRulesWithResponse call
func ParseListNotificationRulesResponse(rsp *http.Response) (*ListNotificationRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationRulePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateNotificationRuleResponse parses an HTTP response from a CreateNotificationRuleWithResponse call
func ParseCreateNotificationRuleResponse(rsp *http.Response) (*CreateNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteNotificationRuleResponse parses an HTTP response from a DeleteNotificationRuleWithResponse call
func ParseDeleteNotificationRuleResponse(rsp *http.Response) (*DeleteNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetNotificationRuleResponse parses an HTTP response from a GetNotificationRuleWithResponse call
func ParseGetNotificationRuleResponse(rsp *http.Response) (*GetNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateNotificationRuleResponse parses an HTTP response from a UpdateNotificationRuleWithResponse call
func ParseUpdateNotificationRuleResponse(rsp *http.Response) (*UpdateNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseTestNotificationRuleResponse parses an HTTP response from a TestNotificationRuleWithResponse call
func ParseTestNotificationRuleResponse(rsp *http.Response) (*TestNotificationRuleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TestNotificationRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NotificationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseReceiveSvixOperationalEventResponse parses an HTTP response from a ReceiveSvixOperationalEventWithResponse call
func ParseReceiveSvixOperationalEventResponse(rsp *http.Response) (*ReceiveSvixOperationalEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReceiveSvixOperationalEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListPlansResponse parses an HTTP response from a ListPlansWithResponse call
func ParseListPlansResponse(rsp *http.Response) (*ListPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanPaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePlanResponse parses an HTTP response from a CreatePlanWithResponse call
func ParseCreatePlanResponse(rsp *http.Response) (*CreatePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseNewDraftPlanResponse parses an HTTP response from a NewDraftPlanWithResponse call
func ParseNewDraftPlanResponse(rsp *http.Response) (*NewDraftPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewDraftPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePlanResponse parses an HTTP response from a DeletePlanWithResponse call
func ParseDeletePlanResponse(rsp *http.Response) (*DeletePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlanResponse parses an HTTP response from a GetPlanWithResponse call
func ParseGetPlanResponse(rsp *http.Response) (*GetPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlanResponse parses an HTTP response from a UpdatePlanWithResponse call
func ParseUpdatePlanResponse(rsp *http.Response) (*UpdatePlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Plan
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListPlanPhasesResponse parses an HTTP response from a ListPlanPhasesWithResponse call
func ParseListPlanPhasesResponse(rsp *http.Response) (*ListPlanPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlanPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanPhasePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePlanPhasesResponse parses an HTTP response from a CreatePlanPhasesWithResponse call
func ParseCreatePlanPhasesResponse(rsp *http.Response) (*CreatePlanPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlanPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlanPhase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePlanPhasesResponse parses an HTTP response from a DeletePlanPhasesWithResponse call
func ParseDeletePlanPhasesResponse(rsp *http.Response) (*DeletePlanPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlanPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetPlanPhasesResponse parses an HTTP response from a GetPlanPhasesWithResponse call
func ParseGetPlanPhasesResponse(rsp *http.Response) (*GetPlanPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlanPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanPhase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpdatePlanPhasesResponse parses an HTTP response from a UpdatePlanPhasesWithResponse call
func ParseUpdatePlanPhasesResponse(rsp *http.Response) (*UpdatePlanPhasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlanPhasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanPhase
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParsePublishPlanResponse parses an HTTP response from a PublishPlanWithResponse call
func ParsePublishPlanResponse(rsp *http.Response) (*PublishPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnpublishPlanResponse parses an HTTP response from a UnpublishPlanWithResponse call
func ParseUnpublishPlanResponse(rsp *http.Response) (*UnpublishPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnpublishPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseQueryPortalMeterResponse parses an HTTP response from a QueryPortalMeterWithResponse call
func ParseQueryPortalMeterResponse(rsp *http.Response) (*QueryPortalMeterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryPortalMeterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeterQueryResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/csv) unsupported

	}

	return response, nil
}

// ParseListPortalTokensResponse parses an HTTP response from a ListPortalTokensWithResponse call
func ParseListPortalTokensResponse(rsp *http.Response) (*ListPortalTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPortalTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PortalToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreatePortalTokenResponse parses an HTTP response from a CreatePortalTokenWithResponse call
func ParseCreatePortalTokenResponse(rsp *http.Response) (*CreatePortalTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePortalTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PortalToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseInvalidatePortalTokensResponse parses an HTTP response from a InvalidatePortalTokensWithResponse call
func ParseInvalidatePortalTokensResponse(rsp *http.Response) (*InvalidatePortalTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InvalidatePortalTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListSubjectsResponse parses an HTTP response from a ListSubjectsWithResponse call
func ParseListSubjectsResponse(rsp *http.Response) (*ListSubjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSubjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUpsertSubjectResponse parses an HTTP response from a UpsertSubjectWithResponse call
func ParseUpsertSubjectResponse(rsp *http.Response) (*UpsertSubjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertSubjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteSubjectResponse parses an HTTP response from a DeleteSubjectWithResponse call
func ParseDeleteSubjectResponse(rsp *http.Response) (*DeleteSubjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSubjectResponse parses an HTTP response from a GetSubjectWithResponse call
func ParseGetSubjectResponse(rsp *http.Response) (*GetSubjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subject
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListSubjectEntitlementsResponse parses an HTTP response from a ListSubjectEntitlementsWithResponse call
func ParseListSubjectEntitlementsResponse(rsp *http.Response) (*ListSubjectEntitlementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSubjectEntitlementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entitlement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateEntitlementResponse parses an HTTP response from a CreateEntitlementWithResponse call
func ParseCreateEntitlementResponse(rsp *http.Response) (*CreateEntitlementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Entitlement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseListEntitlementGrantsResponse parses an HTTP response from a ListEntitlementGrantsWithResponse call
func ParseListEntitlementGrantsResponse(rsp *http.Response) (*ListEntitlementGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEntitlementGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EntitlementGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCreateGrantResponse parses an HTTP response from a CreateGrantWithResponse call
func ParseCreateGrantResponse(rsp *http.Response) (*CreateGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EntitlementGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseOverrideEntitlementResponse parses an HTTP response from a OverrideEntitlementWithResponse call
func ParseOverrideEntitlementResponse(rsp *http.Response) (*OverrideEntitlementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OverrideEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Entitlement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEntitlementValueResponse parses an HTTP response from a GetEntitlementValueWithResponse call
func ParseGetEntitlementValueResponse(rsp *http.Response) (*GetEntitlementValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntitlementValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntitlementValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteEntitlementResponse parses an HTTP response from a DeleteEntitlementWithResponse call
func ParseDeleteEntitlementResponse(rsp *http.Response) (*DeleteEntitlementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEntitlementResponse parses an HTTP response from a GetEntitlementWithResponse call
func ParseGetEntitlementResponse(rsp *http.Response) (*GetEntitlementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntitlementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entitlement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetEntitlementHistoryResponse parses an HTTP response from a GetEntitlementHistoryWithResponse call
func ParseGetEntitlementHistoryResponse(rsp *http.Response) (*GetEntitlementHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntitlementHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WindowedBalanceHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseResetEntitlementUsageResponse parses an HTTP response from a ResetEntitlementUsageWithResponse call
func ParseResetEntitlementUsageResponse(rsp *http.Response) (*ResetEntitlementUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetEntitlementUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseSubscriptionsCreateResponse parses an HTTP response from a SubscriptionsCreateWithResponse call
func ParseSubscriptionsCreateResponse(rsp *http.Response) (*SubscriptionsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscriptionsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseGetSubscriptionGetSubscriptionResponse parses an HTTP response from a GetSubscriptionGetSubscriptionWithResponse call
func ParseGetSubscriptionGetSubscriptionResponse(rsp *http.Response) (*GetSubscriptionGetSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscriptionGetSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseEditSubscriptionResponse parses an HTTP response from a EditSubscriptionWithResponse call
func ParseEditSubscriptionResponse(rsp *http.Response) (*EditSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseCancelSubscriptionResponse parses an HTTP response from a CancelSubscriptionWithResponse call
func ParseCancelSubscriptionResponse(rsp *http.Response) (*CancelSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseMigrateSubscriptionResponse parses an HTTP response from a MigrateSubscriptionWithResponse call
func ParseMigrateSubscriptionResponse(rsp *http.Response) (*MigrateSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrateSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// ParseUnscheduleCancelationResponse parses an HTTP response from a UnscheduleCancelationWithResponse call
func ParseUnscheduleCancelationResponse(rsp *http.Response) (*UnscheduleCancelationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnscheduleCancelationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequestProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UnauthorizedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ForbiddenProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerErrorProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ServiceUnavailableProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON503 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest UnexpectedProblemResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9i3IbN7Yo+iso3jkVezZFS3LiiXVraoqW7FgT29LoEU8m9FWgbpDEdhPoAGhJTK6r",
	"zofc83P7S25h4dHobjTZ1MOWHJ6asyOzu4EFYGG9H3/0Ej7LOSNMyd7OH70cCzwjigj41wuaZZRN9tkF",
	"pwl5Q6U61M/lgFzlmKX6FXKVZzwlvZ0xziTp9yjr7fR+K4iY9/o9hmekt9Ozb/d7MpmSGdafUUVmMMVf",
	"BBn3dnr/15MSjifmNfmkOv1LM8qnfk9Rlelx30+xQjkWSiI+RmpKUEalQrxQeaGQ4shMjCiDB5RNZK/f",
	"U/Ncf4yFwPPep0/99lVSKQuSDseKiK5LDT8J10uu8CwHoLc3t59ubG5tbG6dbG7twP8Gm5tb/+n1e2Mu",
	"Zlj1dnopVmRD0RnplYt9RTNFBDqfI2oARYkgWFHOkHvTLEwqQdmky8pekDEXZLWl2W/u8dqkwqqQRHZd",
	"l3//hvh5DOOE+FkuS+OmW5qZL4aIu4VUfEbEwQURgqbkQKREvJjDfyibDLj+QwOVEpkImusN6u30TqYE",
	"wSOUUkES/eug1++0djNiuPBF6z3mQgEw3aF9MV8E7/kcjSnJ0pXAfTHvDLA9oBZIYRUvGZzWjDB1v7d7",
	"GaBfdqeb0AHQrwhWhbjniLwIyC+7q1XIANgfBL7vmNoO4pfdzRAuANQS7vu9m4uAvBfUtQogwPyGzqg6",
	"GI8lUYNM/90E810xOydCy23AarW0JogqBBuM2IjtkTEuMoWoRFubm10XYKYKwU/NOL2drc3Nfm+Gr+is",
	"mMG/9D8ps//0vJgyRSZ248NFcPhPp1XIjzSvr6HzCuw80SWEEG9GIX6LxUei8gwnZJjTH8l8n0mFs+yI",
	"/FYQqQbmkxjC6CdOhsZ5rtdBzbcacoA0x2paAgpD9XuC/FZQQdLejhIF6Yo4wzw/0d/XYD4YFmq6bWHW",
	"f3NBfyf3GnitKf1LH+FgDLLeD4IXeexWHlMtIiPzFhpzgSb6VXQ+l+iSqikiVzhRaIZVMvVQ15CjOkUI",
	"L05TqifC2aHgORGKGvG3JjV7pOHn/00SpX+Qag6iakpIfuB/Ddcl+CyyHIWFQl6U1xrW0atd9PTp0+fI",
	"SPpwBfZZkhWSXpDWJenRb0mXaGgIwSombeeyP0aMKyRzktAxJSnCSFI2yQjCk4kgE6wIuqRZhs6JpU8k",
	"heMjOJkiWcCWIa1kwj5cUpbyy8GI/Wof/aqvP0aCSCIuSOpPHV3grGjdlknkjL1G0naopR4RLNyC0Vy4",
	"0U0om2hgZkWmqMZP+7psA8wNd3PAFG/C9JKlt4BTin8OjDInfUx/J8uRql9iVSHxZCluaUJGmKKCqLkj",
	"bCWG5kRQ3oKEgDhtGxOA3JXYvS8/ia7/hM7IfzhrIcyA4/oC6AVoINxi4Hx/54wgLFFKxlSvnDJ4tj98",
	"N0R6XKQHRntY4XMsCXo0VSrfefLk8vJyQDHDAy4mT/RAG3og+XgwYs191wOenuzChDCf2+9CknTxPvml",
	"RZlx7/RkN4oi77iiY5qA8WJ3ihkj2f2WL7sC/GVlzXYoG4t4eXHvdflu4N6fHQ9hbCzgqMjIw9nuVmjv",
	"z24HIAL4Ri52ArG5AjwloM6+FIILZ5TXf0e4qv4ZJTwlgxE7sjKvETqB0cBjQWTOmSRd12fm6rq6pSvw",
	"EvVKaz2rLLS+7oPciMRoWsww2xAEp/g8I0iRK4VywS9oqsWfUnZGlBk5gHLWHzHNIrQugaWkUsFeJRkl",
	"TKGUXJBMy9maZxUsJUIqzGC0ckfVFCvEk6QQgqQrbWtlWeEWN7nNattVCLpgmwpBEU213DGew8bUN+6S",
	"nKNciy8ad0Ys2C2Ez3mhysX3kds8s88k2L0RK7cPkDB+APUhV9pAvdDrb9xxkSRESrt1CUxZ37XKl3C5",
	"0OWUJtMQTUDWyLBW+MhVMsVsQkBqwwxhmAEp/pGw6K2UBoaV7yVAe1tLlwqryNo9tNRIcyNwoZBRD3nv",
	"IbrEEuVa62HKCXZ2V3Bl54TV7kdM01qjBBuxUZCEUK0yaR0xGGBHKwGnjP5WkD4SmKV8ls3RhDAisNIy",
	"H88xPNPyMONsY1IQKQGBzSaYm0klkoCNl1PCkNT6LCA9AwD1LUgqEMJwFzijWkNIEXyVC653y937Vc/K",
	"bO/iwzrEE8r0jEbq1tcvzqbgYjIwR3WdHwaLW8ui5qUILHH9R8PDapYxiwT6o1Xga2grVYteO5RatIjv",
	"1nVsFzfeziW2xhrQ8W2tGxs1BYX9vL7FtMMWr2Y0PZxiSeT9FgcXwPhlhcAKYAbUDLN7vpltEH7hrSzB",
	"MmAKPqb3XU9ZBOS9cPVUAQSYYWDnYH9DZcTUCJQ0JSglGdG8M7Fvy67QUjPAnvk+Tqvs55YknXOeEcx6",
	"nzSIdhH69WGaCiJlRJ6zD/q9vGJBT6iaR22bCS+YEvNlG7drXtMClv4qo4xsRcfTT7ajT/IpZ8TQ/vhz",
	"LhXOdq2Y2njshbimcNHwBgwZ4wrYkFzgVvjUr3NUojRX+kjmG0Z2yzEVEs0wwxOSuvgXOZeKzAZoF+tZ",
	"0DlBM54ak+b5XCsMVnCx5to/euRKEcFwtp/2dnqbW8+3vt1Okg28ufVs42/Pn+GN77e2nm5s4effbo9J",
	"km4/S6MejmGew1rY/GDc2/llyX1UguZEf/Kpv+RNzNJzfgWvfqhvyDDPByN2wAji4x0QO8HhlFL90kxz",
	"eqOoz3Ce68PY+aMnzXgdpuv37IAd1uCwef4u8Hx9MrvyAsuYYnMuldBSOBhdZzwlGSgt1qNGUoTzXILI",
	"cUSchK+l5jwP3lEcjpyLCWZW1AcRn0rwh2gFSBWg8GnNOSF9o/lQJRG/1PoUG9NJIawmyFKUCAKqKc6A",
	"atQuqSBaLB1GaM8JnRGp8CzXCApCu5XUeSESAmqK/bqCfL3tze1vV/EVaCX5gGVz50t0IWC7Lo7tJOpT",
	"0IgDRO2asOdEzLA+/mzuyOvdrANo7+J1dDHFBD87X4BbzwC9NZIm2trc/hYlU6zR0HKJGb56Q9hETbUY",
	"uv1tCFdoKmlARdMIhqMCtEdn7KDWIVsBprKJm1s/PPvuP3/77rvhq/fDH1+/3Np+9/Pm7r+ev3qtUREr",
	"TaZ6O73/55fNjb99+GVz4/lw4/U/f3z77nDj5KeN/+CN6X9/nLF8Q11s/P7hj+3vPv1lwUbv78XWYcNX",
	"gZBlWQdCFrjV39hvm2RKyw+z8kUXJGsUZAWXNbz1+upqqpAiIw5Vl/Cp35sRhVOs8Apgui8iNLQ0C7lx",
	"o8fkNq4cyskN9YN/XTVngUOqMSJ6QdQlIQxtAd3Z/u5ZOypuf/cMFCKPmgFeUplneA6TxA7UBoF23qhh",
	"nrv40sZOmQdhBETCGSvF1sY5FXl6A3qZYamQHeJuiM0bPcMpzNBCbz6F0Ru/6GtuD70fMINwoeUV8nv/",
	"IS4s7OIcn9PMyn0Nvo4S/xyYoH+dEok4y+aIXFEJRi/DxZAEXjhHKWffKKSFGpbCrh65XQUuWxN+6kes",
	"eTrK8Xym0QIlPMtIorllobztWZALwgpjnkX2CydrfwN+VrAQ2EH0rZpyOMGPZG73Nidndugz+1ophe+a",
	"B+jQAlGeiv3EP/hUZ9ALmYOmQuWmhixiELs5AGx9jB/JvHo1n31bv5khncYbv29uPP/wX4/+sXPm//H4",
	"r3+JzRenJTWg9UtRaF3UUudbXqKf8YlEiXYws55g0LgQNsLpI5mXFyMcZinun0Sjrar4b+fu9wgrZnpW",
	"QXIu1Kk0hjDzL3AdalxJcJYUGVbkBF+B4x2iBp3mCG/U0OhDZD+HeR5XMofGAsrHmlgVmYqIiT5Qpbmh",
	"URtlpxwAK2fP8NW+ed2YyaqhL/1eZ8Nt3abW793IzrqC9a7fUxwUyYKplkA7/bw+YwzoGjZay2hgbAxm",
	"cvvcgpJHZEwEYUkLNgr32NBi5mI7EJYIIznlQpXvgDfPqiqGWY6LLIN/mzm1hKN1U0ZIaphbDYMi4uTp",
	"m/099OiU0QsiJM6yOTLOCfSGXNGETwTOpzSBB8dcKBA99r3k+fjuJc2lrLNl54+9iNLc9lIuNMy0SgVw",
	"qslOwZyrh6RtdzlOZk6qAZ3h4F6Xdvpyy8AZJekelYlD5s70N/zwkIiEMKWxNyKfotS+hjhDeYbZADmN",
	"P/cfIi4Qnum3gntS2eaWCRubUj5rTtxAVAzjyhMev8hCS1YJFql0sn4wqP0WKT4YsfdaBIwEVUXeRjjL",
	"gpErFLS+dR/J3ARGWlWs5plz3mPnjjYRlF7kvxM+74TPoV3QCe9FyPiCAwJiHhz8uLJRdWJcC+a2kwcI",
	"4Cc39DYUJhaHQIczumsTwP2hnO3ESAmLCYQVJWojdEZkI8Zr3rhG6TVK11C6LieshGNVzLohgQ8GuyNS",
	"/wKnNpXhUPDzjMyObLhAd+hPGbnKSaJIWh8iriZAzLlAiTG4c2EiUvTfNnLBKvcmwCEtQECSXCuGIerC",
	"EiEUQ3EtX2EXymECnR6RwWTQRzOcaSWfpH5AOWcKX/URZRA34X+fEQlR0GOBZ5RN+hqylCQkV/SiBEfw",
	"Quvrj1s2M8MsIa+pVFzMTZRyHH3PzZtoal51EfoN8mLfGyoID4iPRcokRz+uJTUQQOIuiInQrkh2cD1K",
	"IwgvzrOoBaRO8s1QS72d5q1P/R7Ely+S3k0AugV0bPILvdJwW3A377UGz0HXr2927LK71F2w5ryhjByB",
	"WheLRjJ3AEx5Jm0cgtdyYqwiyRQLo35UzjujrKYVdk910+CE9BVUcmN2QnpcoxjFMrzDXTEQdFq7tJSj",
	"ufrmOy7e3t2jyrbMMCtwFgA5uPWNMRAZSlrdIphVcbtVt7E9KVXvuCIHgk4ow5mF4kiD25Wm2sF+IIwI",
	"muzxpNDXWw+haWpN/TPFHSLH8MvRq92nT58+/wBZCnLnyRPFeSYHlKgxJCpM1Sx7IsaJfumxDTPS6FKG",
	"IVl5gTJ0erLbsKteq6zCvoZ3CAqwsRb63Atg43atYNQ1S4uasJh3Pa+0o/YwrOP6UyB2PjomguLsMSoD",
	"mgzCWjU99aANQqnXybIJnPsZ4yk54/bkz6w5KaoOFiLT3/utMtGh3thM2Ufnr7T22HL6jsKxnmERptbq",
	"D0SusX3DyaQJuuTi4zjjl4jbjyJX9bwSldHC/8w7muPrl4xbx40JAquUPKEmqJGqqYl9Gzsp4YKmXj62",
	"9uP6iFSiZMolYYiOEb7ANMPnGfnsdo3+2g18D9zAD9+11O+5q7didZH39jN/y+vEos0z5edbgYQctMWE",
	"Hbh4MA6/SMP/KxFXlo7SuFVu2ap2/qhHXxizvfXtrMQj3OC7fohjokydppBhgHzlX0HSvmOdt1R6Yrmm",
	"AveDCnwtYRdGqlgp8KKG2ftuhFbE9nMswWv/ngto62rwWDAjznNjmIrO6DzA1127deS1rtw5ohev2751",
	"41W72RavWeGrG8+k8NWSWb66AIw21gaBGXZPayhcOdkOnK/OiIyeee/Z0X0iIffhQn9qP+lQ+V4VxIXG",
	"gBDOYJLQLG8uIRg36+5iiOfRm+sV5kdW22yxTTZWc3JTDdYNWZC9KM4bs3P3TXtXzIigSWVjXvNLNCuS",
	"KTi/pTX15pj6+G19q0Ehh5RWlsy7z7drvzBh8MGk+2OU0jHstyoT/XIM/3b7/Y0JO0RuXgAiLcjDMcS8",
	"d3Tc3RAqUVrEI4YYV7Z4j/34QE2JQClRmGZwLgp/1HdeY2divBJOjkoLd0yRga2novup1dzfTYeOL+cB",
	"lmVwF8gpL7K0BXVqTMMcYd9hb3hJDaKjhDOFKTMR4/DWolkm9IKw+vob9/JVhtUrYmy4DfRpvoOEi3KX",
	"CJeG0zKJlGc+3N2pWSb4ZJxhhcbEpOdB6LsNMglHZGY0nKYkRRcUI1mce4Bioe5gzV7ZPguGWWMID4yy",
	"5hdpHZ52GVTCKgcRV+FDVq1ukWgB/7cPzRWwe7aO57/reH7nh73WBfDxQJ8qcdpmwM6X4GuIAfPhl9e1",
	"6pdReXFZ1NqZgbadk4xrYVDxQTDzw2HeJ6XTxKKFWVfJhOyS4u4TulKAwhFWZBeL1HKgquhqRQBTGePS",
	"MqBzAoI/z1LY3nUORuccjNK3vtIVcM72qkhEeVoWoXcoEkQSjaHIjgnQFyThEwY7i3JR5FwSOahmhXQk",
	"aUHNcXzlNOMV0kpO8NUuZCnAcliRge+mzixO8FXphrIuKiNyKXxVS9bzKl+NfpZymMJXqwswJya+OiTd",
	"bzEwUhjORaZYGq6xBjQ7G9jgiZIWVGWMqsOT6ylQbSz2BKRiWcxCvOgjk8wM+mTJe1hq4xRk1OWpRcmz",
	"MWlxb35txqQliTxgU/JF9L1c586wX4ablKym7zy1QI0/dNIOgkCGtZ6wmp7w2WTttYwal1HX0t1aultL",
	"d/dMuntAIlp3+aOFd5dc+Va58YEwgsSaI6858tpqtLYareWKtVyxliv+PHIF6P63JFxEQv6bLGtGgVRA",
	"cT25M2Jmwh2k98U2YqAsKP0LwQMiCGFHU5xCFMF4bCQIWzv3fA6ZVrCNgkzojBgzkCEqcjBiYLiRO+iY",
	"4Ayqu+A8F/wCZ8ZRzsEtbCpsSVOzzYg2M428xGdrZVQqkg5GjFypHTRSL68UYdKHhgbVlxOuz9iPcU48",
	"tE1ppsbofaZhOVpaoTthwkGU4AmCZXUsuPTIX/qK0KC3fG6QrQzXoBJNiYA8vDCGwbV6uGFtjpawjk+1",
	"fFqfJOnOv0xraCnTsUpwSiwaRR9imTeQ2zw0qr6R4D/Xi1jkD7fXwMb2nBBh01sX1KpLC3JmpPDFJK8c",
	"0kWutFWka6KXRp4QG07IlbI45bbYZh24mAqlQe8WUrHXFEATzgzqmmthB709vAk2ox1v9AqqpuzlOAMn",
	"ZpuoSGPkvSTIJIpWdRvF9bIg3XKKL0zsRN/zUYcrdQRehDv7pTz49VTku0VdyT0wlDbLGo4ImM4czzUw",
	"Sqh5Zbo3ZIIzk6U6t/XTXW3yCeep1CcvibigiZUc1sEK91LttNdqseZpMIpfYpbUDQH6MusjUF7JiKmk",
	"DyqCbq+w6hT3hXvGNMsMAxyHTr7BV52Q0JqBehKmdjoyE2R2mhrxLimaM5e1HlQOrCjhCWZoRvT/cb3h",
	"oCiAloE3UCrwWPXRBGsZlLLJDopPb5ttGRB87Uh4x+c3umDhgR7YvNk2XCVP9VZV9LZJomWabytt/A00",
	"qx/7qWHs0saozwkavLnjgfpeMatl7HbfH43+ttKHo80QXA0Xk9s8raoMH8ncy9BBVLdGbzu8tfCWZdQY",
	"9BJREuU8h2p1KcJjRUQFR7RKd04IC+/WYUawJEiLmmUBGjsqlehRWr97RS6VIHjmL8BjRCjodJYs2Q0e",
	"scspz6q1lDXxr77lcQHEO2qvLXpk6mU99pHCkqgil40p7OPwDFuytJ0J8AbpBHbvrURcjQcPGgCBkkdY",
	"H035penmoji6nNoYcd9NvxIKPLhdC82JL4pRmTPhF1o0QPvjGlpIxHhQXKFvtDCoNURMMnuuxbLU6lGr",
	"0JBKZYISwh/JvNI1SZAJFqlJzyYXlBfSgWfMCzlXpow2yGxWQ5dmZ+emTuml1qETLgRUmonRllWL11bP",
	"PahjG+5zlBeZqKgChJvbkJBtehZQBysnw+jzxXKyEdevu+AT83UIx3Exm2EB/hOtFjRjlMI4IRPh9MgX",
	"0EwfV4KEVgDE6tq3GDGkSd8rTY3g39JSNju8MZtVLRlKq6UJZ+OM2j6z19cXVknqvuA0XVFyMp+4ggjx",
	"p33DTsxCnbwjiXIsetHAdyvElJMsTHC/DkK7fLBKIlhzU72IVysxUbngsLvgksDZJZ5D1U6GcznlXrBv",
	"iIqu6JJTCDxdtqr9QMuPI+axjzsNUMt2YfYIucozmlCtwNpyOQ5EcpVrcslLb2644RGIGkuksuSVsXLV",
	"beFt1nrtiV5gIWhGu8lqOWvPRc1+1NzV9lcbE2nbcSy37tg4OJYXqmnoGcqD8YIrhaWhI8487mEojTyt",
	"9UbMWpUZyNKQG96Z+kWwnWkOjWT2xsn2sSJ4RnYrebvpMm8a21SjTPuIVpcDKpMm8+HXWkQEK5z96gwr",
	"NCo2N58mCMuDcak7mTlSN4ap32VUqWC8+uuoyE3vyoNxHzFyab7baP1OKmjVEgj1asTs/XMFX5J5kpH2",
	"EogPz53dqD+15CaEBWVvPwFzaBPcOBhz5iHD1xhl0/dcV0UjA5zjVeoHxmZ9obWWgFAo37e7LKMM2Zdg",
	"FbcwOMjAXE6ZVASnNcntG+lCn0GtHdxRBqLfLctvAVTQgAIoBnEHk3UplEbBiiBc1nzU3NTa15bGLkdy",
	"Gd0wVWrsbXetpjvv4KHMKI+VHFnKUnpBU1fNTXYg5C+Bp8X6cwWPaxp1joVqGoi444+W8mVgyShUXlSq",
	"zv615wwmoeITyB/lnwOc55GK7/3e1YYebeMCC4Zn+rL9onGn+8BDGLexFy79s1tbqEjq6LL+UPaTt1Bw",
	"z3/0YXETKO8P7w5Hv2dq+nX4rAZLqyvOYe4po+pQ2M26VjSdt/gFDspHBaPqMcqFU+8WlhC8wRFVChGu",
	"fljh57d+bMHg1z3Aap3F+32UYdjmzY7Tj3T9Iy2HuKNj9RPc7GiDpd7L4y1bEkbZyTtv+8QLHC1eZvYN",
	"nG02/4hVyhR5Q60ZihEpkeGK0kCdGX1xjBPFhfFS4Dx3ChqsRYOQE2H6PXgDqv7FbcNj/Zl3eMD3CWFY",
	"UC7Ro/B36eA1fi5rYCu7d+MZ0YLamF49roi1++9+2iitHBubW8vD0lpqgdhdbq0DV31e4+rcthatFIkr",
	"3RAQYBIycu9ocGFYzg0VJmJF9dkPS1dwWFqRqzK1cqEoq0VXSCPJO1HRBof4ShJVo+eUXy60Ji+VqSrt",
	"Sb6GZiGBlWN/r4tr9dbLw1a72lSNwfHmJfbDo1rhnibUbafY1uqk8tiHYcma77Q6lbsz3jkKTt4LSi79",
	"xSlrX525Lvclr3BRfmd+of2e7TtPOTsbY5qRtMO9OvE265qqml5gltxQazS5rbYkC86g5YupxUIZsjOY",
	"6BaTunCjyY6NHomzrNSJMnJBMpczGwZb3NVUZTCHCZ24pWJLpg9qNm9WXWL8cmC9bCYw99bOK5jE+Dax",
	"94CApwEMn4XK8Nyo7YIXLF2pglkMhCM7SgBFRXMPzJOJVuLLwkLgtzK7YD+WtpnebwVVBM2wSqbWUzS7",
	"tfMPQvaLmUuxv8VTMKnrbdvgAruthTK92cT7YyPFSW+yhMYMyvbjDWo44avShOi6Anj57wZJ8m0brPcW",
	"zSgrZMXmIvsoz+xv9pKbFsEQS4yvSnDeUzU9uenB/CCMexmOx1yJLLO3AYy04O1vDcnUaFemn1fAKu9v",
	"HQ9kKZMAOwGPIDSRNNtTsbHVxOUOLK1ecw66RGJhPQ+m/JwiHfhIw9nT5Ch5vrpv1BYtH+a5PBDtiUEg",
	"a4Pm4izVzpXIRTIlUkF3nqrd0duUgCSA47I66f5ek9XH33O3o17znIcx/94bdImDBrlOYQnKpDvHljKq",
	"Vt1t1be4Z0amCmKwzgnCmSIC7qO3A2Zzb5334ytJsvHnlRCvsS3xPkUz8js3Bjk/vP2taVYGN69JyLhd",
	"72bUrRl1+zklAnDxfF7x9kXIQxwFK+ZKvwULElaCVNBbdUBUL8IrekXSoBnWql6JukMDpECeVg73CGzx",
	"kHByJ6UKW9uM0TEaw/rsshhXoWm/6l+4Na/B4Bpug/Kw644DK3RD3rEVGkxlGc3DHJV0ToVzMuaCGFa2",
	"iGtUMl3X2PVnwK42x5SBPSVpkUDqm/M43Q6Slaq2k0xAue35ZIRevyfzjDbAdQp31ZJVjRqrJR42RJqq",
	"B6SthkDlretXETD6fDa3V3VMyLqc57qc5zpDZl2YYV2Y4eEWZlhXSnjAlRLAlHUzUxG4WcOUnHopjd8K",
	"DIHlN5vmX3aURTOtq4Wuq4XGqmoEQQfreqE3rBdqKEZwqxfYZ9rCc/70esa6+Ni6HOhaOlxLh2vp8DNK",
	"hw+3KthC+eVG9UZvyM2XVh9dc/Q1R19brdZWq7VcspZL1nLJWi5ZqV7pKsKJqWwRie1NBZFyBbFgaL4A",
	"GmGMZrJyW47IpMiwQDmXEHNghofNu4Rim2HxkZIYSchbHENUa7yGyIOOji8j43N9EPG4eEvpqsX5gLTB",
	"pbeyIQ7FlrDGTzxSCl/tr06bTvRXptxJg1Wan7+RKAP49vcgbiLoXY2vUF4IQ43QyZTMoTgsREWaErQm",
	"Vl/20Xmh0CX5RhBTRokyRYQpqQCGVS4hs5hGxq2lbAgoXxgIzzkR0lQ9Oi8kheQfA/eiaAMYp61L9AO6",
	"KWtE+uKI1Khju+rGxYrs6g2sVb11FRlXKgxVltadUdbEy+W9h0tMu0HrYVcMbEG9XMdHffngriVwlzFb",
	"y0DN9n1oJH8FB+fr5IJMAHMF1X5r+Y/LOgkHw+8zqfA1SqF1w4v6BlI7263uX3zf7MKW7xskMuVhPcOO",
	"W3fShh392Drth7Xvq+CttBUxkOTKecoRVOiYoBwrkh0/Crn4EMIM3UOvw1QRicTKP9xPhfcl85qTEZqj",
	"ZycVFg9Ghz9Wtjb7wkXVg8dhhX04uqZuWWFuALfAbLL46pkA9Oam2QfVMWsR/g0z5B3nfmQ0sRkwlVD7",
	"OlQPPJgxJWNcZCrkvPvSrBSCfs1jt9p/lEOcc54RzNaBindt8v1a6kev7YCd7YC3XHUU1gKRO5wpnKiK",
	"OujW6OaMUrmAMC8J43l/nbqdvorlrJCqVsUy+NRaoTuU8nx67VKe4Uy1230nCV+Nw3I736zz6K2GnvXE",
	"ajsuiUgKajsGKWDASktm8GEpCx/muWeespWfay5bVkaoVXrzVbElekTTPsjOj92pQ+6l47vLRQFfr6X7",
	"OYQraHHi2PovgR1B777ftuuUoV44q1NpFs+5Uir4wvkUvlo4V11Vg5zicqvL5XfCl8VoUseOqAB2V4jw",
	"Wc//Mx37lz7tULpeWaUNkKarLhujS58+NEAzRlk9sq8qG8XJ2nt19KTwo95Fk0GtMaWOnN+AT13eBo7W",
	"mMYwz/fTA9Fs5nSXqLsCDHeA0SvM/hkRvVafeAEmXRuLWtXe7peijvO3pvbdR3VprWZ8JjXDurfuXNm4",
	"VyK23cq4FO0ulZWnu5KP9tC+a5nF1ld7fbXXFoS1BeEG5G25waC7paCt8nflsffzQo9whzKm0E5Z8juo",
	"cGgF6792LdttXsdZ1muqBK11TKvPu9QxtZDLsH5piyGmZBaw6QuKYZ3gqxdkii+oqRJcemKTrJD0ggDq",
	"ur8Xj+MiloxivWuLlwQk5+l2neKEtuHhxn/wxu+bG88//NejX0ajwWi0MRo9QWcf/hE+evzXv/Q6QBEL",
	"InPlVK4XGVJZV3gr3ulLm9HfSWqD8VIot3rJXEM0LuiEalZALWhBC9owrMNBjqTigjiGalDXt9dW3Jnl",
	"59A12XxRjxeBapWlwx8iGsTCWBCXWdrYtfMAO1bdOY9ZlZp90gcuQhilRzXEBfK45qgb9D0wpVtM3U0T",
	"LHnN+MowntJ2MRHV8Mm76OdQ8W/nZVkdzUZ8SgSHeBQiZpSFxWkEVmTEPpJGCSGoD+frB6EhYjTzdYXo",
	"zEbimoZ9WjoD1Jyd8xGjEv31r+SKzHL117/amWzlQVmIWylsymfEIh0lHnmhCE8pGPm5Fq9sYf+SnzhN",
	"bdD8MIkLlPaxftO8EpS7hSrJHE0xSzNTbM80lwoayTQTVLCfaKXrEID6hjIHbr126hJo+k7C3nGdewJ0",
	"xascWwvG+vqt9vqZ0pHV7kDnDrB/oEdkMBmgrc3N/wU9VaUp8OiSboR78XFDFghA7rsd/dDpnFvsIUem",
	"zZWGT88Z1C6+gwMMDq/ZUskM74PKLBOIIlYlKGDZZyZmnoch5o2CXUEwfhku7kRoM0PYl8oJHbYx1a/m",
	"jV8bdbAUr7V5GoTdklZHfhcnb8ps10Lea7F7ZSmx5labZ7BAvVGu12EYpxXs8OK3lxcbS6zqaCEKz6Ib",
	"6gb3PowLozIx9UvdlfZ/nTFypc5Me6rgkkaHXErWaIh+tZIQi+LH2s6ucSItL7YCFggobXCZqA57WoO7",
	"vcnLL6OH0jVM3n/olfDLfd/fg9qz7nCXXQa7+i60+32gg9aUcadDRk1QgUJYl+OzjFzv5N2Mu36I1pqo",
	"5SwRFTf0NDzsAK2vI7jqq2mDf2Pv3b4boRWxSx/eYry+qQ/PRvi2wuH8eIuh+OqK+iyo5tOBiIauySbG",
	"lw9die1ml3gM9d5RWoB9yZXohoQUW9qbSve17duOGRrmuYnEN/cHmJzpEILzfJH00KS4w4xOmMOs6gIi",
	"LwWGMX/EkaalZd6RpduQU6P4iMWbmMjivJw4QMwSAoQ9nKus7i1RU54uWpp5I1hXe6+eci2PcKH4DCua",
	"oAtpjQaPQ0Mg6Fxn/i0tX/T6PUlYeuYE3PgyZwbgVda4oGJ+eLY35Mwlnhg9yzqeqkfXj9r3udu5NnQx",
	"mT6s0pQCsrEuTPmzcrbDk63XvZia5143HnYLtVUpuswYEqPDrb2Q7uwfH3z/DFpoNUmJz35yslMop1RR",
	"aukuaMgrevIy6tNkLq0yXaRVcwXHQ6LfQebTiD0sG/z48zHEuIEDQLb0hof3AUGTogoYpi8BGFoFHiub",
	"fDDVsg2WspJXEzowy3dryALnGOuyDOPWml1YW8pHkiut9sCoru6zftXccmR6LMnrYYxJHtOrrEH6t4WQ",
	"hv0aau2tbYrd7SBvHR064GBdrGjFwNqLdUyMih8raR8lqb8hpbMDVclclKJHN7G+kg6b2E7B75lytRaI",
	"G+FljbPdnZLkIy/UMZGScrYLJZdOyJWCe39cnM+oOsQCx3qbHytBc4JqQwxM2aYzRa5UkxSXozbRZ0ak",
	"tHboyPWvQy6nFJqSuhT0mw53K0BBAuLB+JiICzAQJSRXONoIcZVxOxzc6f5bHrOrtZxRQc9mHEw1Tggk",
	"s3OSptBpYMqlaummt5tRwtQwzyFt74jInDNJYhZ186T0RSXwJagPjw5youkWdFhNPhKWQnQ9JPXBuwfD",
	"Qk23kWlXVEehQmRxg+7p0ZvoMLhQUy5s3r9xsU4EZsqPv1jn0vPFlKtdG6FxKPh5RmbhXnS74aeMXOUg",
	"odeHiPsGhPVSJCDhM66MlG8ao6eat4LU4kNHys6rptaKkQ+8c1RpFqGqEUXNNYLvdzeKWr/sHx+gp1vP",
	"nm1slSmll5eXAyo55JNSyTfguXUhb+i9l4OpmmWPEc7yKd7Ydu5l05hkZAkQUpd8IyNKgYe1fMH4hXAm",
	"OcT0cKFsIG3C2QVhlLC6dHx6XItcqkQRbDeiCD78sR0vy2Ui4sx1qt0m6z6K6G3wDbJ3MLFfIWk+cwc6",
	"iAXSxqzD1vFifc/W7+Ki5uwk+n5Rm5dAtY49/wIlzFzhvu7h9bv2i/10aVi9ezXWdcbsjL4DrnSgMU0X",
	"EmwX5Mp08UUlAfJNfEfMRMnUBzCXARQic5oYMXJZfgd+NRNos0Lhv6XIdGCHbC7SPrFKhgbMHj2YOHy4",
	"tmkSWMU4WyAdZi03vI1nBHs48F4/h3zhFsJipN2Y+sdcjFghbfxCc9+/kXUMDqddbhBzyFAeQpRWd97v",
	"Ve+wm7Uh6Wuun50evYkw+H7PMEOfD2Ja7y1s59K9jKS7flqIW/pld+mvHuXqYzEOI1U5GnVOgrOwkqrR",
	"W07mea3aUNsAgU9XFYK17awskoRI2fa4oE5MWmFbrGwVF8MWYZa00c6LMMp9hI49VzBSwGAxTtXGhEda",
	"BBosIsix234SvZf29n1mxjFbKcouuutvXYhddZX65xEbZpd4LtGvkqgi/xUkB9dRuIJWdWFWP2rdXEsK",
	"2va2QTKidE0Po4p8nynCVOeh4BuwJjLVOu5Seq+H7kR869erxjbMs9Z9igruTmh3duwmy+rKAvZNR4Pa",
	"YsPjqe+xAcliXZRthIQ1sm2CECelamH42+2tv7VLwvrphiPpFVHYV/qtycDh+JV3riMG71Xl4KcVOfhp",
	"RA5+2iIHB7Jd3WdaE5oqIPwR+roXedDIlYbDmNKbuKuP++yq8v+cD3cxiTKZEb3h7tuXaJ8lg4oHbSFA",
	"hdbTh0oJel4425YsYIU/kjlEcc/mZ/aXs49k3vvw6VOddlvTYGCs6Jgv6wrsRVVCZ3C0lfWcahcItadh",
	"pTnM0tJgFUY4WWMTCsr5/cn74NXYa6UWd3yD7Vn0F++0G2ldneauc7JCOtIVCcypvrRfvsVgYIzgg3sD",
	"zcwrZZxkqRcGVbvc23ZAuS6e8+csoi3oDIv5yxmmLSZM+wYi+pVWqt6rlLCGD8yYS7qIN0lM2Es8Nrx7",
	"p/dVdsyKs/bVaMVpfYSI6mFuPRhn7YtEoze0rwcI6g0vghOA8VFlgmvU1mmsMy7txslf43i7Ub+q/HNt",
	"LWTEwv3zWnNN0hyBHcclORXSD4Wli1JIbM4n5O0MKhUIK0PGnc9tmxVbyRKTUU3HqpXg+Ap6WDQRdBG6",
	"vaEx0/kQ5Rrx+ViTjSJTkVwabzKKxNfYsBnrrDe1HzvlHJTW5UpF683NzaYlKrf+uwgd17Cbys2BAqv1",
	"9IkZWr9wTH9v+dx8CVVjYwuZGWHJgTWjzP4zNhMk4ey6TvXNuUySTm3GGND1JByTfuMXUpnJbfaic3ch",
	"/od4QpmmVO3eRP+KN45dGxmcK2wlpLDqUR3ymHWyHScWguHv59bq2NJx4ACDV0CPboN/Fxu8Xs0mRI8m",
	"9ixHmNMIs74ppx2M2AELGE6CmSm+PisyRfOMIKvXy/6InRcKaYHJ/gQvQy1200cHciDYQiYYWg1iu+0m",
	"M7mXYORx62h0xapgb1MsD6vxR0ugHwfA1PG4Xm43eDV2Qi8ZDOoDXDq5/IKP3pojWur6Cz45VljRZJUv",
	"XrgYvKY2V76EFJnlmXFniTIC2uTgwvaT8mWQzDHKM8wGI/aKYFUI+yGfUSid7MMfSGSOvpZO1JTM4RMz",
	"h++3C4msCRYgHadUwzvTRNAkU89K2czFFnbfAVDaYMO7H41pFkuTVY7GYf/8nbG9Ad58quLLCyzJid2P",
	"iEl5ivXVteUWrKIS28qIePDwDVgKKN7hiq2Xgp5LEQ+CpeCGGLpy21+RLWpsbmGbgmEf26owhoxT6VDK",
	"KQ91iXl49J+n7/Ze/nhy/NO3R0evXv3r2fMfvns1/OkWPV8WsB/J/PYAt39t2G83PpJ51Zbx7NtFNTV8",
	"QY1/7Jz9sqSERkxtOSI4BfZojVqgxpSWrbvf5AYSfTHblT0BWybBMdMWiau0/X0kfvMs87cfV7bOCQQb",
	"W3d1uq7VRrc9Cqi7r4IY0TtcQ4oqRa9Yn+Drr8jStCopPyKaXlf76DV30gkOIU2P7OwqyWS+/VqArBUa",
	"FRLaJRKhkzqugz8V6aCb4GZkMisU1TFrLSGsJYS1hLCWENYSwh1JCC6bwCmlH75mx9H9YueWYy/k6rfH",
	"zoPa0e1Bs1BF2niHIgy5wY9vhzKP2EuTeV6uD3H/r/1Uf+P27eGS8euv8jPS/C9CPVciRbdwjcNK6/Eb",
	"XbnJWEqeUHBm+PycipTa2odwwaWs38brWmAr46xsjb3u1zGSEonBatCUKi25VRtpBZZr2Etr369oO61t",
	"ZBc76g8Ct7lwINktkmQ0a/f6mGea1piP0bEvK4FRziVV9CJ0cFa9TCW35cU51AH3LsrSTWQ+XtdAuh9K",
	"ERmPSaIPNbaSl+4hdIKEqwdoISFaCrNkyoVt2m8po30+QIcuXegCZwXxtQETQi0vg5sFOfOUpfzymP5O",
	"0KMZZYUij29Y+rqxxvK2tIkYVpQOPQygk9hSqC5xlMo6GV9BkFiqc5CrnJp6sivYTPw3C2VLA345gRE2",
	"qYkrsjMTOWwLFYAS5dVhyA0LlC/djQeqN+KrI55l/IKIYUBnbX2GzfrZ/GCvkyBI8ExfDf0lwpCeS1S/",
	"XlNjXjqqMUrpGPLIFDrHGWaJSQrGNhbq0qLuHE2xJuBjboVLGHkwYi/sR2U5E3iCoJKTL62L5Q6yb55B",
	"ctjZEbz1d/R2/92jt/Xl9tHb4b8fuQ9ewKzmiz56S1n15cePO7CQBtu4VeGyvBxu2Frygolfs1UYIBEh",
	"p2ffHojhx+mbizmdUv48/25r+pzSV+wFMOdZfZlrFLhtFGDkShlpnPjaPo1YKnKl6pQL2JBhVrfMY3JB",
	"ubAF5KPhvfDUqfNWuLJHD+rAlE60VuffhBgQW0l3TIXUx3XoHlIZimMpSejMx3LJAXqvB8z4JRHuN0RZ",
	"CqXo2cTNRGc5F1CjYmBaV9jd6OuhA3i39GwzjTmFmIDBfYpZ7Z3twYi5JhkabkGQJBdE4MwLDBeYQsXe",
	"sjcHnnlF12S0y7lUZIYkyWwoTHlsVl8C0KXycw9GbJ+hBEtT6E0QN52cYqdK62k8rBm5IFk/GDrJuLQV",
	"oKmSIYd0Iovp2WVPYN/GQ2FpfFiX3M0IF9KwogRnbkZKjKwUcl6siKwsGGYqZIioIHcEUq4FoBYw5lGz",
	"oEx9HwYIbn/33bL4QFG5P7dpyCpHrlmxrELylZgCTZXtjjKTBtt8cKuEp6Nnz6p8VXG/InBaO2FVVF5i",
	"fADytbDfXMldfclIUOPvsVL6p1CIvpiisRaP1+LxWjy+axRYC6NrYfRPJ4wud8c4r1pNGq137FgqKy0R",
	"i1zkdDNLwSYkVCLJbbT5uMhc+dZ5QLb0QQBG9U1Eua3yiIrcOpfOscYIbApwaLzR56FHhjrdUCPuSp9b",
	"SpU9YTkYsaF5n8qwe5QZijPviTQzFNI2AXYU1FI+jT6P9D6OjDcN4Szjl/qVUa+sFnU+N6VgpSxI6tCT",
	"SjTqnReCKZTySzbquddgoMfrgK0bBGzVIV0HcK0DuP6MAVxUHvOxekNtbVcvYI5xJhvFv/fHSLq3/64H",
	"rJyFFigdR3RnRS4IQ7SZl6LP7WqKC6lI2kdTLC2pBbaKTRWqc4L0HJVUZD5WKANgY7XDqTxl8JSk8cXk",
	"giQYnsZqm+/5531EJ4yLkjDbOqwDdJgRLUfodQZbhyiTiuD0/w4b2jphRJAZvygTl8aFCcWIL0DaiuIg",
	"6TYR6mdewD4bicMylEoddpxxNpE0bWRjGfHFohuSCWFYUI4ufT+EspE9lIjVf1pmZsobagnSmBioLLub",
	"IS3CafkzMB270TTLbQOnFBDLoWwryhE70aJUMKAR1NQ3EpQb0Gx8IWfXYdLsMEaXeG7TA0EdITiZWn1E",
	"s0pgQn17poZTW2s31DCrtBS1q60uFRLubVtJv2WySKblFsCOzojRr1ytyZGVmEa9Pho1tTv9sxY6R03d",
	"f9RzCV7Y7K0TkQe9pWYbV5qEUUWdYI+86NbQiGr4d1hRkOxl2mpem7IBp5nAi+5Ob3AlLH2oxSpSsG9t",
	"Kgs3gTlac6pei4sJzBmWquUqVayPYCo1401xnhN2UwNkh8hZLAtBQN55JfhsAYAg0hrN3dx4rdyZz9MB",
	"qrcb1KKpMyP6lpamF3Nw+7yhUc9w50v9AmFu0I9AXECnPMiLDtBgCY+DZRhSYD5G0HjbjJd6mwpsvRmj",
	"lMpNXKHtYb5ZLUVjBvCDunGinOAriHF2QWHrGOfVXEOvybLY5oj6ckfBziEFjepoEUJW3ZluVoDO4dLC",
	"tm9p2gjW4dJfe7j0WldZ6yprXWWtq3ylukpMI+gqLte+bEoV4cI/l1KxFv2vJfqvJEc/lASdlYTCA5ES",
	"8SIi0cADzedsW4l6mosM25DGhd/YLgZTP4Bqa2E1qXWFtc9RYa1ZvClSj9HkMC2pqAD8P77Ofx4fvEM5",
	"FhI87ubNmO6HoImwCY+i0lS5NxKBvpHQ42ZKko+al4e02fo+ofC2si2QnDfViSX6G80mNiYCg6/TfuTl",
	"F2tfsMS2X7pRjUAz54VA/JJZF+oAvcbSNuLELFb0vvcHGpnjMsKOHPV20C+j3oSqaXE+6n1An0IG/N8y",
	"Xsp67fdcF6pY+znXfs51oYpbN+LazNy1Dfez16kwosLdF6yIpFR3qFfRlHbWws7nEXbWZu11FZDbrwKy",
	"iM4/HBuDJTlLKN6JXXsNiPaCi3VLTN+ba/qtG9fvXW1M+MYiW8NPmqxFsmfqca+g+HIB0JWdCC25mmGG",
	"J55YkrmrxVzGuo5d4WWg27aC9gBVpkkw04TLLrDvyhH1kSf1TWXW2qQjVhotCVaDxyP+OjlArZG+5wXN",
	"FMKCFyxtiak1oePVGFwI1E2LpFJZuhJTO3ApCEgQMOsxG7QuyAxTFvgRIqjQN2Z9w40YuSACaU4kESMT",
	"rOgF6ZJV1SKpBuU+WthmZFebTFgCEnRmrzX29JHMd9CoBwsc9YAdLRWsvT+sCfH7KQHiGxLpKZYBaoZU",
	"Cdli1jhJBJfGgVApZT3Pa8UUDEQtEAYGVWt1vQGiWktyHWlsyXwb98++USjRcxlXnEG4PiKDycC5Fctd",
	"0GhtWktUUZiP0dbmpu9oYcjheWETcC41zoOiBaOTFH2/2bcJHN45tr3p7MyV3boeNhbyZjtneoNav0Nk",
	"vXW7ng/PDix71wC8xh5KJI2yhgsSMz7uZrxI4ZlEx8YRkhjaA9frGDhdNc0L2ix+l2xtjnFKNraS52Tj",
	"2/RZsvH99t++20i+206ePvvb0630aaIZB+hC+i4RcUETsmF7FMmcJBdESAPE1mCzFPNDDdBUoaWzJRFb",
	"drG54LNc9RptF53c0eTH5MLYWecZx3AgrMjgsN2Oc0asHFDf0Ea7hQ+f+jBTwqG1qIry313zsFL4GMQX",
	"IEcD9LaQCuEUcF1xdPRqF21vfvsMGdyokjJIwjKH9cTK0VVZrb6YZuEirLCRZSJ95p3abtDavGbIAABs",
	"gNQEruo+FHR1OGLWltr8cFLV9XdEwVqbtkYzW4uhS+aHU71S+iobfyJmFnvioZQ1fA/3Z0O4lt8doAvv",
	"SeDas1emidH2ZYdb4fWWlevtkyTtMgpZr+JjplgGoLu0fzR8sfpf5w59qulWZkpHFu3WVp7lgqdFQgR6",
	"5O1HwHDMcdWSoKv0YgnEhpx0M+bwxFcv8Mccu6NPnz59frP40qV3pJ2eYMokshTENtg8d0EOjs6YTRXE",
	"ZKlaocTGVUDARLnS2tby2cD+ayD5jMBAyzY51pzO3rMqStdLjDc5V1XDMFTgpYXBP9kwKaN6e3KsQbLm",
	"hkHCZ08SfQXgQ/lEph83JvzJxfYTsw6on+eT+faKMhE+wiuCTEn7IgKdqVSdXh+cHvX6vb3hz71+7/3L",
	"lz/2+r23B+9OXvf6vZ9fDo/iftl6Mv2CygnxXPqmTarVz1i2+IL4iIJR5d2OweARCWVrO+bXTIvr1w7w",
	"292iKzOqPKBOu4/AWMc2D1LfbkRMGrJ9emJGfi/84sAAg5XTHgnT1zTVOmNKpflbQ+dbAEEv4HOupvCz",
	"oWP6a4UzPjE5tzVffq36hUim9OLaJmf3+S2Hu1tz8xBGx1m7p29dx/GL+wwfpvPqY8wMOgSfEVQVsICb",
	"D8yVNDZv4Gd2KXOEKz2Cb8WW6TqRlLUhNVBWXLE04g5snoHKBXtjTBZGhDEQ+bbas6AFMqioPwhe5C/m",
	"r2imiDBkxdtMDyvkZnEj78oURKCJHlfLYWMzsqF34yJzyr95TSY8B0vVueA4BesIZqbGhqepAicf9fcv",
	"WwNgsR0NXoVA2CxDin8kJqwZjKYTs1AXkOn4xIynJOuPmHJX1U2bwOAGeqPR6zf/PsnVxre1cibwRMsS",
	"+lkYzAj23Ur/6cjO9CJcB5ZznBWT20f08vLCBskzsEPc8g0wK5V6ARF0d723w/syjXTeXn5xHr7TtWMt",
	"LuNwsTpiS4tcK6os9l1+ebFlTb7X5HtNvtfku076AhK3gLrpm9Pc1Tcmdaj0SBj5HZp7OYwoST8YtChL",
	"siIl0jgQtHZrz6OUdSV6RNO+PrDHHVuv10eoQPAZAgfsidi9co3fy+7uva7itD5Th6gM0dmsMI3ii9gK",
	"w3tn0HcqeDGZcuOoQcPD/f6IjcsCXYYfU6aIwIky5QvVFGFn/ftGNsPY/cZNcvXtmUH+yJJNuE8HM5Ne",
	"9gI8Wy3o3jmVQ/c4zNI96t7O+wAi7p1JZB1t/zmi7V9lWB0KGvM86Eco188WlUbtJpG8K2ZE0KTFxGbz",
	"6dxdD+aNBM/oxxEUj8eoWDgXrtwI0PuKzO7pHsSLwS1c03uqprYA5gkRCxdmiGNuXkaKiNkXPe68CnXH",
	"2Hz9ebheM7FzUlF2htMLbDxdkeKTwdojUI3YXpCCRxmyY30e7KydZDdkXZ/p9c90hdvGxTlNU8IOBT/P",
	"yCzkqd3WeMrIVU4SRdL6EC3VIom4IAIVLCVCKs5Ta3X4rSBSQeSKIONCgjsc4UJNuaC/az4ziOkRUF31",
	"RSHYHr9kr6lUXMyPyWQWDdAYImkeVUpVovNCMCiYiKZmgMGIjdgQTegFYf6TaCgPCK92FKIuCbGebGkN",
	"BlPMJiRFhPq4pvqUZYVVkJqs0qZHDzxH0Ti6oXrJWjxcYRiUC0+zDXcI80HlMc/UNWPQPEjHCovIzi8A",
	"CPLx7wAk2GgbvCf9XrXp/h2q/za32a3kXBD8EU6Tj01OPjbVzG1Cd8vO75jawPt7vs5xVeve3Prh2Xf/",
	"+dt33w1fvR/++Prl1va7nzd3//X81WvYlU+tm1Bej9om+NP5gtsQOe/PtRGQMxeNO9Tqri2iCiFzOFGm",
	"CkJZTbUWYocZxFCAIceWduiqHfzgYTkiCRdpr30BXm1oD0m8IMIUJlkQVHgrFyq/zWTDanqLpbGDBQGE",
	"Jz4e0FPeoH8Yu13qUeOfuStdZGArT6NB+FpuXL9Ks6PEqYqjH9p43Wpad3D819O5Yc6HleNuOjeuVe/P",
	"oXo3SFnT4Ae31T6towSgZ1tiEq32t6mZBls5wu3lFC2gRJVYZE8eVmwoUDsEtxlu4th+77MJkYqkLRHI",
	"Q82lzBs2TA2UKO48Fxc4o6kNtxKCi5qZn7hRH0BYslvnUC3+UAv0rW9tm7caUc5+IxaSnAtbUCMEJYYs",
	"4NvU8oKvHmrPBkt/XLfciaZc9aoAmS9vGZwS715qtItDVUdOX1oNYBtjaOhTvjRYasR28ZXB+QQ7E79e",
	"mnDg7Bh0VID1c+vFhEGkHchvmKHCj4ISzozQbmS9XMD6CGSsQvLSuMjGNMtcvKpVqaNq8z674GCauPeM",
	"/YVZkQV4zdY/C1t/Q6UK0/2OiASL1R9BEsctlB7q/G0TTyFFRINpXS3XB7HdV9PpuxbQ3mLxkag8wwnR",
	"UNq26XVz1Kx8C2XmtcGI+QAUqEroc6Zwnjus0H+G34bRKZRJhbMsDE2fYEZ/N0RzxEYsgE2PZP275IpK",
	"0KRs9p/kJoUs5VqlJFeKMGOqO3JeYogKqIkQCc7xOc2ooQ2/1Jd8DG2t0Am+Kjs9SaTwFcq5UEGyBTX3",
	"HVQXE/JhOmKd+c/OFL5y3vCd3q77WY9dUjz/tv5Vn2gUHDcZclKJbdeUFiTQ7Stg2E/O/BclKJZUod3g",
	"kb+o8Kh80gqStf1KlPDMdErihZIKs1STdyD9hTWR2y8cJN9IX5HQGZBnRE2NXlzdSjP0mZsr2E3zBB2W",
	"T9yGmif+QZOX+T1VtiClaWAj0ZwXGiXtCOUKg0UAV0g4OxVZb6f3hM60LvzEgDvIIUnaQmjer4oAOWlK",
	"clV8jHZBzPNvJArf68ybhnm+676bx1hTZbb2yYPfB9EgZLcl7UPoV9Dp0ZvBonCUto+ZrbfZmijTTeIZ",
	"5jlkyrd4V2AqGLHFlWQVh/DTcu396lHGuFaT5ur/xOhubi1IAphGJAKvq0izkigT4QmmdeO++XprM+Dp",
	"HcQbWEXZnnNVIabMX4kuyRctNWAt7jO2TKYxlrvajDGg65a3htBSkWnaJZi3S7sl2DesKj82hchL2WGV",
	"8qmHpjbnMomh/hmEuxppIT7gTpM5WNu5LbxqfFnG3hfY+HZPj45evjs5O3x5tH+wd3Z8Mjw66fV77w7e",
	"x8tO6O82LrDQF1DCAEbqNBZcZ8J8xy97MWBPokmAvxy92n369OnzD4+mSuVy58kTxXkmB5So8YCLyZOp",
	"mmVPxDjRLz22SblazfCKpAv7owydnuzeskb6NgxIvV486DGBo/hI5hsmXzDHFMJA3dhOInPxiqB6onI2",
	"RJkBFpjkOS9UWyTjHz0tf2nNFFqBbm493/p2O0k28ObWs42/PX+GN77f2nq6sYWff7s9Jkm6/SwN2FE0",
	"/W+G81/Myj5UdoWIqKAK4Y4Qk+nKIeFSFU1treApv4SOu1hBUm+K8GQiyERLZcYrWluUe2z38/Rtww0+",
	"3EcnEOV6ai3vMM5JxRjU79nI1zBS9S8D85ffhL8MDOsxKT2LDYgQ1tkIH4VDthgyNyO6ELuytbAmLPvv",
	"Tk9eNkWRympXCIMmYhh8WQmHhj1bJmcMQ/nCyddwoNU71djrJcm/wVG01wOApFnFS0yozumPcMlcwQlf",
	"87a+wzOSQiGGQ6ymiFxpHUuCo0Rxrd4InChrbbbhy3DgsiwMY1YEzXq1GvUjmUs0K6SCO26iPjXSJ5xJ",
	"rUqBVoWzfIqZCTuBpybuAarzJFOsJzWx4yN2crB3sKPJA4SVGsqAiCYRiauXFtydBlo3WGAs/HYYCU/1",
	"geJNlLgLM/vS5DXZEhVuIO/XA6lbVzJikF1+neO48yjyiIE0pC31xUfQto61hgWVRYwqbgCtY2iGZAmS",
	"CXA5CV+zn3OBjk/f9tHwpx/66O3+O1O3/+3w3yigXtIwAifNCWiqUEboW66XY2H5nnsVZn3FBTp9t/+v",
	"05dnuwen707CgftV0A1M7oa5SQZID9H4ttwEt40aStvponqgAeFeQnZCut6VYr8vv6nSascXohn9JpEg",
	"ZBGV2UNquySvH/ieHBhW3jWxn+eEmUb5vPz7Sf5x8sQMB1A3eFFcpQzPxFL/QpIImbHSquH7cKC9fi/E",
	"jV6/N/zph15fb53+v8N/LyubFi5+WNnM294Hk0P2tctKa0loLQk9fEloLVGsJYo/kUTxcISJfxVEzEvP",
	"XZN0GgOtCbM2fPU3/UmNNxpDzi9/xJgbpKxuqEKc81gYSSQiZctxOFOox2wchA+XZqftk83NHfjff8q9",
	"NcG1FduUf0kfHNgYW573e4ovncBw1b3hz+11+boZosu955cxv8U4ajG95yY9vYEPDOQqNehKA+pFmvTR",
	"x23g4TFH+J/gl87q3+2i3eP71QwtXF1OagoOZUW+OIMNnpSB0sGKHiY+xnM47jXstTthDqe6oPBgVmB7",
	"/gLdKvt7x9UrXrD0s4WXmQKFLsospSn06xtTqJftooxqxQGc9KuwmBBVlgfgoN7q7y9dvBlHKZVJxl0m",
	"AmfERJTIaPzZO658+czdKWaMZCtk8TU/fk/Op5x/jKw9fBnysZiJWekCktHxj0wc3W3AVx2wCewp81YT",
	"vfc2gk+WvTgZudT73liRCaJIiFCYmgG6rjFeLcK7sEDHsRVFgDmwlv1cXvqhVgW2baDPXDrNFbSz+9ip",
	"HsRqYRGRTW8Jk4jhqj/MZZCfxCIrTHR1VNCPo8Nq6SWxM2xmmyzsLR5LOonA9QAiVWM0bR2u+jnCVdtu",
	"2MKWHa30x6Lu+5cvXh8c/NgxYsIxoA9xcNzjBkTvWon5pfnE3/9aXNuD7mCoNYHXBKc3K8hlwijR65OT",
	"QzQ1oyETNitRHiSZup0MA+IdrMEQDqAIgn0t1UxdubrlrY3DVhwOLaks690Z4h/prlFnS3tuymhL+K9a",
	"TIiHXZ5KItBYUMLSbF4pAxZdnVebLRb3msC8wy1JQHTCKJsck0REg8nMYyThuYlS0ky9dl3CvBzusDsh",
	"9ML0UEudDXaG1Q769RxL8uzbXyGNJdWsGLOUz9D5XBHp89CyOcoFGdMr167p18upJMnZrwNIFJzNCNPf",
	"Svo72UHb31b2w7x5/Gyy/foNO7lMnw+nry9P99++mkx+On5+MOaHePzu++rJPzIfPf7HL3jj9+HGfzY3",
	"nv/Xk79/+OPpdn9rc7NSF8xtit20zsXjF4puMZYSk96+1p6JsdBlyxHR6dEb25qpcdupIedVwJ3twRXS",
	"1xp382oEo1+7oGgou9rQZL2SjgJIVOOL1Bo1dwxuAZRT1JwLg8nAiNgdVb8l0sLD47j3jFOtafmalt+Y",
	"lt9vOrg6qWvJQm/VsnzjoVo4CGPcWBzlCskmwUeRJKRobLbtfQiFUaDsiG3EugsQQD9Dnvr2OIU0cSGt",
	"/RtCCDp2a/BsurkvoWKm1WnXCyfar+q2elB06eNAL4iYHyusihbTiXsH2gsWcvHRr2xKASTbq4LxaaEO",
	"ZICxrzYNMF3jYhcuI1Q//rn947vDrZ9P/v2vo3+/Ptn757c/Hh797fA/m7evfsBeLNE6bAe269knYYJD",
	"O0LEkXBLiLx4fX7+fk8U2TUtrUf6y7grhFVg1lPYgscTwogwXZ2mVJaH3QbuwSUjApmZbmIVfunDMSIA",
	"LyWmizdziVm4apaF7W5c+hKnOjEEW9boZCqInPIsPSwRsm6whQdNS3JQuuTXSpVjW0VpoNzYv7YIvKvV",
	"mu+6hL14C+UT13jQFTUreyC2nY1b+p6tVL9qrH5ku4KZ0TnJuOlI/uVoVUWK6kK4lCMuXxUDVasZoksG",
	"Y+XMxfivb+QKBxCXTBcQh/JM+u1xJitdn2Zzw+bNuQuKEHy1QoO18iPbehqufyvFrVa7GJeN0bpN50tR",
	"LJgjKFcRRKd0G//YfrBofP9Ov1di2bU5cB0TTAfzRfP7VysxNisf1/KJgpeRfbtePyg4zvI0y33v+zCT",
	"yn1cfj/2bluorll7biGgAsICunqoK+BipcGtNeQfdGUUgeNUECzbkkzMM7cpYOa0ENgdI9bsWaX6r0wR",
	"KROtkkPqhQ1lLyA2Pxf8gqZElNXRWq8JzHFkQIwW4LLZIdeUQKooArNFjmMvRJIFDMWVgolapY5Pd3df",
	"Hh83Fnsd67NF1rrt+bOx45W7SZlz8shWtQC7i3SNS32sotlBjZu94qH5lCl3ZK+G+29e7vX6veOX7/b2",
	"3/3Q6/cO7V8fWpTi5qZEPdrHhWmA3re3Rs9BoPyMnsP+9SG2E3cRQ1JqKcsCRqwK+6DCRXwpwXWwyGcN",
	"FqmYO25dXWxTFVfh7MvBP7lzBWPhdTu6kYWmvnPLRA79zdJtiQ682MpvjEBavVi8HW3+NUu2Ym23JFii",
	"o1TOOGAKU9stg4gHfpNwMyO0NRwSII3RCTOSz1ER1qL1lGbdbPihhucAAq3k8dQosNjd6bp1RXi4qyUM",
	"QcEoMU3zKZtAAUO9y+7bG2F32MvuE2TVuSJZDVW4q41/UWCRsHTly0QVwXncIKTIVKRuc0UvWaillKik",
	"cYLgZGoQIwSwzTXtP1xA/sp3SqyQRZ5DvgBH5wQpQScTYjMrVyaAC2wN1QprLagUGgPchpyU62oiWAfP",
	"MSyy7jbuwG3DPf96w4KuH4TjmW0F9T5cQyi4w+CcDgIFvlOJgkpLdtM62a2FsLzZ30OPTpkWSSWEc1hC",
	"9IZc0YRPBM6nNIEHx1yYFpcljXo8+Pxl+aMXeDdAinoRzofHVTVuQaEQV8vbdBGun/r53DdORfsKzfDc",
	"8eOSCZ/PoZGCQB/J/A7RYMRu1La3rPoAnlcYRZFZzgXWihLPCmUrFADXEMq01waoMUvRj3pqa4LSrE/m",
	"JDE3lKdkQtitNMD+f+8AbxfIMGtev+b1S4K0VAi2ZxnXYYU/OU9LHdscopgwKuBosyJTNHenKiBeYp6T",
	"SBnd64dEtMLYIUzC70oV+d+dvn3x8qjiVqqOAeMvHqStsUvdeWU9SstavlyEb1372JZbgAwzM/TxvEED",
	"NLH0s4QIfPjyaPcllOGye/ehxWvTHFPFkDlqZz4kIjEetndmkz5E1n0LmbjLBcDbyMct5b6VknE1cPcu",
	"9VID9cAM6dVYrLUd/S7t6LaXbpMx2mJYQcNUzBAW51SBNJcLklAoOFXWLg/Er9Fo4x+/GPlrNBqYvx7/",
	"IypRHQwLNd0e2h6xxhLKUwJNyaB5T5wyms98b1l7hXjqugma7kOepfkLxSB6/sxSAX2VmO9Pm54lGTVk",
	"DIPf7CwljIJgVTDPJ8/cDTmzF9ONCfJ9r98z5RnOAAK9YisC02x+VjDfCiR6cw9ywiBIZXAoeFokahcr",
	"nPHJwBC54+Lc74EleC94CtSmFo0NPTtfPcQKQOYiJPNlFGPXvqeRpUxIJSLWie7h6cdmNRavI1T3BcQ9",
	"5IJrNNVnkfDZDLPUmjTs117zLOS5b05hSrwFRfmoRL8+yadYEvnkD/jvj2T+6QlQjSd/6P/of/9qGiqn",
	"KdKI5iq+MUmEQhh46IxA5bdzrHVEm5mSOLO/Mb1opgol0jNFhIMOSozof5gBTPnAIzLjFyScS5hfTCU/",
	"mMmXtUt5UszqsemYza10Ub0bPA/7pOM07h4zJWH+qBI1u0uj0ZMycWU02vjwX6OR2a7mk/a6fssQ/Agr",
	"sotF2qD2PO9Z+NxIEdK+eNVmLz/3wlvX0YT/Q72pRkQcyDBrUj5ojtOMwr2BWePOiju6vop/LGPvek3l",
	"+83NqpthS0podymgqv2QNzToTExGsLJ9VPhqiAnYVWXFKC+/6yAb/K/oHh36dsWN7i+m9zBI6dj2o8Ys",
	"hQbdmrU09dh4PTwzgx3AfXjHBe3snCGo9Rm3b6mGlm2Jonj8aOFWr6azaIRChhyEgpXG0Rg5ObS3tLYD",
	"GWbSRepZMyE0/tIzyEDKkV9b1YxSuOmm/VbFHFBurfW7d3q814vFprhJjDjsorIzzKopvBaSr8n1vqhu",
	"tLfOR8pHe1qP3pqGSWhrc/vbWunfgAnopyFcYa+rZmHp8ZgsEMebvVz9NsNVOycJnxGJ/DAD9F6/wLhy",
	"Rh+S9sv3gculAo9vGJ3pLa1uXksj01jwYbjME776IqESHco4mxCxykr9q4gy42tRJJvf9sI1oW5b9qpJ",
	"P9HWQJ+nR4dd1/5ebB0tcpMkM7rRbTW3IiRZGH8EiafpfQkbPnUtOG++aNoFh2UPJzdudF0OpnKoNrfO",
	"62oJcvDpNEZEL4i6JIShLbgM2989a6cz2989axSjdkSHyjzDxnEUzSAFDt3Sc86zcKQZuqAJ9KPUVN62",
	"eUymmE30jxhe/kYioW9vgkUqEb8gwlxirGlNyK41S58IIrVwMGJDO4m8pFpb5UlSCNuoFJtcN32zQFg8",
	"tzUojVjXR4TJopTQMdI6LjgrgrlsI06oXwlEgrIkK1JTsn3iSt2ndDwmxrQGwOjlrtAeUksqICa1ev8O",
	"S4Eo4neSPj2kG8Lq0VyCdLzFdCXgFNj6iO3yWV4oklaVb1Ij3U4+1rRM7ozYhuET6O+a+PqXodDqHlZE",
	"v2CUBfT3yGM0KjY3nyb640v7d/nWS5b6IUQypRckRU8QZc3x7JvhaEtSNkzu+NdQVCdQAb1Yt1U/9J/M",
	"S5UTR/ssMZ0DSdpkpcG6wo6PbZDaCZY3cgRvhAvgaYn1qeqqFcVT+kxkc1miGkmGWVtXFt+z2Mxd2obK",
	"Jsb1ijn3U9peS6lrKfXzSqlr6W4t3a2lu9uW7mrs0R6W4YAB31vC7lY3vzVDBBZZ3x6A9x+MhGuP/+fw",
	"+JcY/wWJx1dl011bT+9SLk2pTDSat1VYcI+dzusk7050Z2iC6/fsIGHanf8tEotue0G2QOQ6RT7KYL2P",
	"vU6gb1X1bA+3ft7aqxykG7rfY0Vm4kTq51i+0k3Ms6EOH8kc4Rm3PvfQi4NOrfdTEOClCSnh9QHZ4U3W",
	"qvr2M7/Vd+IdXQuDnYVBYQMFWq5ISJ7Hq9+RMgwhCHX2Q0aux1eX1tTJ4lEeQkAgFjLgWzNzrAn3mnCv",
	"CfeacN+McC9SZlcnbg9E6fS6/1rz/Hyap+G9HRifsILAmgWuWeCaBa5Z4GdggVGqdeRwK0az9KPzhEB+",
	"DLnCifIgdghM9iY3m9h914HGLbPbNwbLXcDLQpHNhi2qiVnGL2C/U86WDQ5BH6Ks/7CxA63G7TvgJWuv",
	"8dprvPYar/nY2iH7EB2yTX7EhcLZCf9IWCwEIuFMFjMiUA7vIaVfhAy0n0ybJS5Qyolk3yjEz8kcOW5o",
	"k8mNjRGVLGTEjgnZQS63MugpLhXPMzqZKsqf6DuvBM6eUCkLIp9sbf/t22ZPHY0dJIWE0OOsmCyoOdNH",
	"dGyqzUD4X2Z74zjKgmy9Izi7c4LsyBViolW7j4TJM9DwNMf1J9bWZL9L4cH7lW7aMAo3SP1VbmSdP9re",
	"DWoBmZflV7Bs+hCzZpeuKiiuH2ngthXP14oSCk3H4ZHmzHC/BFGF0LcNK5/lWl0yn50ZonK2P2R7Tw/z",
	"9++3h9vvxfez5/89/p28zn749/dXs91/X/4wmH/327fHG8P3v70qnv3232P86vfN3//127cvf9/+/kiy",
	"+U+X/xyP//3db1dvL/jydderY9tNiArrmjof4vmMMHVCRIsIl5sXkCJiZvjHOMPKkPbBiB0wLcHuIMrO",
	"cHoBNUS4gH8JQbCo5d+7dyBx3r0Sl+/1+CeUiGj+n36IFCVCcz6FMoKlQpxZjoM8b9EH5mk2ZYjgZGq+",
	"a2YIZljBpCt0e/CfxKO1y40KIHLVaSwQbdaSV5FvYzVICkZXBfvUfxIHWw95XbBPI99Gwc5P+HAWN1me",
	"5khxENiMkAGiCTd1xX4rMFNUzT0zs+XSzPF6CEdsf4w0jH3/G9zdnLANaGc46MWqALWuCiBycy8tChQs",
	"rh/gVXhYrfdRo7zRa7X08xCQP4D2YV6DpQtYX4gvdSH4mD6ICkYvjEplAV77lD6LT8kbeCNE0qvQVi8y",
	"lQyd+m1yocoigkasMYUctfgiibigxiKRUj3wTGMXB1lkhvNcyyiWap6NCVlmgdZE7BUBfJd4Qs4gT2vZ",
	"R6f61Rfw5iePy3Mo67hj9uJTv8cZ6UDp6nB86nd7PwThQ7DhL4wS9LLakKt6BGGNRp/gb8wP5uvwAJoM",
	"6bNZn1z51bBMpJNXnbL3oVNNx0UoWtuqsjpNl2Owjcuqvcm6fXqssKLJdb6MnHFzY2OHLBEWxNdUMbfP",
	"2p/KYpqBB2DEXAVV+JDPKGjCvrwPiczRRxgu9Bw+cZYPS4z81V92fd3xrr4TYB2FZnKrH51JhaPJdY4u",
	"TgYCPHM3PEIRQQobExIhjVhLj8bskBciccZKjATRlF1TzDGJFFWxhsRdnMb9Y5pPOGNjYl7yjonwkFbx",
	"Ir+ojhets7GOJ1/Hk8c9VuVtOrGkpDuDidHyuL5QEy2q+D5iYDP2pQDNUVo29KOpVCWJCr0hMTIbVCP/",
	"sc257CQaI6IZwxc4l8x4QKALeesZfpaeo4/xTL91OuJX5v26pt3gPVXT0PoYv0tGdY7cIuNB9RptU3rX",
	"mD4WpKqQ/PGpnbU4pbQhxSl8tcvZmE66r/LEfxJflsJXWlMf00nr2gpmBRursje+CJZsGnhC3EHkRV8a",
	"QBp+4Itd+zcX9DmemrLobixHBUO7rteDPlQjbfR78TrSf9pMAbsbNcnJXaJFKoQV7RbbBv88Qt5awFgL",
	"GB/XvPt+8O6lFvQ1F/8quXicA16fx0XMJdGlxGxCrhqstcwsNi9SeczH6g2dUbW8qdT+GEn39t81srnA",
	"cg0+SjDTR1I5S3JBGKLjhv1Kk8arKS6k0vgwxXIIleaN7wZnl3guTXedokJTNKwoA2BjgSgQRTQcKyKO",
	"iCSRLfuZFwCmKY4PNmiEC8VnWNkQDpxxNpE0bVjq+rZIN1w8JBPCsKAcXfIiS8Hb5Ppo2DK8+k/XKAd8",
	"TpghDJ4fYDs+JGlKBOkjbEHyvisjO7WDYw65Gt1khofK5liFA07xBUFUfSOR4FkGkXSSKA2itBemsJ5R",
	"jC7x3Ia/6X00rlKhd7MMGe5Xmq/ADCYMBH7ngk6o5hJ2tdWlDkbsLWYF7LXfMlkk03ILYEdnBDMNt6uO",
	"PuqZ4Ua9PhppGn9kVzL0P2v2MNLsoP7IdCKTCJu9dZ214o4+XypsM6gVyaiiOLMA4lk1q8S5+hr4dygo",
	"F1TNFxc22wvcMmaC3H7nmaEjhfC4AnZBmfreMEED9fZ331XLnfk1aNjcCuBozam6yXox39cXcT5ADW1x",
	"QQ4uiMATMlTBZV5CnYABGiw0H+u75saDGCVY9ADtj5EZA142hACCBPSWKI42Q6pzaAfwg7pxokSo7jtx",
	"BvJYbA9M3FbdG5yLTBFxgTPHrmI0fcT2zL5I12b/ulqId2rDfli4buzyadrvV/CRGRfBYh6WeGGmuYH/",
	"PD54h3IsoJVhTY4IB0UnUyptZzCqSYXkZWwb6A3JlCQf9a6GVNg0SDERCa6E/rjIbL8+Q1lBoaSMbEyE",
	"CUewH3kSbE/N3oE+oprF2KqGlKE5LwTilwzJuVRkNkCvsbTd5zBDZr+rmv8faGRusW0aMertoF9GPROE",
	"O+p9QJ9CBPhvGVfh7oXn0bqIPnRsJmdRYRE6LrYb3Ed3eQDxNR3noVpyuy70ysirOtMr2lJ4RKW7PVZV",
	"Wj/dMCVeY9Ydo2L5ErDw+h1ZcxpqWwkPjRqallHetVNv7dRb29zWTr21U+/+GQZ9qNKKUbXvqZru8tmM",
	"Koj4gR1s2Owafas62uWoVgfufJqFrsolk3wuM2jV7Lk2cy41c4aS5NpfeXf+yqi8u5Zr1zLVWqZa+zHv",
	"vbhS82jeveByRxN29NiuhZk/kzBza25bFznUZsv3L1Q7drLSwK+JAmYIs2TKRRUfeubHxQnvbiBNI4Y/",
	"B2Y+V0XBjtGUO8pUe/MO2JaxdeSKOuD19O7r1l4Z2rlaLCzlcjoz2+oZ7LsBFmQyanyiAbF2k4YIWo5T",
	"bwPkHvTd3nbADFPtdp/lhVojyZ8JSTrgxn6wmlVhKcsP/Jri+a999OslIR/1f2ecqemvfU2hf50TLH4N",
	"qaZGgn7v/cuXP/b6vbcH705e9/q9n18Oj6LeSvDDBpIlKDatuAzOZSywqbnS0FN8XadhS2iLQTaFLqc0",
	"mTpZimje8tHXyuo7jgMOMcYvB+jEv5hgxrhC574C4rgANxMyPBua7qaly0+JgiUQdGH9cTPKCkVQWhD9",
	"y5RfoimViguaGNGRCATCo5a+FRcRdfZmPZNrfvDmLu1pGGagHV5OiZoS0e765mBrnNALwvrwhqCp7zxf",
	"Huk30vPwczLFF5SLwYhtoKW+dfdW4FUPXnNTD6Iec0EUpmzYQntaVml89pbeWJoEHnyb881F6c2vdAEc",
	"2gbXjWUtGTGywtYvFs0b2YJYwaZjzNJzfjXM82Z397ULaO0CipsrvpY+vBmVyjrLOyr8WHwkKs9wQt7Y",
	"b+M8fVa+iOwsJt4NikhQJhXOMpIinOf6Ljtz26CxhLVdYhW7xKoNYId53tr/9bjS+1UfVMIZ01S25Zza",
	"1Uqc599Io1xSiSzNDSUkaX6KR299bYbwLp1N3c0MGpm2RoAdGyvHKfOmy0PBzzMyC+uXdDVPkaucJIqk",
	"9SFa+gNrqQS4sS3Jkc1RweAeaGEOszRzustvBZHKiXkYzKVcYDEHASbjGGQJDUdaaMIww1rqZpglpG+F",
	"UwiBzehHks1tWUFyQU38LkRaSj4jml3h+SAWj3/MhYIud3Ec5dAAL6WixHCHncPj3V6/t/fyeDeKoMdK",
	"0JxYEaLOFEpSZ16DixSJJquIG4twU/OexawjoOoJzvE5zagRaX75o3HFASSwDuEsKUw9BYWvoEBlwE1t",
	"OU6gVOB6h+Xn5Mx/dqbwlUPrnd6u+1mPXR6Gf1v/+qnfAo6bzJvGpVHRNe7Y4Os6GPaTM/9FCcq+rSS6",
	"GzzyIbjwqHzSCpItSidRwrOMJEoiXiipMAPpXpALwgqbEWC/cJAEor6rbDcjasrT5laaoc/cXMFumifo",
	"sHziNtQ88Q9iVNzuqXKVqG0Z2Dkv9E20I5QrDBYB5YgSzk5F1tvpPaEzPCHyiQF3kAN1shCa96uUz4S7",
	"ZfSCzHjqLb31DxzHAvJqGjfDbUqgqcC+RnacJOpsa/vpt989+9v3zxuTVDhE+835tG4DuBbv1+L9/RPv",
	"SwpR3/M39kkfzAcuwcmOSaEgdVokvrx+3Oyx1h4ehvbQoPsxIc3JUOYttL83iJbV7aqIeC5XxsEDS1mr",
	"IUvUkOZxBfc4qqPA67tTknzkhTomUlLO3kZvvT3j2rsDGDo4KaKKfIE4bkWifa1EqLYWIVXpDoQkpmzT",
	"kBAtEq2GZCQ15vVEQwSbYrdTnuHE8hL/C3hb9fHVfrdznRkhUG9kkSSEpC2pSwbCY71Ys5TWRcCG2CXE",
	"+owYcbSlTUrwrZdcB11ZY2MEmg6Wxpd4QnpYgXOxhNCcyo0Z1fhqe70c8KaE3nQXVMY808/lyiMDBar2",
	"KVha9X5V4tx+DdpU+QBcdwWiNMOTAo9Uwdm2X/6TMLZiYZyE5n8lba5nocVoxqGRBOwgKYGeCpXWCClP",
	"5MCqLgmfPVH4Sv//Df22rBBkdZWkZ1ub5v9VRTV4NBqlf3z/6S+N6Ip0OclNFpPH9+R8yvnHlxeL7vml",
	"eQlyvlVrc/OWPPYLuOA261k5tlUJK6RMPd2Opqm6u9s2rruHVYC4r4q/HFtDOlffO95eWJ4uXG6LkLBY",
	"7FwgULZLF2Y+/XzQjftaXupB8Yy4Z3d7Ka60lyiuoYurU9w8IJzn+w+xIUMzZcuSo69jNVoykzlOyNew",
	"nEgEmFtb3yJgFNXLlhqNTB9bDgMCpeOqOUaFJAJxYVzv87q91VisTVTIS5b6YIJtkMU3d+B//wE+F7x5",
	"rLBQtcCD4N3U6Fg26dOZFtE7I2cvN94ak6BvGwJkIhScpsW5zLkxjBmbWM8rT7vBBdBDnP3z7UGWKPnj",
	"T99HzF+N5X+JrjKNve4WtBE7kS/XFGdl8CtI0sTtadUmkAZqu7cNWPyvAlVHt5Yw2+tbuqKzfpFuOy0J",
	"gAb0fn0Luy6leu+uo8F8WlY2qk7jmle31j8ovMVLjzQmZeitWkBdT3NJxFdEY9cUdE1BPx8FXdOhLnRo",
	"AQla4AA6rnSEDJoe11pFSgX1v5qaTWsb1f1xs1k3lcjZ+TQ942pKxCWVxNT1UhwaWrohUUoYV7ZuiWtr",
	"esuRqQ/ZQfnl+hqHZzoYsfe21JsgF9Q4ofT+EITTFM2KTNFyFFnkOReqrSnyIvXyJEzk29+LwvL5Vci1",
	"l3jtJV7uJV47SLunfWaYdd+majf/uNUdknsgay9KMv6sfseA1tpdD1jKMkHi5VWOWRqzgbsnlV1eiw1r",
	"sWEtNqzFhrXYsBYb7khsmGJZawq60BcaXP9D/alnaLE+n2uR5B6IJP6Ml8km8apEEJqWqAJn0E7XdSzU",
	"Wxd+3EeXJsaSGKvrhChZ/jZHOZ73EVHJYLCgYBG7FxWL1u321qz19lkrdKuOCf7mw3NIbsa+njSVaGLS",
	"mC8obtw2Wwm4lk9fa6zaiepeqzBVxfipYRkElaVWaKFiP2hpld61EFWdYjo4YvTuY1vZq0C6qdeYGbH6",
	"1vuyXtBK4jz4Ou0jqtAUS2gmZZnZzoiN2BaUnMfIFbrSNElKnpgsMd/LoT5V31YVL2dA53N40w6kR95C",
	"+8qBgpmW1v3cfeMKc9bpCyJkgPIOmEe+76weJZliNtFUX3Ap3SfysZ5pO5wJ/Ujm4UwmFc727oDffWVz",
	"yN5S6JFRNrUySpn5+3EIEy5XNWLbzR1jXK20ax44v2tQTkmP/p4giefof/73/9fy0v/87/+DBJlgkWb6",
	"QvIxFIBwRfiokiQbV+eAWROeZfy3gkKAywwqVUjCJKjbdsIcz13hBallPzOid7ron9SUssn//O//M0D7",
	"DOWa/uhXIINBTl3DkZQIeuH6A2vi8Y3UY0HVeM7C5DiUUUY2KNzUW6rbtpa5P3+FtpsUYe2vq9Y+kKq1",
	"f87qqnUlYFGxtYYWWiuqVZWLUiohE6QlFt4/djQTWrGH8e9L8owyStI9O0i1zUJAEJJqx6AwdF4oaBgU",
	"Men6ol+QQ94w78K3hsUKzCRQTMdwQedr4iX87D6ksxlJNSfN5ounqOLR4dbPW3sr6k4QxWEmWYouwZZ0",
	"OvwVbepmD1os668Eny0oRmU5rStHZXZTS3Lw8dpYvlYmP4sy+TkpWkc65ode2YzoiWVtxJbopYyb2PHP",
	"2ElhLepeW9T9c8oyAS9xNyPKyS7o1YFrqYgznzYD5Whi5Ma/GqTO/EageI0kTGn1VY/ZtLDeQmpjjuem",
	"Eo41AV3Qq7IfZBUiDVCIsiHgdpHo0AwXbU7bqQRwFwBcjixhac4pU4Myhcn/ZPlL5ScKveIqv9lDhnhd",
	"CXX3NfGY5Wrgu5hGno0xzUw6bv2JIAm/8F0BF2zUSZeyxTZZqzUva0F+4zEBs56thilcs84kSHqUTYSy",
	"yegrZnwuqkdtc8LKWStdX+sP4xUTA60ynr8N9SECz7qCD4xWFyLMBc8KuOcTgdMCDj6WAb1Ai42Qu3Iq",
	"Y7iSOWEpSsqPmttsm3qaNqbdd/tdMSOC/v/svQ1z27ay+P1VMJo70+Q5siQ7Tdp4pnNHduLUJ02c2k7a",
	"ps5tIRKScEwBPARoWfWT7/4fLACKFEm92JId2zvTGTcUiHdif1jsLoKaPWxemQo36Vpdqq0O1WQklT3I",
	"mQY0yoSPYxl3AerX7KLRzdXQ9s9sHSNG6ytpq5SvpJsMK+sm3k0tN6oubOXTWcTFwM4sroidPe4eD5mQ",
	"bBLtQgBRQf62Kf52Sdz7dofmhpz8N6XgtQBzBe7ldVFGw2k0VGA7ltjIwHYS+xKyMv+eZu/vMMzreG0m",
	"WWGDRI5VoTOhB8y/WaLqdkYsUZVf1Jno+qGSwitPsh63ylO7iBEu7EXD5v2lURXGyAyXm4mH9qUcn5zy",
	"QlStDC5nL5m01V76kknnEWs75cv8laj+cgNcI3CNwDXittaIompuhdViZglY+O1/FDTVQ5nwf8qhKjcW",
	"7dIHsRxSe0rWM3s7arfypMcCmipGuCYRDc7hlmMeElNNs3sOrC4nSBhspmmksv2ipsmA6eJGtNzeuqrO",
	"2XFMjz5mqeqqFN7hS2lD0iWuKPKKacoj5cJWkifHB/vkhx87Pzw1E2u6tZ4umTnAdZpSlxNsLkYU4ndC",
	"UPOqEBYhFLeEWxe7jCMqbMcWS+SKyMBZ52Qg6ipR3OTmx7UnwwkZpUrbk1e41HoaqrPC3MA6HlXV9OPx",
	"4fTQ0oZGy7Qo9lPPKrxkRdNE7LqK7oJ+pj31x9qCWCXbhSvrEz4/xFd5ev98evrBRX6xprEDJsxeaXpm",
	"KxM+4MJHfbXzd+mu/r7TKYYZ2X6Rv1L/+cuXuSv1IXE5BIlbRMr9TYkaykSXHO5UOhpBkNl+aR4Wu3eP",
	"hsRrBeaGFPPWxbQnU73bi6g4L1sZm2keSKEpF4pQmA1Vc6C+OsXc549qNT7Zrmr6ryk3XUvrabNxuTWQ",
	"W+6hWXsj1bLBgtwSkE+yxUextO6iMdXDxq678RzC6siYCbi0gcvp/7fj80HbZgu1zU4/KwJbTCVo+fRg",
	"rWxjc/MTIye5q9DV/Lw0uLp6Vost1/J5hPpN9MFM05Zp08Lt+bRhS4P3LY45Mv5aGH/jn84Kez2ccA9+",
	"wi2/Tv3GRSjHJ/yfKoAYDBI2sCQ5hnRE8X8K6sp3h+8/nr5uNBs/H308bjThUqfStK6UpLmC1ypGbb4s",
	"3KORkes/w7VJNaaXY5eW9Gxid8nSpMJQPE1MUlGb3ZuECk18snxGS+0V4fW9NBGvpoWcsIE1ji0rkXzF",
	"r9c62IWbTW80IQnTaSIUMTtrYFf7Ftx3ZE1gE3siZq/8Na9O81aEJoyAgbHiF3Bjlh4ynljjDTjeY5el",
	"H5kIs3zgnM3NLbcDUiMaRWARQu3BXG7qQZYQ5jiXa0/qoclULd3bxblhZ0y5m2c+otk+b5YmRfn7MnsL",
	"FqQJ15MTU7adTPuRTMN9Kc8566Zmks+OHiQg3Q+HZMx6LkywSQ0NFBDh3vxzGmn+r7+UDQibUyHE/C2D",
	"yQK5fZCJptGpPGdiXpmBFMqsU3DVAY2INi+YYqHrIOYfo0nelGaodZyVsjB/06bl81xc6WtW9ytsVPuy",
	"8qhTvIP71cB1I4Bam930hb9yy65AYuDN61pnwszk6YumjcXrBLgYmJ00REJUTfLflCUTd4sb5NmEeT2i",
	"wuTvNR4wnSMeMKfPcEPdjWkwZGSn1Wk0GyncQWDatNtuj8fjFoVfIQyNe1W1fzncf/3+5PXWTqvTGupR",
	"lLermNY6G59Gs+Hsohu7je1Wp9UxL5j1lsa8sdt4Bo/AhmEI07lNY96+2G7TOIZ/D5iuCh+ptJnJ0Krs",
	"8BQiCpmfuuZdk2d2Z1+dOJ0maX+gAy7MTvxX06GtmA4YaHFWfw3EkBHMPiAkNGSn07HBVbMYw6DWskqr",
	"9n+Utcyxi8rSBijdODYNrlhuvi7SrmVBkQGUvp9bO7eJ/le5lvMXxtBt90u6v69f51x14647BPERRaAG",
	"dCGhq+65UXLEwMzcbf/B7CpgYFGupVUzBRFnQhOWJDIhT1hr0GqSEY3Mnp+FWYZqIjS9bBIurF7RP3dn",
	"3qSf0BEol2VCQhawGL5jnyqRqeZi8NR15/bau3OePnaJ8d6kNhVa/GztLT6QSY+HIROrzZ9UhCxRWsqw",
	"MF96qalyP1UMbE2zziRcQwueb+ATANNXQaMTqNlrM/9WawsTYKkGBw1UkDTTURvhGjpTWTPvY7ghx/zA",
	"tbXv7KdR37n65brBNXX9g7X4iqz5Lf32Lrj6mot0sPZvufZYpNxJ3cK420VsGmsYLEjoQMEtWkbwfTFP",
	"8mK0fcXDr1aIRkxXawTtdSJwJXMcl6VqlqIbx2XJChQJO6yMIcHddwq81lpt2je3Gxm3LIq/r9zkeOcs",
	"7yEM4sVsmDM1vJuCTVhMzJwcMmoWG7/dSBXrp1GLoEhFkYoitfG9/dDW2oL3Uh/IVCw7XsXztJCHMGp9",
	"LkIzia3AIQlzJ6V2gGoGhdhLkc37Yy9YJVipR1K5E0gpGGGXXGmFTIFM8YCYolm9E3/DtL99qkwNb5h+",
	"ILyw2tZ9wY4dd+eIEogSiBKIEogSqJ6w6gl35XHbeT/Bka1UC6/oKjMHXJiZu73pntIHTKU9GU7WBh4V",
	"9599LZ5KultCN4Y+1bdqIQwhDCEMIQwhDCEMPW4YcqGD2vmLhOvNHzIbP9OfCbdXrBZZyEX6NMn9pTNH",
	"ucQzXMQu4wicx/o0UszZBoF1yRSUXBU/JLLPwfS9wl7hvt8KOWu3tawJCJdiVasR/4q1GFn82i98xPVR",
	"v6+Ybkn4s+pbYK+6zEuzE+YoCVmyN4E/XAxa0vzP2jLamzQ2qnWbrURmtYMYihiKGIoWM0hhj4vCnNPi",
	"XJjypOYDpj95fRmzhI/MfiZ6Op/d2lfTYPZzbW8gdBusuLNVIL0J4WGrjursi7OCbSl1VyHOPhrpoBRH",
	"KY7KJFQmIcYgxtxbjKnniGVIZo51z+pk8oaV1E17E3unz0NBk/VpJlyflTgO9RFIMkgySDJIMkgyj4tk",
	"aqBjOYypNhqy92q0bfBjQolg43IBtTzzMVYs0Q9M07J+A6MZkvlNJuf9SI59f9kxuG2bo7Xh1c5cHrj9",
	"SoGTv53JmcAwCQAQXHxw4u5vU2mkkRGREZERkRGREZER7z8jzgLdtWix4vjO3TO5IPJMlmqOwdXhNM01",
	"7Kx8e9QDNbFyAYMOeGRmowt9mw3i4Sszwe0dNCtbY7kxcP1vhuKD+VG1bNhdpho3yYQrlbLQ3up283z2",
	"WF8m7EYZMbgbrvFYzdRch1zbOm3e+5s2SnNloy0acj1yPdqiIdaiLdoMXd4EYUsWaIt51t6xP702IXNE",
	"WIJz9yb709T3VDGKcIlwiXCJcIlwiXCJcIlw+cjhcv5pujt8dBnaeWUv6ROhyS7iwnw/bKRaZ+JMnA65",
	"Imoo08gsL/a6gMD0cUh4H5YP6N+EUSUFGTMimF2lfQF5JW+qFZ/efitkMqIRcQBMgkkQMSjzt6E/CzXP",
	"qfB5NWsqaqdAj5ERTc7t8al7wx63mrd8dXxSf9QKl5/ACig1jWZuJfFFTbvjPRvPq4DP1S+r7j7Enrvs",
	"XMjxk6dZlQS71MXWf6dIjw24MA9AQw5gL1yYeFgI7M1hlVhvx9cBBJo5VB/eu+7xfRWnS4ZT2d5QRdB4",
	"ADkQORA5EDkQOXCZs/McDq1T0Zh76v5vSf/XrDaGjo4MHWZaSZi89m4oGOQwoX1NnsiEMJpEnCVPsytV",
	"qTBDZsta5DrrBOdUcXnoK3yvNZhV4e1yDUN3X2QYZBg0gEQDSIQ4hLh77+67EsTN8/LNMiK9CTl8Nc+5",
	"F8Hpjmu6jAWpO7qdV+9s0v/ZiLhgqvFl2RtPC5qn1/6QeNZW8xbcpq+j/EJlFoIggiCCIIIgguAD8Za+",
	"PVVem8ZxIi9Y/QUNXZsgT5RUhO4Sd3bJAhAb9lSTTky1yNi5Ck8PigMaRQSunITZoZgIVeH4Vcuiy0iq",
	"fKaBFH0+SM33489EYxuuGC6pminCSwEuiB5PD5u9Od/umdgif4PC8e/dyvNf5XRS+do0fcoodXkxI33k",
	"iClibfMg2xEVKY3+sj1Ko78E4Ml1ysnqPFtOHcW7Qbr3Z7z3Wd+JMIwwjDCMMIwwjDCMMLwWGD5hM1Z6",
	"M8C0eTwGRVr7yvxZ9eAb7ACXOrL+xSZEZruTmtqxxaN0hEaERoRGhEaERoTGB3WU7kFsGQeZtEID+tFF",
	"JVqO7GxqJDskuztyYTFzztoEHyV2Mt5RkM78N4A6TMRRxFHEUcRRxNHHhaO19LhhzaWml+2EBTQK0ojq",
	"OQf8x9NEuVp+p4iml87vWZEn0wN5GsdEMe29d3xFvlOz5/NPwTFaarZLgqFZDBQZ8cFQw4I/aZKQeY9p",
	"KdyKcWneveAhS2oNVnPVdYBxSi+RsfHEG2kRaRFpEWkRaRFp8d7S4jIwtnl2vJA8rAfGT5KHix28h/SC",
	"uRU7ShgNnQWj9+k2RbAQzDdNfsWAPnaYRzQ5N18DVS61tY9MlRWyLq7lhAzleGam2eT5kEV1NGnKRqvJ",
	"B6IAzQ3mChF8kGKRYpFikWKRYpFikWLXQrEzhLh5YPUeR20aXpiOnqft1MmE2GR+Uk4p2/rcOCtTiMNo",
	"PYecmxGzXkahZEp8p8lZw3lP5XM5azTN5IeAmK42la5OudwJt2EldUKFsl/T2AfWpKmWI6p5MOPp5DA6",
	"VVbCJtdqli/YfLZcpooYyhvFmvQpjxyd1zhXDRnpyyiSY4iDWe9m9ZeaiOAvm9/f8NjsA7gYFJ5BvjCV",
	"/eM6YHdw5W+j7LrxRnZH/S+SM5IzkjOSM5IzkvN9JWfHM0vy21rB2sYMqgXnQpT4Uqhz8sQe8T8tM6NH",
	"1GB+Bn4hyEIAjLkeylQTdmlGi+tociaoUnwgbOh1mEPZHiMj9GmO3tWecT1kiZkrMoCpYl+EpSNPr1yQ",
	"ATVJzUPb5XB/Uj4sPldnYjaYe1Yi1KFbSD8bAJ73gY11znunvniX0n1XwcSHn5820e9ERlQHw1JaKnJK",
	"+XL28+PF/8IFewiXQG34dvysr5SDxTsKGz+tyDGEeMf48cjcyNwYPx6RE5Fzqfjx08Pya1Kls/qcfzWl",
	"YcIZM9G5165/mKa5xrXrXARRGrJuEgzN4t6ojJbp3nfc0JMyYlRcIzBnxb3uS8ht18DaoJuP9KpG1y3X",
	"vqpx3vubvqrRlY1XNSJiIWIhYiFiPVLEWs+FjDO0dCbOxN4MQMFlOkW9ugL9T5VzDhdmgbXCn+xnVzBe",
	"sCThIVNnwp0s+wUJxnQ28qaWLmvzpZpZ4BP02JBecJnUXT2+4JJCJzobG9XZuELu/qo/31pU1SBHIEcg",
	"RyBHIEcsddVfFRjcTGvTvuLzwxs6HUqZBWpDUtsXphJ98fkRn39uhHHyUJaiLEVTIzQ1QphAmLi5qdEc",
	"iX6jq+dK2gK4gW7OBXQbZIRv4xDnFkynr6NLQN0A8gzyDPIM8gzyzAO5Oa2WPW4a/HdZtYdNv2mtx+2c",
	"jdxx/FhEGkQaRBpEGkQaRJrHHTv2hmc93vhCzbfNzZKVjTTM7/tZLiWqWWCMCcoW/7rJagUbVRb+at5e",
	"1bQ1/5o1b72pDmYpfdBMI2f1QMgxyDHIMWi2gWL8EZl/TuXmkhaf9baSNlnOJ3cTmoAs+1ve9RfLRTmJ",
	"chLlJMpJlJOPUU5WbV4Xmij6i/+mIURA+V8WozbhSqEt+GOJxIZSGKUwSmHUuqPWHTEEt+vzrBwXUcYb",
	"phExEDEQMRAxEDEQMRAxEDGqTwTmmh0uogyb8J6DBh5iINsg2yDbINsg2yDbPMRTnJD10kF7xHTCg3oz",
	"xGOm00QoAqmJS02ecEGOYibeuX/b+FVPoQ9tRPx01GMJkX3CxYApqKKZiYooLgJGRlyEAm6e/3i6nwWK",
	"z2e5b2f4E/XUNItp834yISGdEKrJiOder9LzvDL1dXk1FtKFZpe6HUeUz4zWLBohQCBAIECgFQTKz0fn",
	"xwgTwQvAnLU/CJqiZDVfto7YyFRuceztfGobozGKYGRU2vsPC7SC+IJ9RnWaMNUicJMLE2EsuYCVGYYj",
	"dLef0HDEBVfaSMMLRuI0iaX5NqWIJq0zcSpJn/mLSQolQ3DKLDikK5vEEaMKoi3BG76FvmrtK/d/b9nk",
	"KDl89bXQ9qyWrTNx2CexWe6NJEnkBVwGDp+YpufMPGOBWRIDBq2FGxC920A2LATiQhkeMfK1yiHidb7n",
	"S4qX4gAc8Ejbq1d6EzJKI83jiE372TDJRyOhdsnf/+ue/uT+bm2fpZ3OzovZxzt/N6qDWbgE1dEsZiCj",
	"Kt74MjX3Y1KsuXv6k1da+aqXntfW3aXcaN1zs4aYHGYakfv5dBKzn2BMWWhbMvujCxdf15yZ5KsHGHk9",
	"kwEGiHcv5Trm2kHiF+Wx6UDxs4vINW7uQfJH8kfyR/JH8n8A5F9J6Tn6z8uKuQ6/+ffbV7l/HVoL6lqr",
	"pjwa9SaEh5Xqrlw99iZw2d/iQ8dCJR6JoVOun1Coo1BHoY7ngXgeiFTzqM4Dl2eWi8UazNnjvTE3csZ0",
	"Ox8xklAxsPdAH9p7kmHOgUaGAKD4zy/TCXJNXHfCAhRRpckPO2Qo07ogKK8vltH2nWiaaBJSzbagZlyQ",
	"44N98uzZs5fu9NJWUwRRqvgFazXq7i+07e3qg0SOCtojm01jt5GVUgE3JYXYaxGutVqncg2VOuwXRyUy",
	"65/lYOhtP6RZAjPsBLARNM3wQn5KeDgx6wzMzeocbDzg6ixkqsu51HTHkCpYRhsVYfsK10mWFxqr5z98",
	"ZW8ODwzBKDNXjXR35n6VAxA2FgQ9rivK6Vcry/O/raCaXVjyur6E/rc0//U6Zv37zGjBTTst3XlDXbFW",
	"N1p5h+l2p9NsjOglH6Uj/y8u3L+yyhjRMwDbxFsJhnTolglYMzEaEm6IcEOEWk7cD6CWs0zyeSWnfVAf",
	"K8mKFWXmmmUamZAe1cEwJ0v7Mork2M+r/UimVgqpzOjAHm6WGN9mnlH+cq4JgcnflrxiJzvR+LVZl98W",
	"tOxf15TAcyTvTVwi7mN7kTSQNJA0kDSQNB6N5tGDRE7J6A3u5qsZM7O8ShXggc9jKZM/sDwzSU6idFCz",
	"sc//vj6zt6zkN4lM472JfWqqvcyNWFwEURoyd0lYWK12cO9X6boeo02amxnXtkeb9/5t2KL5mY12aMhN",
	"yE3ITchNeGJbcU1WpVbGyw5CE0YY10OWEGc5D/2pqeZBi3Q9XJmh8r/z/hSRCj4bVJulw8r8M3Egp1l6",
	"RCMTmZq1nsRUKUJDO5tpRPqWduy8hgEzI+VWrfGQCRLQKEgjatbbrFKpWaObpEeVqbaAGQNFfqfIwGIU",
	"6XMWhap1Jo5E5AjLHTuefHwHDiX7Rx/fnxI6GCRsYBdA0ykqjWOZaOc6k3P9yLrOyaweIylE9QhJRDVL",
	"3BEldShWFxb8IHP72ERADZe7LepQxKlWyymSttddhZW4BMbDhlXP7HBMAhBiMLdMGkWo+TmNNHIMcgxy",
	"DHIMcszjsTzzorh95f7vcH6c8enF6R4bbGyuM2GYIMj/wFUmts1UzAl4kYlzctivfqMJYqvg4zrNwMsu",
	"swxx3YQP2r7o57jPMZTMLni032eBtvalYNSUy7l1JsDVd8SoUE1DZAasxlRoM7uC/PUkPl9rhWXmLB0x",
	"cs4mTe9N6yVr2dvY1BTcbRN2wWWqiimG9II5MWX7PiR9nihtSIwaSZZ5Cveo4qousPsUhBa7JWQjvvod",
	"rAXK+b48TU6HzI6nkMR9LyCimQid8AAPY/iM7fiZnhkyahZsMqLwTaaK9dOoRRBLEEsQS9AjALkMueyB",
	"65fmhFwv8laVa+JdyP7OnWo4UGOBaIBogGiAaIBo8GhUNoOELhXuzKarD3RWUIGsMdiZK7cY5iwfXOFG",
	"oc4KIR2OEkcNJpUr99ZDob2x44FB0L7BIGiH1pLLq9RWs/96lb2E5l+LXoKP4NrGX/Vvr8P0i4rJUd9u",
	"hFYMOwf1Ks+z5vwM4K0PfiWZSocvuLXBrQ1ubfAwFskeyb6e7NtX8HfBQewnyUMziajlbXt4aWaZPXSL",
	"pBiwxC4eTYj1IZkS31n0hagHhAvSTxMwVuvRyAzH1CxMCtUis0Vkh6kJ04mkgVloo4nNkcH5ahOqAe+I",
	"iTUos9+BWepolDAaTtxyp3XCe6m24iDbNtiZkDAzR+y5YD+dGqfljoB7aQI1Ggv7WWU5OFs5F0gtO82F",
	"41VKFBeDyJdlFs6JTKeGdflNCpzwUkG44BAggo7MF292Ndudjj3tVZL0aUJedFztMtsql18z164nfoeR",
	"L4NrxaL+UzKWaRT6KvqxkH3yfQcOyE394WT5QnK3gYFMm1naHgvkiCnSmZ6lvuhMD5pt9TKxbb4wGK6q",
	"HY0ZdIs9y6iR3UzFA2REKUQp1BJ/41ri7zsv194B+1L0Ix7oFSdsAEu+t2eSRlYZWZhBVOCynVoa+d5R",
	"mmqQDnUTFYkZifmxEDNEdbL00jaAEbN2MGTBuUx1WzGlDMiaNlT7bViDfuLfIO6NOieDEyhg36U+sYk3",
	"5HIwp0SHHLftgTC3Riv7TKJvAjIcMhwyHJ70I908NrrpxvFMaI4RTc6ZjiMasHZkPRQWHfD74TMrpfLb",
	"ARrHJJdX9Xn1u2mCX3xZJV3PcgeSLPw1Zclk1XPM/Gv2LHOThoXl9po/aGeI9IH0gYdxKHxR+JaFb/tK",
	"T2I2/74gmhe1xL1JehO4V7HSQL8siZY6ZNH29sT6E5Z53diNY3t54i3LWJSvKF9RvqJ8RfmK8rVWvra5",
	"UJpGkUl6zib1mvpDm87Mv7zQveCUdD8ckrdsUha4OZnUjePuh8O3bOLyWXm/W8iLTzNywqUFItpK2Oud",
	"BcSJqbzmVjRTKKPSKgLae84m2UroLNuTWcMX85vV1vtXWuWrOTxjlC7ooCOWUyr4ips574bMXytj1nTF",
	"incJQeSo3DBxzUbfKZIrolV1S0iOcP70XfAlSyetXfiNA3iv9pV043iPKvRKRJpBmkGaQZpBmlmCZqT5",
	"FHZqlQc5mKFxDBBz1E31sHUmjsHTTBFKPh7/Aosx3CFmBguSkJ1Wh/QjOZ6LO5B0xxXzhumPx788FEXD",
	"PgiebhzD5WqrLNconlE8o3hG8YziGcWzEY/t7IOoFdTd7JOxEpUEMmStM/GJJbzPmcrJZfOL9aq/DIZU",
	"DBj44oDrPNHy3CxDwqyw/YSpoX2ytATPqrGy2sJm49+HkvZlyMC/48TIQ6U+mNSqBVbFyxzhL5+l6ZKb",
	"5mhXEJsfTIS1Z/hXfsjXnnma8GUyXTjyFXqmHGA9s8tbcfIes5AnLHDtQuBB4EHgQeBB4HlowONgYJ6x",
	"oE1TYw3I3MVYm78TG4rCGypRkqEkQ0mGkuxxSzInd+ovVdr3cfdBetX55FmZshkfPMjbFnPbznZOVKJD",
	"HYpSFKUoSlGUoihdQpSWtoXtK/h7GB7B/YJzA0rZaJf18tb+7uXt4sPkQslzT5VH9PIXJgZ62Nh98X2z",
	"MeLC/3PbFKTNx9TYbfzfn3Trn87Wyy//evK/u39l/3j6//3P//9/f3a2fvjyZ2frZXfr53+/fff+w9bp",
	"p63PdGv4n/ORiLf0xdY/X652nn/9nwq7M4xHhKIXRS+KXhS9KHpvsIud5ydmUtmLW6C/onRQ7R/2GIRr",
	"5w43ybjpRcmLkhejyCB6IHo8nl1/215vUXdEDLFYHKOYLwyiBbdI9eMStkCyBwguSxhtmT82kI35Bhur",
	"vaLlii+MuQjleNmrP0ovnvIR+yzFqi/761hW7A+4MuZNItN4b7LiuwP/1sbREcrLYhc2G5pd6nagLorZ",
	"zE4MpE2kTaRNpE2kTaRNpM0K2vQ3w823ScyuIrQ+EjWHTpmF4onPFLVj17kYD6EFoQWhBQ+nUGY/cpkt",
	"pOZ9X9tgSIVg0RJ3CedfI/61anH9Ppd03xew4HLcmWtaq4sjXEwbWrh1tnhf609GyP99O1e91jSDKzNh",
	"r90O9/pPUPCqLXEv399baysm0LUvll02r03rmyrqUXFBLGIaYhpiGmIaYtpjwDSVjkY0mXjMqmSFxpTm",
	"8iKkfCfWQi8awcaVRdQ51lRIrA252VSUZKtwRxddVbUcPXFQlKMoR1GOohxF+VxRPpW3FbJ2aWm+SGHT",
	"vnL/t+CS+BPZ106pUlkh0psQHoIS4kgEddU2U8NrZrjOXcJuPnR4XOctVA0Riw9wstbNPbxxoa4bu43O",
	"9psXzz//8Px59+C37tufX2/vvP+js//ry4OfG8VjHHQTQi5ALkDzETQfQTBCMLpNMMrci28ERnPdrOYQ",
	"TpW31cOGk843ow9B/QZyDHIMcgxyDHLM/ecYgxo3RJg4rUCYj3FIa7Q0ZXqxiR8cwHyrZ0vIUshSyFLI",
	"UshSyFLIUutjKcc8Gzosgym2qm2zfWmxZfNrm/kCu2a4pIyYRm5pPmKEC3J8sE+ePXv20qwFI6pbZwKs",
	"hhW/AOf6Kste8C6vRrOdzs6zrc72Vmf7tLO9C/+1Op3tz41mw+bf2G1kxVd7uRdr/FqEN66vlrdV2wPw",
	"M3fX7o/SSPM4YqTPqE4TRniozCd2ziaqaGftEvzk/m5tn6Wdzs6L2cc7f9cNiE1QaOXSrlhLNsL5x9U3",
	"wiX4yf31jZh9XNsI79m/yUYkaQTDUKy5efpTZ/vfP/575/c/Pu+8f/7b3h9vOy9fv/p8sHfy+Z1txzTR",
	"98fff/r88/aPnbfHb3998ez93s6n7vO6VpnXqps0s9365fAVefJR8AuWKBpFE/JR8P+mjPzCLnkgBwmN",
	"hzyAH05komGBPwS46nOWPG2BUf4tbpCuOwLZEf7sILgffBf//vMPP/z4+17n+Yt/n3R+/PHD/h+ndhyK",
	"6U62j7ffvHz96f2LneM3O8+6L9+9+HfdUEzX8UcxGt+k/wSIqbV4T9TndJu+E1AL9JzALTRuodHcEneQ",
	"6DlR8pxgfmO2js1j+wr+OivLZU0P4J0lDQ9AoC2ltXc1mauzvyuzANsKlMIohVEKoyIbFdmIIY/cKIA5",
	"sX4zCEnSiK2qwIZ3FuuvjyHrm4TlgILue0yOJRtxJwE5VlR1t29Zz71eDd6Z6JJzNjHrESWpfdVibEZY",
	"qbJwxe1rE+tAa2HANPv06NXRrvWwgVym65SSUWrXbElUGscy0aQn9ZBArakIyVtTtID1TtERIypmAQi5",
	"QIZswIT5oO42Vtx1FcB2utOg6NBVrw3uHn9+9v7V67enJ5++Pz4+OPj1xcs3zw+6nyq0wTt/PP/9+/fv",
	"3/x68mxn/+DH7d9ePn/97Fra4PuqXjWr6Fq0q7UZ3aZy1VQCdau4q8NdHepWcVODutWSbjVxm4ZNhaQx",
	"+S8Tj+bYHvJv2mDYFPPNRKKBNmMYGpTdKLtRdqPsRtl9jTA0zjhuDUrJ9pX5c93oM2AWOD/0jLUcXEfc",
	"GQcLiw9YbYsw4gwiACIAHsrioSwyEDLQw4s4sxIDLR9uJoc0i0y+HhKQdL4NXQfqLhBcEFwQXBBcEFwe",
	"oDXZisyydHyZ6vOWcnCZe04s3+QpEZITkhOSE5ITkhOSE5LTRgPKbODYq62ZNW2pNnE5NQNVoyFSTIRm",
	"VpoBVNo5C465HpKEilCOSEg1LVOZyfKhapG2vxGnRDSZQXhCeEJ4QnhCeHpsl4Vfj4rGrDeU8rytLvhl",
	"PQ7t0yjq0eCcMBHGkgttfbl6E3JywS/NgECmE0J7MtUkAx8a1cbjO2YgqMz7R9PkPprCJnQ+M0X9Zlu+",
	"ks4HzXcQRxBH0IIXpTFK40WqDCfgrIQsS8Tr6DPiiIolwglAsuoIAh8ghxWjBkB+336gAOs+baDEVLhl",
	"FlCtE95LNatxaebhY440mvXUOZss7KpzNlmmr24UA2AdLvrr6g5hp33LjLn5LLP+UfUd9MmmLfQTDa1o",
	"oNGHxHyOmrO8w7xZFQfgbe6fSBvU1ywlegJTJmQsPvJPvyE/erOWXNt3vvblTfvLm4LRRx4pHSkdKR0p",
	"HX3kDTTHjoo9kBsZcU13eICGGg94k+2GdFsma1vIbbu4Q6PwjA7FLYpbFLcoblHcLufWHltZOF/izqq+",
	"2lfmz2F4lLxlk69twS7nmPAUxHKY0L4mfjMP8w8k9Zk4NF+dThOhXNV534ymPdOhUcJoOHH1JVy4jGRC",
	"bE1IKJlduxLWZwkTgZ0LEQXboDjtRVwNWeiLLqPBezZ+ZfJ0cLDYHCjXBXNtgqiYHPUrtHv3Tp11D3RM",
	"X5qNy62B3CqpnqqefkEaQxpDGkOLKbSYQhxFHL1LHH2foeGNeHTpIEpAkdMDynzwJAuY142XtCI9Yowk",
	"JBgkGCQYJBgkGCSYBxAjaSl8mRsMyaMJD91t1S1yOkeRRUDg6jQRZgb2TTptBzVVrDqE0joZBZVb90a5",
	"1bk75RYqqxD1EPUQ9RD1EPUeRlSpJTlvXgCpKejVRY6658qkzVhX2a657dBQiDyIPIg8iDyIPIg8jzkc",
	"1M2O59rxkKplLmK26QgXNXbc3oXyg83vXjLSPPc306xH6A747bjUwby6vlNd/eu34lZnikffOsRXxFc0",
	"9kd6Q9868K0rINVNnezAxc7kWM9oU1+7+0xpG9RkQbfcnbMgFI826ggRCBEIEQgRCBFLeQyWBP+NtUH2",
	"3yCN3rLJXBNub2RVAI+87bb94SbG2/dco1RTTd+7cyu7ASUPWpUjcyBz4LkbnrshdCF0Xd+qHLim76Id",
	"3MS+fIHOxlmHIwRtGII6d6zJQc0MUhJSElISUhJS0gMxyF4VkeaaZs+npKl1NoLS+kFpg4dtd2c7joiG",
	"iIaIhoiGiIaI9ogNyNd2cmjDINQHHf1gE8wNBu7SYMgmPFxDJkEmQSZBJkEmeURM4hnhhiySioU08tEn",
	"mcsjWSokEiQSJBIkEiQSJBIkksekJck4YWUmkYmmUdv5H1/B35MoHXxtW4fxOo/7X82vBJLDxxhIodIR",
	"S4jNsEVOjTBmIowlF1ZAmRoG0YSwy1gqP9D+PdUi68+yREpQxAfI7p0pZylYyvrk1o+1FjuMQyugVS3z",
	"9TdWe0XLFV8YcxHK8bLO8KUXT/mIfZZi1Zf7EN/gTSLTeG+y4rsD/9Ymbamm5R2D/xp8nZpd6nagLorZ",
	"zA4xnushsSKxIrEisSKxPgJiZUGacD0B1LIcdirPmeimBpT+/GJk+34k07Dqty85rIWfK0lWm3cWRIqy",
	"aWqiQ01LrrDPYpdxJEPW2O3TSLHq0EoRH3FdCK6Ujc7OcwiJxEfpqLG73ekAJ7p/Zfhn5sKAJWuw/86C",
	"Os21Mpo2uCK4EvIJ8gnyCTrto3h+BOK5JF4X3pg/o6OxkrU2pE9O0mzIYDcvy27ZWHe2aBSbKDZRbKLY",
	"RLH56MRm3a607dY2amPUVMvWwyyNqhavivQm5PAVdHba+w8LdFngTjOZ2c9eV+rGiSlAcys4eTiv3oQW",
	"6mur26qK5OvqPz+zKJppvlkIab7tpXMT/0Ta7JdCATQ4QTmPch7lPMp5lPOry3knjRYonn2qatXzic/j",
	"NtS+rjBU+aJMQ5mGMg1l2uOWaZnsqVf6fowVS7TKbb2I1esq03dpbLes/rczcSYO+9D77hEJJVPiO21t",
	"GZpmtkGf9piPAd4qvWLNHgppY5qYNcUMNRQZkjHXQ3grTuQFD1lI+pxFoaoKwGGa4EXf9XfDq0hYW2a1",
	"nF2vehrlPsp9lPso91Huo9y/htyv2M22r9z/HYZHyZJB1r3ozpTU52xSFzh9KokXm+EXazLXFh+9C1FA",
	"ooBEAYkCEgXkWjfGteGxlxN6b5i+M4m3PkunbAeJO0YUiCgQ0XkJnZeQCHDLXLdlbpuVTUdsZOq2+Ab7",
	"fOoZSydyIBMSDFlwbqZbLiGhgZFcTbP9hEFsX9AoZTlfeaE0o+HcY+fX+WpuGE+ay3lScRFEacisriCs",
	"dqlyr7sSelJGjIrb8p3K9Rkq1BGPEI9QX4B08LjpIC9Gl78d/ShmAqKIwDqhhwljxEgTRWS/gAS7NkAO",
	"C5vEybom3K6tDKkHLWJG07xInMH2hIQm/YgLZpdu+LGYqX0LPtloYuZqn1GdJvaObrt+m/6jmpsJkZ22",
	"5wEEclUxC3jfrGtcFGaLW+6pr3vhVcFYqAjNCqVKyYBPD/bdW0/BomCL7NlWFzkpZH0umOuEaU6Oikzp",
	"5Kyxbz5excjJydHMCnvWaJmsT+zrhZwjpslEpiSmShEaSTGwXm99PkgtR5lZHTEySKgwwme21I/Kfv1c",
	"ZfWCZv1O/iCKafOKOmuQJ6aAac/ZEp5Ctd6VO02RIb1gZETFBJoUUMVU0645LlOSxiQ1MnOrR03Gtlpm",
	"OPkotrmYVGZgI3YJMoYb+asM97QIeW3jP+7C3AhSpeXIcgEUuN3pdDqke+hN8sM08YscFGoAgMvQTLSZ",
	"qQLD2CUDfsFEpjYz2UoRTWyzzJaRBiDZnwgpttztu08L0yZmie/Qt2zSIod9GCedTCAGlHdQFGxceM0S",
	"9fRFu3LTKGE0nMCEp8IXnnuvWZjPsIL1KY/8DP2+89IuCrlLhQtTFJZWd9G9qabjq5EMeX9CuG7a5tuW",
	"gjSsdqHMA+dtqBDX76KZa4Ft0qGIU62Ws4fZ3kQ1ViJ1WGzttMq0ICYBYJ0fYTOLzM9ppJHskeyR7E0L",
	"Xq69BftS9CMe6BXHK5BpFLoRc/LPfLQZ0gYu2ynpeK2o4QvmZVrVOOH+Bfcv9z6YqA/uUACYxrI7nJVV",
	"ou2r3L9MioMMzr62gaqX0JradIQrlTJrrlOsvt3i5IHMIGePuZ1DSBjXQ5aQnoExRTjMghxeVipOcx3x",
	"xtZz82rTigxru+9bU8kuWYRMQpbsTQp5z/sQoO+P3Eu3r/iF4lH7i4yIjIjaX6Qn1P6urv219OC1mJT0",
	"2JBecJmYrUamV7R6Nau/qtCjAuFMAGtAiQYbG9NHsL7agQW1VEgSGUVmvEiSRkw1zfQV5/BJ2iFyCqpp",
	"fcY8ZCShYgCbH6dJdDHNldeBKS4GXg9qlnAykmazRc3XbnIMpfhO27pp6fSDPABHLqetE2zsQK5F/nB1",
	"ALUYYJ1nPOgBq6Cr6Abl9YsmsWuBItTpG+nIfMumEbY34cN1JOhirYTZIlvCR5snV6ZxrN8Hez+mx2ZJ",
	"N9BoH5l62bglIrSPL2PuNMXmeYucgJocFO09qYcmwxEVIdUymUDhuX4wjXGzA3qOkjjhMuF6kul5oQ1F",
	"JT9PCECUbShrkV/kmCVEpKMeS1xOQz4wwOuza9ph7JAe8+sVpFA6S5KvTDbNaH5y+SrBRx9a8U9TLUem",
	"P0yWIypSGpGEmRE1Kf0EV9a4wV061CSUhJRHk3zmXBH23xSiwOQygNYrOvKjwy5YMiEhnZAnfCAkaKWz",
	"+e717fYs4Xj2sZ/wY5PnkMYxE/BV2KXPrGUwZjQy6xl8Ca5Qqq2+j+kW2bM//9U1q9lfx+Yh+Ym8O3z/",
	"5B299EV2YR42ybvu70/8C3usLxNm32iSd1wUEz99Wux+r78Yms8yJNJUyekfC8rk0N2bwKEpTKg0cfPe",
	"N4SrbPpwpXlAEjagSRiZj1z2yXgI89skM6DOWVinnLYkfI/3QJtXeUMX5fTed6j2dvsW1H3jvgb3Naj7",
	"Rt037t5w93Z7mm3T5QkPbSDItMokyCYAk5KiLUHgom5UWDeYiVuIhMHhdN2aCMm+dlCoXCJ2wWWqSgYS",
	"hRxcC7e89UpMeQLmFrVZcJUZVDgGNfNK6iFLxlwxGwckCwNisvGdMbWsAEIvXfhl3Wuhjmk8SGhotq+h",
	"HAv//74cx8WOeXOjCh+7462KDnTWTo5lYBH8hyUSytB8xMro64bpNi0z7jcCo9UHki+SL7q7PQp3N0R/",
	"RH9Ef0T/AvqDc16tTUsRetUQPlsbWsZZttjzF3AEtGTPRF8mgTup6BadCJ0bgRrSxM6FIVVdd4LjXQSs",
	"0TlPiHUb9D1ko9yM0kjzOGIOrKeB4InJMWE6TYQRfWBlLkWlawDQ/IG90/eCCQ4K/YRRJYVqem/FsUzO",
	"3WkSnIsUehDaOc8g5w3L2+N8gi6+3+Y4VbYxZg9SMIxxJyaN3cZOZ+fZVmd7q7N92tnehf9anc7250az",
	"YaCM6sZuI6Sabbk8bjNkRGlk0DwGYRphGmEaY0cgZiJmrgszF4dnrNAmJ+xCnhuayxwEzVDmvDAddbVI",
	"V03NfOo99+qd9JrWluCsMeIDQ25icNbwP1sbIW8d5PzgQDUczXg+UkXGLIpaZ6KbVdp7wKYZFjujniFX",
	"WiY8oJEzXlBNm3lFR8QyTiPqleNOc93VxPCS0nQUt8hvpv7OCsKZYplfSQ9sN+A7b5YAmCuitJnVgRSK",
	"h3alAEOhZt4XENqeMJ1IZ92UU2F7n1L7iXBF+AiuRLL6+iahIykGDtCBNVST0NSsPmJQF3vz21JYYzxP",
	"RFBEUERQRFBEUETQuzRRr41xmmea3oTwcBMByYpqvPsPJp07P7tG9RmyC7ILsguyC7ILqs/mqs/aVl00",
	"qT2bPYbTTpVXK3kvGipC51QWUk3rnci89sgVBYoqFUPQqSCRSk3PW8GhiMCst45ge2kiQjkWP7tXE1cb",
	"sN3QXMhUZdnKPlFsAK0EtZs7/PXP4OxWMUAvIysmrhznEeecilxQBJ35vvVcDaZeaK6Z+aBfUNffuEnI",
	"wtm6jt3zqr5yMcOYSLiZ4u4o2HspCXuKaRYE09fmhYgrPXUhs3Ufm6ZaJzZTWw2mm/aE2/wKxS/CTlfp",
	"+0afzdnpeqJpAh0ESkrrwKklTMFJfmbukuxg2PTU8cE+efbs2Utie7xFXtlVIlMOR1Rp7+/2hpnnSSqs",
	"q6lLYUYkjaidItZwKBdfEHrUDELVEbdZ2zd0xF3qoNciXHP3CDm2txgaySzk2DRdkMG6O0nL2+oi+yEr",
	"/g+rqYr9pE5sgvrJOk9a/DbNoqIGENKSj9g/hmfACgaOEQIaBWlEtZf/th6qNbeap3zEPkvBqgOXND6e",
	"7t+yZYRfJ50XqF95cIOHGzzc4OEGDzd4uMHDDd76NngAreByVxmIxYZrGNHk3Ioq5QHa+v4UQhtX7PBs",
	"zA/BNQczArtn8tEnWqSrZzN1Wdl8uQJfs5DI1ObktjVgZisjMx8gXEXe0pYn5egWLXKoyRjMhvUkdiFW",
	"esyIxyB/W7bvQtJzH5mrDbjMgUGxq9hMgSrtZX0Ge72Pvvou1ocr0u5fTTdVxWmZzTXft/44Pm8ITaNI",
	"jmHht0FEsgK4jb8hJgCJzkYjlKZBSub3lVQEQxtTR1fHAvTbXt6HoORVgS5gguQmKTT9Xp5SrN/Hr7Jv",
	"VohygTYciMmIyYjJiMmIyYjJa8PkrASV594i1pzkk1kH/cZmICG76Kb1IZFhGuh9qmkkBy1bar4ix7ni",
	"lwKItV5xOx0Y1MUhZCBkYMgr9HtHkniIl9nmAKGeHUDPlv3TuRo5G4mqS+6zpDP/XFZXkitqrm5jevLZ",
	"2X7z4vnnH54/7x781n378+vtnfd/dPZ/fXnwM5QJwYobu43/+7Oz9cOXPztbL7tbP//77bv3H7ZOP219",
	"plvD/5yPRLylL7b++XK18/zr/1Sfji5zgwG7jKkoXo7ARDpq7P5pXzKN+FJ9QUL10Seh2s1Gp7jLEuUC",
	"BPjorMSdPmcRvPJrmj3EhkhaoN5apjlUf6Mu51RMjvowiZaHuebyiV/DMLKw8fULMiAyIDIgKppQ0YR4",
	"+JjxEEgqGJZPavbMYy9W3MWyIypCu8iNqOCxN9ZKUgGB9At82ToTZujO2cSZ1Znh+7sdD6liqn0Ff9+y",
	"yde/zYBUPG/DtU3tK/MH0tl7IMKQZHSqCBeKJdod5o7YqDdzmmpDOZovAMKmwo4QDmMjzbL7beEDtwZ6",
	"cJ2CvUuAjeQFy5eV2Cdw64EtKQvOGsgoYgGU0yahDNLsXly4pOxSM5GrtnvgDqTtFcsBgYYT3iexVIr3",
	"IjsfIzfVwLs9iqCLzRwX2r6gSG9i86EGKuFigfIh5+uQPyBmv8FpZ3YV2BQ0p+Gv7M4nx/YNGoaNL6UK",
	"NG1H7V7lG3R25qbw2Vn7T7r1T3frc2fr5dnZ1pd/nZ3ZuVz+paJ1zUYWTGzu0SzVbJ8m4cfY4PihZqNG",
	"UaH6p2lK0w+pzXPaFAlH18DO89pvp/xtd0FtO1au/3rG7/qjlP/mPpjcixdFrH287MKy8SYXq2AL3YMP",
	"cbpJdHepLxzd7O1yY7/h+XyzWful8m5BPAzBjTBuhHEjjFGQ8TQIt/u43b/b06B2YDopqres3offVen8",
	"ouIuOUiJ+88yOfv7JV/Rqvh+Vac+hZMiDlHxAmZmNh+NWGjmbTSxp0Br8x8sYTmyKrIqsiqyKrIqsiqy",
	"KrLq3bOqDT/M6mH1nU1QpFWuzfST/nK8ACDrgiXKTEv3qcURrSBalx0ibQlp7dL0yXaieTDigo/SUWN3",
	"OyvVTOsBS0oq0+K7XxA8ETwRPBE8ETwRPBE8ETy/RfBMhe+2LauJs4feyylNsw7PvVpmzY9ZEfu5Eu4/",
	"bSK2IbYhtiG2IbYhtiG2IbatAdu+NhuKBWnC9cQw0dfmVWM/kml4Ks+Z6KZ62Nj980v2dF/Kc86yx1/M",
	"y2ZsLE/NcJt5odFspEnU2G0MtY7VbrstYyZsUNcAfi+7+/0iAxqV3tve+aHVaXVa27s//vjjjw1TtGvT",
	"lWe3DzLRNIIc3ZNuHKv8v99LzftePM1EjMglmxdYIpdsP1Vajkzjcw/33AdV/9qHiM4rvDhC+VpBbOr8",
	"k3cWZXNPXrFeOpjJDcKbNb5++fr/AgAA//8zKxztneQGAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
