input:
  generate:
    count: 0
    interval: "${SEEDER_INTERVAL:100ms}"
    mapping: |
      let subject_count = ${SEEDER_SUBJECT_COUNT:1000}

      let event_type = "prompt"
      let source = "demo-org-seeder"

      let token_types = ["input", "output"]
      let models = [
        "gpt-4o",
        "gpt-4o-mini",
        "gpt-4-turbo",
        "gpt-3.5-turbo-0125",
        "text-embedding-3-large",
        "gpt-4o-2024-08-06",
        "chatgpt-4o-latest",
      ]

      let subject = "demo-subject-%d".format(random_int(seed: timestamp_unix_nano()) % $subject_count)
      let time = now()

      let model = $models.index(random_int(seed: timestamp_unix_nano()) % $models.length())
      let tokens_used = random_int(seed: timestamp_unix_nano(), min: 100, max: 1000)
      let token_type = $token_types.index(random_int(seed: timestamp_unix_nano()) % $token_types.length())

      root = {
        "id": uuid_v4(),
        "specversion": "1.0",
        "type": $event_type,
        "source": $source,
        "subject": $subject,
        "time": $time,
        "data": {
          "tokens": $tokens_used,
          "model": $model,
          "type": $token_type,
        },
      }

output:
  switch:
    cases:
      - check: ""
        continue: true
        output:
          http_client:
            url: ${OPENMETER_BASE_URL:http://127.0.0.1:8888}/api/v1/events
            verb: POST
            headers:
              Content-Type: application/cloudevents+json
              Authorization: "Bearer ${OPENMETER_TOKEN:}"
            max_in_flight: 256

      - check: '"${SEEDER_LOG:false}" == "true"'
        output:
          stdout:
            codec: lines
